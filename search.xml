<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cona安装</title>
      <link href="/2021/01/10/cona-an-zhuang/"/>
      <url>/2021/01/10/cona-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="conda安装"><a href="#conda安装" class="headerlink" title="conda安装"></a>conda安装</h3><p>先下载安装客户端<a href="https://www.anaconda.com/products/individual#macos" target="_blank" rel="noopener">conda</a>，如下图：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/0081Kckwly1glfc1p61g3j322c0qcn1b.jpg" alt="image-20201207153932742"></p><p>然后安装，继续下一步，注意安装位置选择<code>仅我电脑安装</code>，然后</p><p>安装成功之后进行环境变量配置。</p><pre class=" language-js"><code class="language-js">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bash_profile添加配置：<span class="token keyword">export</span> PATH<span class="token operator">=</span><span class="token string">"/Users/cyh/opt/anaconda3/bin:$PATH"</span>source <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bash_profile</code></pre><p>然后检查conda是否安装成功，输入命令</p><pre class=" language-shell"><code class="language-shell">❯ conda --versionconda 4.9.2</code></pre><p>使用conda创建环境：</p><pre class=" language-shell"><code class="language-shell"># 创建conda create --name yourEnv python=3.8# –name：也可以缩写为 【-n】，【yourEnv】是新创建的虚拟环境的名字，创建完，可以装anaconda的目录下找到envs/yourEnv 目录# python=3.8：是python的版本号。也可以指定为【python=3.6】，若未指定，默认为是装anaconda时python的版本.#在创建环境同时安装python的一些包：conda create -n yourEnv python=3.6 numpy pandas# 激活source activate yourEnv# 查看活跃的环境conda info --envs # 输出中带有【*】号的的就是当前所处的环境conda list # 看这个环境下安装的包和版本conda env remove -n yourEnv # 删除你的环境conda env list # 查看所有的环境# 在conda环境中安装软件conda install xxx</code></pre><p>pip install ahocorasick安装出错，在Anaconda中安装：</p><pre class=" language-shell"><code class="language-shell">conda config --add channels conda-forgeconda install pyahocorasickconda search pyahocorasick --channel conda-forge</code></pre><p>参考：<a href="https://github.com/conda-forge/pyahocorasick-feedstock/" target="_blank" rel="noopener">https://github.com/conda-forge/pyahocorasick-feedstock/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型判断</title>
      <link href="/2020/10/30/javascript-shu-ju-lei-xing-pan-duan/"/>
      <url>/2020/10/30/javascript-shu-ju-lei-xing-pan-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript数据类型判断"><a href="#JavaScript数据类型判断" class="headerlink" title="JavaScript数据类型判断"></a>JavaScript数据类型判断</h2><blockquote><p>确定一个值是哪种基本类型可以使用<code>typeof</code>操作符，而确定一个值是哪种引用类型可以使用<code>instanceof</code>操作符。</p></blockquote><h3 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h3><p><code>typeof()</code>表示“<strong>获取变量的数据类型</strong>”，返回的是小写，语法为：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法1</span><span class="token keyword">typeof</span> 变量<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法2</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>typeof 这个运算符的返回结果就是变量的类型。返回结果的类型是是字符串。</strong></p><p><strong>返回结果</strong>：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ghks3bm1d7j30u40h6wh2.jpg" alt="类型展示"></p><table><thead><tr><th>typeof 的代码写法</th><th align="center">返回结果</th></tr></thead><tbody><tr><td>typeof 数字</td><td align="center"><code>"number"</code></td></tr><tr><td>typeof 字符串</td><td align="center"><code>"string"</code></td></tr><tr><td>typeof 布尔型</td><td align="center"><code>"boolean"</code></td></tr><tr><td>typeof 对象</td><td align="center"><code>"object"</code></td></tr><tr><td><strong>typeof 方法</strong></td><td align="center"><code>"function"</code></td></tr><tr><td><strong>typeof null</strong></td><td align="center"><code>"object"</code></td></tr><tr><td>typeof undefined</td><td align="center"><code>"undefined"</code></td></tr><tr><td><strong>typeof NaN</strong></td><td align="center"><code>"number"</code></td></tr></tbody></table><p>!&gt; ⚠️ 1：为什么 <code>typeof null</code>的返回值也是 <code>"object"</code>呢？因为 null 代表的是<strong>空对象</strong>。<br>⚠️ 2：<code>typeof NaN</code>的返回值是 <code>"number"</code>。<strong>NaN</strong>是一个特殊的数字，表示Not a Number，非数值。NaN 是一个特殊的数字。Undefined和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。</p><p><strong>返回结果举例</strong>：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空数组的打印结果：object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空对象的打印结果：object</span></code></pre><p>代码解释：这里的空数组<code>[]</code>、空对象<code>{}</code> ，为啥他们在使用 typeof 时，返回值也是 <code>object</code>呢？因为这里的 返回结果<code>object</code>指的是<strong>引用数据类型</strong>。空数组、空对象都是<strong>引用数据类型 Object</strong>。</p><p>因此，<strong>在使用<code>typeof</code>运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，都会返回<code>"object"</code>，</strong>要想区别内置对象如Array、Date等，单纯使用 typeof 是不行的，<strong>JavaScript通过<code>Object.prototype.toString</code>方法，可以检测对象类型。</strong></p><blockquote><p>小结：</p><p>使用 typeof 来判断数据类型，只能区分基本类型，即 <code>“number”，”string”，”undefined”，”boolean”，”object”，“function”</code>六种。</p></blockquote><h3 id="2、Object-prototype-toString-call"><a href="#2、Object-prototype-toString-call" class="headerlink" title="2、Object.prototype.toString.call()"></a>2、Object.prototype.toString.call()</h3><p>每个对象都有一个 <code>toString()</code> 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，<code>toString()</code> 方法被每个 <code>Object</code> 对象继承。如果此方法在自定义对象中未被覆盖，<code>toString()</code> 返回 “[object <em>type</em>]”，其中 <code>type</code> 是对象的类型。</p><p>可以通过 <code>toString()</code> 来获取每个对象的类型。为了每个对象都能通过 <code>Object.prototype.toString()</code> 来检测，需要以 <code>Function.prototype.call()</code> 或者 <code>Function.prototype.apply()</code> 的形式来调用，传递要检查的对象作为第一个参数，称为 <code>thisArg</code>。</p><h5 id="原型链的概念"><a href="#原型链的概念" class="headerlink" title="原型链的概念"></a>原型链的概念</h5><p>我们都知道js中的对象都继承自<code>Object</code>，所以当我们在某个对象上调用一个方法时，会先在该对象上进行查找，如果没找到则会进入对象的原型（也就是<code>.prototype</code>）进行查找，如果没找到，同样的也会进入对象原型的原型进行查找，直到找到或者进入原型链的顶端<code>Object.prototype</code>才会停止。</p><p>所以，当我们使用<code>arr.toString()</code>时，不能进行复杂数据类型的判断，因为它调用的是<code>Array.prototype.toString</code>，虽然<code>Array</code>也继承自<code>Object</code>，但js在<code>Array.prototype</code>上重写了<code>toString</code>，而我们通过<code>toString.call(arr)</code>实际上是通过原型链调用了<code>Object.prototype.toString</code>。</p><p>判断对象的类型示例：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Null]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Function]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Date]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex">/\d/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object RegExp]</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Object]</span><span class="token comment" spellcheck="true">// 判断原生JSON对象</span><span class="token keyword">var</span> isNativeJSON <span class="token operator">=</span> window<span class="token punctuation">.</span>JSON <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isNativeJSON<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：[object JSON] ，说明JSON是原生的，否则不是；</span></code></pre><p>对于自定义类型，<code>Object.prototype.toString</code>方法不能准确判断一个实例是否属于某种类型，因此引入<strong><code>instanceof</code></strong> <strong>运算符</strong>进行判断。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//自定义类型</span>  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 "[object Object]"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 true</span></code></pre><blockquote><p>参考引用：</p><p><a href="https://blog.csdn.net/qq_39408204/article/details/91492061" target="_blank" rel="noopener">Object.prototype.toString.call(obj)精确判断对象的类型</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noopener">MDN | Object.prototype.toString()</a></p></blockquote><h3 id="3、instanceof"><a href="#3、instanceof" class="headerlink" title="3、instanceof"></a>3、instanceof</h3><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链。</p><p><em>原理</em>：判断实例对象的<strong>proto</strong>属性与构造函数的 prototype 是不是用一个引用。如果不是，他会沿着对象的<strong>proto</strong>向上查找的，直到顶端 Object。</p><p>通常来讲，使用 instanceof 就是判断一个实例是否属于某种类型。例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 判断 foo 是否是 Foo 类的实例</span> <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 true</span></code></pre><p>更重要的一点是 <strong>instanceof 可以在继承关系中用来判断一个实例是否属于它的父类型</strong>。例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例</span><span class="token keyword">function</span> <span class="token function">Aoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> Foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// JavaScript 原型继承</span> <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token keyword">instanceof</span> <span class="token class-name">Aoo</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 true</span></code></pre><p>在多层继承关系中，instanceof 运算符同样适用。</p><h5 id="instanceof-复杂用法（JavaScript-原型继承机制）"><a href="#instanceof-复杂用法（JavaScript-原型继承机制）" class="headerlink" title="instanceof 复杂用法（JavaScript 原型继承机制）"></a>instanceof 复杂用法（JavaScript 原型继承机制）</h5><p>instanceof检测的是原型，用一段代码模拟一下内部执行过程：</p><pre class=" language-JS"><code class="language-JS">instanceof (A,B) = {    var L = A.__proto__;    var R = B.prototype;    if(L === R) {        //A的内部属性__proto__指向B的原型对象        return true;    }    return false;}</code></pre><p>以下为几个示例：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><p>从上边的示例可以发现，虽然 instanceof 能够判断出 [ ] 是Array的实例，但它认为 [ ] 也是Object的实例，从 instanceof 能够判断出 <code>[].__proto__</code>指向 <code>Array.prototype</code>，而 <code>Array.prototype.__proto__</code> 又指向了<code>Object.prototype</code>，最终 <code>Object.prototype.__proto__</code> 指向了null，标志着原型链的结束。因此，[]、Array、Object 就在内部形成了一条原型链。</p><h5 id="JavaScript-原型链"><a href="#JavaScript-原型链" class="headerlink" title="JavaScript 原型链"></a>JavaScript 原型链</h5><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ghky0p5tmuj30fu0jpaem.jpg" alt="JavaScript 原型链"></p><p>因此，==instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。==</p><p>在浏览器中，我们的脚本可能需要在多个窗口之间进行交互。多个窗口意味着多个全局环境，不同的全局环境拥有不同的全局对象，从而拥有不同的内置类型构造函数。这可能会引发一些问题。比如，表达式 <code>[] instanceof window.frames[0].Array</code> 会返回 <code>false</code>，因为 <code>Array.prototype !== window.frames[0].Array.prototype</code>，并且数组从前者继承。</p><p>当你在你的脚本中开始处理多个 frame 或多个 window 以及通过函数将对象从一个窗口传到另一个窗口时，比如，你可以通过使用<code>Array.isArray(myObj)</code> 或者<code>Object.prototype.toString.call(myObj) === "[object Array]"</code> 来安全的检测传过来的对象是否是一个数组。</p><p>支持 Array.isArray()方法的浏览器有 IE9+、 Firefox 4+、 Safari 5+、 Opera 10.5+和 Chrome。</p><p>当检测Array实例时, <code>Array.isArray</code> 优于 <code>instanceof</code>,因为Array.isArray能检测<code>iframes</code>。</p><blockquote><p>参考引用：</p><p><a href="https://developer.ibm.com/zh/articles/1306-jiangjj-jsinstanceof/" target="_blank" rel="noopener">JavaScript instanceof 运算符深入剖析</a></p><p><a href="https://www.jianshu.com/p/3956a2204644" target="_blank" rel="noopener">instanceof详解</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener">MDN | instanceof、<strong>Array.isArray()</strong> </a></p></blockquote><h3 id="4、constructor"><a href="#4、constructor" class="headerlink" title="4、constructor"></a>4、constructor</h3><p>constructor 属性返回对创建此对象的数组函数的引用。</p><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><pre class=" language-js"><code class="language-js">object<span class="token punctuation">.</span>constructor</code></pre><p>示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Joe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><blockquote><p><a href="https://www.cnblogs.com/ihardcoder/p/3667739.html" target="_blank" rel="noopener">https://www.cnblogs.com/ihardcoder/p/3667739.html</a>  有待验证</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM和DOM</title>
      <link href="/2020/08/25/bom-he-dom/"/>
      <url>/2020/08/25/bom-he-dom/</url>
      
        <content type="html"><![CDATA[<blockquote><p>持续更新……</p></blockquote><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p><em>概念</em>：<code>BOM（Brower Object Model）</code>是浏览器对象模型。主要处理浏览器窗口和框架，描述与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，比如弹出新的窗口、回退历史记录等。</p><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><code>Window JavaScript</code>层级中的顶层对象，表示浏览器窗口。同时 window 也是网页中的全局对象。</li><li><code>Navigator</code>代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</li><li><code>History</code>包含了浏览器窗口访问过的URL。</li><li><code>Location</code>包含了当前URL的信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面。</li><li><code>Screen</code>包含客户端显示屏的信息。</li></ul><blockquote><p><em>注意</em>：这些 BOM 对象都是作为 window 对象的属性保存的，可以通过window对象来使用，也可以直接使用。比如，可以使用 <code>window.location.href</code>，也可以直接使用 <code>location.href</code>，二者是等价的。<code>document</code>也是在<code>window</code>中保存的</p></blockquote><h3 id="常用的对象"><a href="#常用的对象" class="headerlink" title="常用的对象"></a>常用的对象</h3><h4 id="1、navigator"><a href="#1、navigator" class="headerlink" title="1、navigator"></a>1、navigator</h4><p><strong>一般我们只会使用<code>navigator.userAgent</code>来获取浏览器的信息</strong>。</p><p>代码示例如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// 获取当前浏览器的userAgent</span>        <span class="token keyword">var</span> UA <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ramona当前浏览器的userAgent为：'</span> <span class="token operator">+</span> UA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/firefox/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>UA<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'火狐浏览器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/chrome/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>UA<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Chrome浏览器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/msie/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>UA<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'IE浏览器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'ActiveXObject'</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'IE 11 浏览器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>我们也可以直接在浏览器控制台上输入：<code>navigator.userAgent</code>，查看到如下结果：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gi31zliw3mj31fy01yt9f.jpg" alt="查看浏览器信息"></p><p>另外我们还可以在电脑上模拟移动端浏览器的场景。如下图方式操作：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gi32c3j4r2j327y0lgdu6.jpg" alt="浏览器配置1"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gi32h8fbzuj327o0fwdjt.jpg" alt="浏览器配置2"></p><blockquote><h5 id="不同浏览器的userAgent"><a href="#不同浏览器的userAgent" class="headerlink" title="不同浏览器的userAgent"></a>不同浏览器的userAgent</h5><p><em>iOS 版微信浏览器：</em></p><p>Mozilla/5.0 (iPhone; CPU iPhone OS 9_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13E233 MicroMessenger/6.3.15 NetType/WIFI Language/zh_CN</p><p><em>Android 版微信浏览器：</em></p><p>Mozilla/5.0 (Linux; Android 5.0.1; GT-I9502 Build/LRX22C; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36 MicroMessenger/6.1.0.78_r1129455.543 NetType/WIFI</p><p><em>iOS 版本QQ浏览器：</em></p><p>Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_2 like Mac OS X) AppleWebKit/604.4.7 (KHTML, like Gecko) Mobile/15C202 QQ/7.3.5.473 V1_IPH_SQ_7.3.5_1_APP_A Pixel/1125 Core/UIWebView Device/Apple(iPhone X) NetType/WIFI QBWebViewType/1</p><p><em>Android 版 QQ浏览器：</em></p><p>Mozilla/5.0 (Linux; Android 4.4.2; PE-TL20 Build/HuaweiPE-TL20; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.132 MQQBrowser/6.2 TBS/043807 Mobile Safari/537.36 V1_AND_SQ_7.3.2_762_YYB_D QQ/7.3.2.3350 NetType/WIFI WebP/0.3.0 Pixel/1080</p></blockquote><h4 id="2、History"><a href="#2、History" class="headerlink" title="2、History"></a>2、History</h4><p>History对象可以用来操作浏览器的向前或向后翻页。</p><p>常见的属性和方法代码示例如下：</p><pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span>length  <span class="token comment" spellcheck="true">// 获取浏览器历史列表中的 url 数量,只是统计当次的数量，如果浏览器关了，数量会重置为1</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来回退到上一个页面，作用和浏览器的「回退按钮」一样</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来跳转下一个页面，作用和浏览器的「前进按钮」一样</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向前跳转一个页面，相当于 history.forward()</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 刷新当前页面</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向后跳转一个页面，相当于 history.back()</span></code></pre><h4 id="3、Location"><a href="#3、Location" class="headerlink" title="3、Location"></a>3、Location</h4><p>Location 对象封装了浏览器地址栏的 URL 信息。</p><p>常见的属性和方法代码示例如下：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取当前页面的url 路径</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳转到指定的页面链接。通俗理解就是：跳转到其他的页面</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新加载当前页面</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在方法的参数中传递一个true，则会强制清空缓存刷新页面</span> location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用一个新的页面替换当前页面，调用完毕也会跳转页面。但不会生成历史记录，不能使用「后退按钮」后退</span></code></pre><blockquote><p>详情参考：<a href="https://github.com/huyaocode/webKnowledge/blob/master/前端基础/JS/BOM.md" target="_blank" rel="noopener">https://github.com/huyaocode/webKnowledge/blob/master/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS/BOM.md</a></p></blockquote><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p><em>概念</em>：通俗的说DOM就是浏览器为JavaScript提供的一系列接口（通过window,document提供的），通过这些接口我们可以操作web页面。比如让盒子移动、变色、轮播图等。DOM不是编程语言，是文档对象模型，该模型独立于编程语言。</p><blockquote><p>API (web 或 XML 页面) = DOM + JS (脚本语言)</p></blockquote><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><p><strong>节点</strong>（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。</p><p>虽然都是节点，但是实际上他们的具体类型是不同的。常见节点分为四类：</p><ul><li><p>文档节点（文档）：整个 HTML 文档。整个 HTML 文档就是一个文档节点。</p></li><li><p>元素节点（标签）：HTML标签。</p></li><li><p>属性节点（属性）：元素的属性。</p></li><li><p>文本节点（文本）：HTML标签中的文本内容（包括标签之间的空格、换行）。</p></li></ul><p>节点的类型不同，属性和方法也都不尽相同。<strong>所有的节点都是Object</strong>。</p><h4 id="DOM解析过程"><a href="#DOM解析过程" class="headerlink" title="DOM解析过程"></a>DOM解析过程</h4><p>HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树，getElementById是获取内中DOM上的元素节点。然后操作的时候修改的是该元素的<strong>属性</strong>。<strong>在HTML当中，一切都是节点</strong>。</p><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><h5 id="1、创建新节点"><a href="#1、创建新节点" class="headerlink" title="1、创建新节点"></a>1、创建新节点</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>createDocumentFragment()</td><td>创建一个 DOM 片段</td></tr><tr><td>createElement()</td><td>创建一个具体的元素</td></tr><tr><td>createTextNode()</td><td>创建一个文本节点</td></tr></tbody></table><h5 id="2、修改节点"><a href="#2、修改节点" class="headerlink" title="2、修改节点"></a>2、修改节点</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>appendChild()</td><td>添加子元素</td></tr><tr><td>removeChild()</td><td>删除子元素</td></tr><tr><td>replaceChild()</td><td>替换子元素</td></tr><tr><td>insertBefore()</td><td>插入子元素</td></tr><tr><td>cloneNode(true/false)</td><td>复制/克隆节点（不带参数/带参数false：只复制节点本身，不复制子节点；带参数true：既复制节点本身，也复制其所有的子节点）</td></tr></tbody></table><h5 id="3、DOM查找"><a href="#3、DOM查找" class="headerlink" title="3、DOM查找"></a>3、DOM查找</h5><h6 id="元素节点的获取"><a href="#元素节点的获取" class="headerlink" title="元素节点的获取"></a>元素节点的获取</h6><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getElementsByTagName()</td><td>通过标签名获取元素节点数组</td></tr><tr><td>getElementsByName()</td><td>通过元素的 Name 属性的值(IE 容错能力较强，会得到一个数组，其中包括 id 等于 name 值的)</td></tr><tr><td>getElementById()</td><td>通过元素 Id获取一个元素节点，唯一性</td></tr><tr><td>querySelector()</td><td>通过类名或元素Id (JQuery方法)</td></tr><tr><td>getElementsByClassName()</td><td>通过类名获取元素节点数组</td></tr></tbody></table><h6 id="访问关系的获取"><a href="#访问关系的获取" class="headerlink" title="访问关系的获取"></a>访问关系的获取</h6><p>JS中的<strong>父子兄</strong>访问关系：</p><p><img src="http://img.smyhvae.com/20180126_2145.png" alt=""></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>节点.parentNode</td><td>获取父节点</td></tr><tr><td>节点.nextElementSibling || 节点.nextSibling</td><td>获取下一个兄弟节点</td></tr><tr><td>节点.previousElementSibling || 节点.previousSibling</td><td>获取前一个兄弟节点</td></tr><tr><td>节点自己.parentNode.children[index]</td><td>获得任意一个兄弟节点</td></tr><tr><td>节点.firstElementChild || 节点.firstChild</td><td>第一个子元素节点</td></tr><tr><td>节点.lastElementChild || 节点.lastChild</td><td>最后一个子元素节点</td></tr><tr><td>父节点.childNodes</td><td>获取所有子节点（标准属性。返回的是指定元素的<strong>子节点</strong>的集合）</td></tr><tr><td>父节点.children</td><td>获取所有子节点（非标准属性。返回的是指定元素的<strong>子元素节点</strong>的集合）</td></tr></tbody></table><h5 id="4、属性操作"><a href="#4、属性操作" class="headerlink" title="4、属性操作"></a>4、属性操作</h5><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>元素节点.属性名  /  元素节点[属性名]</td><td>获取节点的属性值</td></tr><tr><td>getAttribute()</td><td>获取属性</td></tr><tr><td>setAttribute()</td><td>设置属性</td></tr><tr><td>hasAttribute()</td><td>判断属性</td></tr><tr><td>removeAttribute()</td><td>移除属性</td></tr><tr><td>hasAttributes()</td><td>是否有属性设置</td></tr></tbody></table><h6 id="nodeType属性"><a href="#nodeType属性" class="headerlink" title="nodeType属性"></a>nodeType属性</h6><ul><li><p><strong>nodeType == 1  表示的是元素节点</strong>（标签）。</p></li><li><p>nodeType == 2  表示是属性节点。</p></li><li><p>nodeType == 3  是文本节点。</p></li></ul><h6 id="nodeType、nodeName、nodeValue"><a href="#nodeType、nodeName、nodeValue" class="headerlink" title="nodeType、nodeName、nodeValue"></a>nodeType、nodeName、nodeValue</h6><p>我们那下面这个标签来举例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>上面这个标签就包含了三种节点：</p><ul><li><p>元素节点（标签）</p></li><li><p>属性节点</p></li><li><p>文本节点</p></li></ul><p>获取这三个节点的方式如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取元素节点（标签）</span>    <span class="token keyword">var</span> attribute <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取box1的属性节点</span>    <span class="token keyword">var</span> txt <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//获取box1的文本节点</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取id的属性值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;div id="box" value="111">hello&lt;/div></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id="box1"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// box1</span></code></pre><p>既然这三个都是节点，要想获取它们的nodeType、nodeName、nodeValue，代码如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取元素节点（标签）</span>    <span class="token keyword">var</span> attribute <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取box1的属性节点</span>    <span class="token keyword">var</span> txt <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//获取box1的文本节点</span>    <span class="token comment" spellcheck="true">//获取nodeType</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取nodeName</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//DIV</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//id</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//#text</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取nodeValue</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//box1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//生命壹号</span></code></pre><h4 id="innerHTML和innerText的区别"><a href="#innerHTML和innerText的区别" class="headerlink" title="innerHTML和innerText的区别"></a>innerHTML和innerText的区别</h4><ul><li><p>value：标签的value属性。</p></li><li><p><strong>innerHTML</strong>：双闭合标签里面的内容（包含标签）。</p></li><li><p><strong>innerText</strong>：双闭合标签里面的内容（不包含标签）。（老版本的火狐用textContent）</p></li></ul><p><strong>区别</strong>：</p><p>获取内容：innerHTML会获取到标签本身，而innerText则不会</p><p>修改内容：innerHTML会修改标签本身，而innerText则不会</p><h4 id="documen-write-和-innerHTML-的区别"><a href="#documen-write-和-innerHTML-的区别" class="headerlink" title="documen.write 和 innerHTML 的区别"></a>documen.write 和 innerHTML 的区别</h4><ul><li>document.write 只能重绘整个页面</li><li>innerHTML 可以重绘页面的一部分</li></ul><h4 id="innerHTML-与-outerHTML-的区别？"><a href="#innerHTML-与-outerHTML-的区别？" class="headerlink" title="innerHTML 与 outerHTML 的区别？"></a>innerHTML 与 outerHTML 的区别？</h4><p>DOM 元素的 <code>innerHTML</code>, <code>outerHTML</code>, <code>innerText</code>, <code>outerText</code> 属性的区别也经常被面试官问到， 比如对于这样一个HTML元素：<code>&lt;div&gt;content&lt;br/&gt;&lt;/div&gt;</code>。</p><ul><li><code>innerHTML</code>：内部HTML，<code>content&lt;br/&gt;</code>；</li><li><code>outerHTML</code>：外部HTML，<code>&lt;div&gt;content&lt;br/&gt;&lt;/div&gt;</code>；</li><li><code>innerText</code>：内部文本，<code>content</code>；</li><li><code>outerText</code>：内部文本，<code>content</code>；</li></ul><p>上述四个属性不仅可以读取，还可以赋值。<code>outerText</code> 和 <code>innerText</code> 的区别在于 <code>outerText</code> 赋值时会把标签一起赋值掉，另外 <code>xxText</code> 赋值时HTML特殊字符会被转义。</p><h4 id="jQuery的html-与innerHTML的区别？"><a href="#jQuery的html-与innerHTML的区别？" class="headerlink" title="jQuery的html()与innerHTML的区别？"></a>jQuery的html()与innerHTML的区别？</h4><p>jQuery的 <code>.html()</code> 会调用<code>.innerHTML</code>来操作，但是会捕获异常，然后用 <code>.empty()</code>, <code>.append()</code> 重新操作。 这是因为IE8中有些元素的 <code>.innerHTML</code> 是只读的。见：<a href="http://stackoverflow.com/questions/3563107/jquery-html-vs-innerhtml" target="_blank" rel="noopener">http://stackoverflow.com/questions/3563107/jquery-html-vs-innerhtml</a></p><h4 id="Window-对象-与-document-对象"><a href="#Window-对象-与-document-对象" class="headerlink" title="Window 对象 与 document 对象"></a>Window 对象 与 document 对象</h4><h5 id="window"><a href="#window" class="headerlink" title="window"></a>window</h5><ul><li>Window 对象表示当前浏览器的窗口，是 JavaScript 的顶级对象。</li><li>我们创建的所有对象、函数、变量都是 Window 对象的成员。</li><li>Window 对象的方法和属性是在全局范围内有效的。</li></ul><h5 id="document"><a href="#document" class="headerlink" title="document"></a>document</h5><ul><li>Document 对象是 HTML 文档的根节点与所有其他节点（元素节点，文本节点，属性节点, 注释节点）</li><li>Document 对象使我们可以通过脚本对 HTML 页面中的所有元素进行访问</li><li>Document 对象是 Window 对象的一部分，即 window.document</li></ul><h4 id="客户区坐标、页面坐标、屏幕坐标区别"><a href="#客户区坐标、页面坐标、屏幕坐标区别" class="headerlink" title="客户区坐标、页面坐标、屏幕坐标区别"></a>客户区坐标、页面坐标、屏幕坐标区别</h4><p>客户区坐标：<strong>鼠标指针在可视区中</strong>的水平坐标(clientX)和垂直坐标(clientY)</p><p>页面坐标：<strong>鼠标指针在页面布局中</strong>的水平坐标(pageX)和垂直坐标(pageY)</p><p>屏幕坐标：<strong>设备物理屏幕的</strong>水平坐标(screenX)和垂直坐标(screenY)</p><h4 id="mouseover-mouseout-与-mouseenter-mouseleave-的区别与联系"><a href="#mouseover-mouseout-与-mouseenter-mouseleave-的区别与联系" class="headerlink" title="mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系"></a>mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系</h4><ol><li>mouseover/mouseout 是标准事件，<strong>所有浏览器都支持</strong>；mouseenter/mouseleave 是 IE5.5 引入的特有事件后来被 DOM3 标准采纳，现代标准浏览器也支持</li><li>mouseover/mouseout 是<strong>冒泡</strong>事件；mouseenter/mouseleave<strong>不冒泡</strong>。需要为<strong>多个元素监听鼠标移入/出事件时，推荐 mouseover/mouseout 托管，提高性能</strong></li><li>标准事件模型中 event.target 表示发生移入/出的元素,<strong>vent.relatedTarget</strong>对应移出/如元素；在老 IE 中 event.srcElement 表示发生移入/出的元素，<strong>event.toElement</strong>表示移出的目标元素，<strong>event.fromElement</strong>表示移入时的来源元素</li></ol><h4 id="focus-blur-与-focusin-focusout-的区别与联系"><a href="#focus-blur-与-focusin-focusout-的区别与联系" class="headerlink" title="focus/blur 与 focusin/focusout 的区别与联系"></a>focus/blur 与 focusin/focusout 的区别与联系</h4><ol><li>focus/blur 不冒泡，focusin/focusout 冒泡</li><li>focus/blur 兼容性好，focusin/focusout 在除 FireFox 外的浏览器下都保持良好兼容性，如需使用事件托管，可考虑在 FireFox 下使用事件捕获 elem.addEventListener(‘focus’, handler, true)</li></ol><h3 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h3><h4 id="DOM-事件模型"><a href="#DOM-事件模型" class="headerlink" title="DOM 事件模型"></a>DOM 事件模型</h4><p> 先捕获，再到目标，再冒泡 。捕获是事件会从最外层开始发生，直到最具体的元素。冒泡是事件会从最内层的元素开始发生，一直向上传播，直到window对象。</p><p><a href="https://github.com/huyaocode/webKnowledge/blob/master/img/dom事件模型.jpg" target="_blank" rel="noopener"><img src="https://github.com/huyaocode/webKnowledge/raw/master/img/dom%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B.jpg" alt="事件模型"></a></p><h4 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h4><p>DOM 标准采用捕获+冒泡。两种事件流都会触发 DOM 的所有对象，从 window 对象开始，也在 window 对象结束。</p><p>DOM 标准规定事件流包括三个阶段：事件捕获阶段；处于目标阶段；事件冒泡阶段。</p><h4 id="描述-DOM-事件捕获的具体流程"><a href="#描述-DOM-事件捕获的具体流程" class="headerlink" title="描述 DOM 事件捕获的具体流程"></a>描述 DOM 事件捕获的具体流程</h4><p>从 window -&gt; document -&gt; html -&gt; body -&gt; … -&gt; 目标元素</p><h4 id="Event-对象常见应用"><a href="#Event-对象常见应用" class="headerlink" title="Event 对象常见应用"></a>Event 对象常见应用</h4><table><thead><tr><th>event对象</th><th>描述</th></tr></thead><tbody><tr><td>event.target</td><td>触发事件的元素</td></tr><tr><td>event.currentTarget</td><td>绑定事件的元素</td></tr><tr><td>event.preventDefault()</td><td>阻止默认行为（event.cancelBubble()和 event.preventBubble 都已经废弃）</td></tr><tr><td>event.stopPropagation()</td><td>阻止在捕获阶段或冒泡阶段继续传播，而不是阻止冒泡</td></tr><tr><td>event.stopImmediatePropagation()</td><td>阻止事件冒泡并且阻止相同事件的其他侦听器被调用。</td></tr></tbody></table><h4 id="事件的代理-委托"><a href="#事件的代理-委托" class="headerlink" title="事件的代理/委托"></a>事件的代理/委托</h4><p>事件委托是指将事件绑定目标元素的到父元素上，利用冒泡机制触发该事件</p><p><em>优点</em>：</p><ul><li>可以减少事件注册，节省大量内存占用</li><li>可以将事件应用于动态添加的子元素上</li></ul><p>但使用不当会造成事件在不应该触发时触发</p><pre class=" language-js"><code class="language-js">ulEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">"click"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"LI"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><ul><li>Event</li><li>CustomEvent</li></ul><p>CustomEvent 不仅可以用来做自定义事件，还可以在后面跟一个 object 做参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> evt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"myEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someDom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"myEvent"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//处理这个自定义事件</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someDom<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="IE-的事件处理和-W3C-的事件处理有哪些区别？"><a href="#IE-的事件处理和-W3C-的事件处理有哪些区别？" class="headerlink" title="IE 的事件处理和 W3C 的事件处理有哪些区别？"></a>IE 的事件处理和 W3C 的事件处理有哪些区别？</h5><p>绑定事件</p><ul><li>W3C: targetEl.addEventListener(‘click’, handler, false);</li><li>IE: targetEl.attachEvent(‘onclick’, handler);</li></ul><p>删除事件</p><ul><li>W3C: targetEl.removeEventListener(‘click’, handler, false);</li><li>IE: targetEl.detachEvent(event, handler);</li></ul><p>事件对象</p><ul><li>W3C: var e = arguments.callee.caller.arguments[0]</li><li>IE: window.event</li></ul><p>事件目标</p><ul><li>W3C: e.target</li><li>IE: window.event.srcElement</li></ul><p>阻止事件默认行为</p><ul><li>W3C: e.preventDefault()</li><li>IE: window.event.returnValue = false’</li></ul><p>阻止事件传播</p><ul><li>W3C: e.stopPropagation()</li><li>IE: window.event.cancelBubble = true</li></ul><blockquote><p>参考：<a href="https://github.com/huyaocode/webKnowledge/blob/master/前端基础/JS/DOM.md" target="_blank" rel="noopener">https://github.com/huyaocode/webKnowledge/blob/master/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JS/DOM.md</a></p><p><a href="https://harttle.land/2015/10/01/javascript-dom-api.html" target="_blank" rel="noopener">https://harttle.land/2015/10/01/javascript-dom-api.html</a></p></blockquote><h2 id="BOM-与-DOM-的关系"><a href="#BOM-与-DOM-的关系" class="headerlink" title="BOM 与 DOM 的关系"></a>BOM 与 DOM 的关系</h2><ol><li>javacsript 是通过访问 BOM 对象来访问、 控制、 修改浏览器</li><li>BOM 的 window 包含了 document， 因此通过 window 对象的document 属性就可以访问、 检索、 修改文档内容与结构。</li><li>document 对象又是 DOM 模型的根节点。</li></ol><p>因此， <strong>BOM 包含了 DOM， 浏览器提供出来给予访问的是 BOM 对象， 从 BOM 对象再访 问到 DOM 对象</strong>， 从而 js 可以操作浏览器以及浏览器读取到的文档。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染机制</title>
      <link href="/2020/08/21/liu-lan-qi-xuan-ran-ji-zhi/"/>
      <url>/2020/08/21/liu-lan-qi-xuan-ran-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h4><p>不同的浏览器内核不同，渲染过程中有的细节也不一样，以<code>webkit</code>主流程为例：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ghxofb9nf2j30hc0813zc.jpg" alt="浏览器解析渲染机制"></p><h6 id="浏览器解析渲染页面大致过程："><a href="#浏览器解析渲染页面大致过程：" class="headerlink" title="浏览器解析渲染页面大致过程："></a>浏览器解析渲染页面大致过程：</h6><p>1、<code>DOM Tree</code>：浏览器向服务器发送<code>http</code>请求，服务器响应<code>http</code>请求并发送文档给浏览器，<strong>浏览器解析<code>HTML</code>构建<code>DOM</code>树。</strong></p><blockquote><p>其中HTML Parser就起到了将HTML标记解析成DOM Tree的作用，HTML Parser将文本的HTML文档，提炼出关键信息，嵌套层级的树形结构，便于计算拓展；这其中也有很多的规则和操作，比如容错机制，识别特殊标签<code>&lt;br&gt;&lt;/br&gt;</code>等</p></blockquote><p>2、<code>CSSOM</code>：<strong>浏览器解析<code>CSS</code>构建<code>CSSOM</code>树。</strong></p><blockquote><p>CSS Parser将很多个CSS文件中的样式合并解析出具有树形结构Style Rules，也叫做CSSOM</p><p>其中还有一个细节是浏览器解析文档：当遇到<code>&lt;script&gt;</code>标签的时候会停止解析文档，立即解析脚本，将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM Tree和CSSOM上</p></blockquote><p>3、<code>Render Tree</code>：<strong>把<code>DOM</code>树和<code>CSSOM</code>树组合构建渲染树<code>Rander Tree</code></strong>，有了渲染树，浏览器就知道网页上有哪些节点以及每个节点的<code>CSS</code>属性。</p><blockquote><p>Render Tree的构建其实就是DOM Tree和CSSOM Attach的过程，在webkit中，解析样式和创建呈现器的过程称为”附加”，每个DOM节点都有一个”attach”方法，Render Tree其实就相当于一个计算好样式，与HTML对应的Tree</p></blockquote><p>4、<code>Layout</code>：<strong>根据<code>Render</code>树进行布局渲染<code>render layer</code></strong>，计算每个节点的几何结构（也就是计算出每个节点在屏幕上的位置）。</p><blockquote><p>创建渲染树后，Layout根据根据渲染树中渲染对象的信息，计算好每一个渲染对象的位置和尺寸，将其放在浏览器窗口的正确位置，某些时候会在文档布局完成之后进行DOM修改，<strong>重新布局的过程就称为回流</strong></p></blockquote><p>5、<code>Painting</code>：将计算好的每个节点的布局信息绘制到屏幕上。</p><blockquote><p>绘制阶段则会遍历呈现树，并调用呈现器的paint方法，将呈现器的内容显示在屏幕上，绘制的顺序其实就是元素进入堆栈样式上下文的顺序，例如，块呈现器的堆栈顺序如下：1.背景颜色，2.背景图片，3.边框，4.子代，5.轮廓</p></blockquote><h4 id="重绘-Repaint-和回流-重排-Reflow"><a href="#重绘-Repaint-和回流-重排-Reflow" class="headerlink" title="重绘(Repaint)和回流/重排(Reflow)"></a>重绘(<code>Repaint</code>)和回流/重排(<code>Reflow</code>)</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>重绘：<strong>样式发生改变，位置没有发生变动</strong>，页面不需要重新计算一次，重绘一次即可。</p><p>回流：<strong>位置发生了变化影响了其他元素的位置</strong>，需要重新计算位置即回流/重排，之后重绘。</p><blockquote><p>重绘不一定回流，但回流必定重绘</p></blockquote><h5 id="重绘和回流的区别"><a href="#重绘和回流的区别" class="headerlink" title="重绘和回流的区别"></a>重绘和回流的区别</h5><ul><li>回流指当前窗口发生改变，发生滚动操作，或者元素的位置大小相关属性被更新时会触发布局过程，<strong>发生在render树</strong>，比如元素的几何尺寸变化，就需要重新验证并计算Render Tree</li><li>重绘指当前视觉样式属性被更新时触发的绘制过程，<strong>发生在渲染层render layer</strong></li><li>回流的成本比重绘高</li></ul><h5 id="重绘和回流的应用"><a href="#重绘和回流的应用" class="headerlink" title="重绘和回流的应用"></a>重绘和回流的应用</h5><h6 id="1、回流"><a href="#1、回流" class="headerlink" title="1、回流"></a>1、回流</h6><ul><li>增加、删除、更新<code>DOM</code>节点</li><li>通过<code>display: none</code>隐藏一个<code>DOM</code>节点（位置发生改变）</li><li>元素尺寸发生变化（如边距）</li><li>让一个<code>DOM</code>节点动画时</li><li>添加样式，让整个样式发生改变</li><li>改变窗口尺寸和滚动窗口</li><li><strong><code>计算offsetWidth、scrollTop、clientTop、getComputedStyle()等属性</code></strong>（获取这些属性的信息时需要返回新的布局信息，会强制队列刷新，触发回流）</li></ul><h6 id="2、重绘"><a href="#2、重绘" class="headerlink" title="2、重绘"></a>2、重绘</h6><ul><li>通过<code>visibility: hidden</code>隐藏一个节点需要重绘</li></ul><h5 id="减少回流重绘次数的方法"><a href="#减少回流重绘次数的方法" class="headerlink" title="减少回流重绘次数的方法"></a>减少回流重绘次数的方法</h5><ul><li>避免一条一条的修改DOM样式，而是修改className或者style.classText</li><li>对元素进行一个复杂的操作，可以先隐藏它，操作完成后在显示</li><li>在需要经常获取那些引起浏览器回流的属性值时，要缓存到变量中</li><li>不使用table布局，一个小的改动可能就会引起整个table重新布局</li><li>在内存中多次操作节点，完成后在添加到文档中</li></ul><h4 id="白屏"><a href="#白屏" class="headerlink" title="白屏"></a>白屏</h4><blockquote><p>页面没有加载完，就会出现白屏。</p></blockquote><ul><li>对IE来说，<strong>把样式放在底部时</strong>，在某些场景下（如打开新窗口／刷新页面等）页面会出现白屏，而不是内容逐步展现。</li><li>如果<strong>使用@import标签</strong>，即使将CSS写入外部样式表由link引入并放在头部，也可能出现白屏。</li><li>把<strong>js文件放入页面顶部而未使用defer或async延迟或异步加载js文件</strong>，从而阻塞html与css的加载也会导致白屏。</li></ul><h4 id="FOUC"><a href="#FOUC" class="headerlink" title="FOUC"></a>FOUC</h4><blockquote><p>(Flash of unsettled content)无样式内容闪烁。 页面出现FOUC现象，具体表现为逐步加载无样式的内容，等CSS加载完成后页面突然展现样式。</p></blockquote><p>把样式放在底部时，会先显示已加载的html内容，再逐步加载无样式内容，等css全部加载完成后页面突然展现样式。</p><h4 id="CSS-和-JS-最佳放置顺序"><a href="#CSS-和-JS-最佳放置顺序" class="headerlink" title="CSS 和 JS 最佳放置顺序"></a>CSS 和 JS 最佳放置顺序</h4><ul><li><strong>使用 link 标签</strong>将样式表放在顶部</li><li>将<strong>JS放在底部</strong></li></ul><h5 id="JS的阻塞问题"><a href="#JS的阻塞问题" class="headerlink" title="JS的阻塞问题"></a>JS的阻塞问题</h5><ul><li>JS会阻塞DOM树的解析和渲染</li><li>若JS位于页面顶部<ul><li>JS脚本会阻塞后面内容的呈现</li><li>JS脚本会阻塞其后组件（如图片）的下载</li><li>JS加载时间过长，css需等待，则会出现一段时间<strong>白屏</strong></li></ul></li></ul><h5 id="CSS的阻塞问题"><a href="#CSS的阻塞问题" class="headerlink" title="CSS的阻塞问题"></a>CSS的阻塞问题</h5><ul><li><strong>CSS会阻塞DOM树的渲染</strong> （渲染树是依赖于CSSOM和DOM的，必须要等到CSSOM构建完成才能开始渲染）</li><li><strong>CSS可能会阻塞DOM树的解析</strong>（若CSS阻塞JS语句，JS会阻塞DOM，则CSS可能阻塞DOM）</li><li><strong>CSS会阻塞其后面JS语句的执行</strong>（JS可能会用到DOM节点和CSS样式）</li><li><strong>是一种优化机制避免回流</strong></li></ul><h4 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"script.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>放在顶部的这个js文件，会提前加载，如何使它在顶部仍然稍后加载?</p><h5 id="async-（异步脚本）"><a href="#async-（异步脚本）" class="headerlink" title="async （异步脚本）"></a>async （异步脚本）</h5><blockquote><p>不让页面等待脚本下载和执行，从而异步加载页面其他内容（并行），异步脚本会在页面的load事件前执行。<strong>不保证顺序</strong>。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script <span class="token keyword">async</span> src<span class="token operator">=</span><span class="token string">"script.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="defer（延迟脚本）"><a href="#defer（延迟脚本）" class="headerlink" title="defer（延迟脚本）"></a>defer（延迟脚本）</h5><blockquote><p>js脚本会被延迟到整个页面都解析完成后再运行，会先于DOMContentLoaded事件执行。<strong>按顺序执行</strong>。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script defer src<span class="token operator">=</span><span class="token string">"script.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>作用</strong>：缩短了网页的加载时间，且他们的显示速度更快</p><h4 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h4><p>对于浏览器来说，页面加载主要有两个事件。<code>DOMContentLoaded、onLoad</code>。</p><h5 id="onLoad"><a href="#onLoad" class="headerlink" title="onLoad"></a>onLoad</h5><blockquote><p>等待页面所有<code>资源加载完成</code>才会触发。</p></blockquote><h5 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h5><blockquote><p>等页面<code>内容解析</code>完就触发。</p></blockquote><ul><li>若js在css前，则DOMContentLoaded不会等待css加载，也不会等待之后的图片、视频等其他资源加载。</li><li>若js在css后，CSS阻塞其后面的js语句执行，js阻塞DOM解析，就导致DOMContentLoaded会等待CSS加载完执行。</li></ul><blockquote><p>参考引用：</p><p><a href="https://juejin.im/post/6844903878949863432" target="_blank" rel="noopener">https://juejin.im/post/6844903878949863432</a></p><p><a href="https://github.com/okaychen/FE-Interview-Brochure/blob/master/html-and-css.md" target="_blank" rel="noopener">https://github.com/okaychen/FE-Interview-Brochure/blob/master/html-and-css.md</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端需要注意的小细节总结</title>
      <link href="/2020/08/20/qian-duan-xu-yao-zhu-yi-de-xiao-xi-jie-zong-jie/"/>
      <url>/2020/08/20/qian-duan-xu-yao-zhu-yi-de-xiao-xi-jie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1、知识点：javaScript的隐式类型转换"><a href="#1、知识点：javaScript的隐式类型转换" class="headerlink" title="1、知识点：javaScript的隐式类型转换"></a>1、知识点：<code>javaScript</code>的隐式类型转换</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 字符串的拼接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22</span><span class="token comment" spellcheck="true">// 数字相减</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 布尔值转数字 true = 1,false = 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h3 id="2、知识点：NaN"><a href="#2、知识点：NaN" class="headerlink" title="2、知识点：NaN"></a>2、知识点：<code>NaN</code></h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// NaN和所有值都不等，包括自身，判断一个值是否是NaN只能用isNaN()或者Number.isNaN()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h3 id="3、知识点：运算符，javaScript的隐式类型转换"><a href="#3、知识点：运算符，javaScript的隐式类型转换" class="headerlink" title="3、知识点：运算符，javaScript的隐式类型转换"></a>3、知识点：运算符，<code>javaScript</code>的隐式类型转换</h3><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">></span> <span class="token number">6</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>求<code>x</code>的值使下列等式同时为<code>true</code></p><pre class=" language-js"><code class="language-js">x <span class="token operator">*</span> x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>x <span class="token operator">+</span> x <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">/</span> x <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// x的值为：Number.MIN_VALUE</span></code></pre><p>解析：<code>Number.MIN_VALUE</code>是<code>javaScript</code>能表示的最小的整数，也是最接近0的值，因此前三条成立，但它又不是0，所以可以作为除数，等式4也成立。</p><h3 id="4、浮点数"><a href="#4、浮点数" class="headerlink" title="4、浮点数"></a>4、浮点数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// javaScript中的数字使用的是64位双精度浮点型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9999999999999999</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10000000000000000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9007199254740991</span></code></pre><p>解析：<code>javaScript</code>中有一个<code>Number_MAX_SAFE_INTEGER</code>，它的值为<code>2^53 - 1</code>，即<code>9007199254740991</code>，这个数的存在换算因为<code>js</code>使用64位双精度浮点型数，它能表示的区间仅仅为<code>-(2^53-1)~(2^53-1)</code>，超过这个区间的数就不“安全”了，表现在无法准确表示和比较这些数，比如<code>Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2</code>结果为<code>true</code>，可以通过<code>Number.isSafeInteger()</code>来判断一个数是否“安全”。</p><blockquote><p>当我们需要使用更大的数时可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener"><code>BigInt</code></a>  </p></blockquote><h3 id="5、知识点：javaScript的隐式类型转换"><a href="#5、知识点：javaScript的隐式类型转换" class="headerlink" title="5、知识点：javaScript的隐式类型转换"></a>5、知识点：<code>javaScript</code>的隐式类型转换</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 两边如果不都为数字则会将他们转化为字符串再拼接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1,2,34,5,6</span><span class="token comment" spellcheck="true">// 数组拼接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6]</span></code></pre><h3 id="6、知识点：作用域"><a href="#6、知识点：作用域" class="headerlink" title="6、知识点：作用域"></a>6、知识点：作用域</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错：Uncaught ReferenceError: a is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法二</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错：Uncaught ReferenceError: a is not defined</span></code></pre><p>解析：赋值表达式是从右往左执行，相当于<code>var a = (b = 100);</code>，则应该先执行<code>b = 100</code>，此时<code>b</code>就是一个全局变量，值为100，接着再让<code>var a = b</code>，此时会把100赋值给<code>a</code>，当执行<code>console.log(a)</code>时就会直接报错，因为<code>a</code>是局部变量。而如果先打印<code>b</code>，则会先输出100，然后报错。</p><blockquote><p>使用严格模式(‘use strict’)可以避免<code>b</code>这种意外全局变量的创建</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印：5 5 5 5 5</span></code></pre><p>解析：用<code>var</code>定义的变量的作用域是函数作用域，<code>setTimeout</code>函数会等<code>for</code>循环结束之后再执行，此时<code>i</code>变成了5，因此最后打印结果为5个5。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印：0 1 2 3 4</span></code></pre><h3 id="7、知识点：变量提升和函数提升（✨）"><a href="#7、知识点：变量提升和函数提升（✨）" class="headerlink" title="7、知识点：变量提升和函数提升（✨）"></a>7、知识点：变量提升和函数提升（✨）</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 变量提升</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// function</span></code></pre><p>解析：函数声明（<code>function fn() {}</code>）会存在函数提升的现象，函数表达式不会（<code>var fn = function(){}</code>），因此结果会打印<code>function</code>，<strong>函数提升的作用是可以在函数定义之前就进行函数调用</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 变量提升和函数提升</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span></code></pre><p>解析：函数声明和<code>var</code>定义的变量声明都存在被提升现象，但函数提升的优先级要高于变量提升，因此函数被提升到作用域最顶部，接下来是变量定义。</p><h6 id="补充：函数与变量的优先级（待完善✨）"><a href="#补充：函数与变量的优先级（待完善✨）" class="headerlink" title="补充：函数与变量的优先级（待完善✨）"></a>补充：函数与变量的优先级（待完善✨）</h6><p>函数声明和变量声明都会被提升。但是一个值得注意的是函数会首先被提升，然后才是变量。</p><pre class=" language-js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>代码执行结果会输出 1 而不是 2 ！这个代码片段会被引擎理解为如下形式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>注意，var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明，因为函数声明会被提升到普通变量之前。尽管重复的 var 声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。</p><pre class=" language-js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然我们通常不会在一个作用域内声明相同名称的变量，但是来看一下下面这种代码：</p><pre class=" language-js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "b"</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码执行完成以后会输出b，而且是永远输出b。因为一个普通块内部的函数声明通常会被提升到所在作用域的顶部，这个过程不会像上面的代码暗示的那样可以被条件判断所控制。</p><blockquote><p>参考：<br>无邪L：<a href="https://juejin.im/post/6844903743444500488" target="_blank" rel="noopener">https://juejin.im/post/6844903743444500488</a></p></blockquote><h3 id="8、箭头函数"><a href="#8、箭头函数" class="headerlink" title="8、箭头函数"></a>8、箭头函数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arguments<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: arguments is not defined</span></code></pre><p>解析：箭头函数没有自己的<code>this</code>和<code>arguments</code>，而是引用外层作用域中的，而全局没有定义<code>arguments</code>变量，因此报错。</p><blockquote><p>在箭头函数中如果要访问参数集，建议使用<code>(...args) =&gt; {}</code></p></blockquote><h3 id="9、返回值"><a href="#9、返回值" class="headerlink" title="9、返回值"></a>9、返回值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span>  <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>解析：在<code>javaScript</code>中，如果<code>return</code>和返回值之间存在换行符，则<code>return</code>后面会自动插入<code>;</code>，因此会打印出<code>undefined</code>。</p><blockquote><p>参考：</p><p><a href="https://segmentfault.com/a/1190000023350519" target="_blank" rel="noopener">https://segmentfault.com/a/1190000023350519</a></p></blockquote><h3 id="10、setTimeout0ms、1ms打印-✨"><a href="#10、setTimeout0ms、1ms打印-✨" class="headerlink" title="10、setTimeout0ms、1ms打印(✨)"></a>10、<code>setTimeout</code>0ms、1ms打印(✨)</h3><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印：有可能是'a','b'，也有可能是'b','a'</span></code></pre><ul><li>在<code>Node.js</code>中，0ms和1ms是等价的，因为0会被转化为1，所以在node中运行结果是<code>'a','b'</code>；<code>Chrome</code>和<code>node</code>结果一样</li><li><code>Firefox</code>中会打印<code>'b'.'a'</code></li></ul><h3 id="11、event-target和event-currentTarget的区别"><a href="#11、event-target和event-currentTarget的区别" class="headerlink" title="11、event.target和event.currentTarget的区别"></a>11、<code>event.target</code>和<code>event.currentTarget</code>的区别</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'target='</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'currentTarget='</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>输出结果：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ghwzw2nkrhj30xc04cwf9.jpg" alt="结果"></p><p>解析：<code>event.target</code> 是真正触发<code>event</code>的元素， <code>event.currentTarget</code>是绑定<code>event handler</code>的元素。</p><h3 id="12、立即执行函数-IIFE"><a href="#12、立即执行函数-IIFE" class="headerlink" title="12、立即执行函数(IIFE)"></a>12、立即执行函数(<code>IIFE</code>)</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Function statements require a function name</span></code></pre><p>解析：正确的语法应该是<code>(function() {})();</code></p><h3 id="13、javaScript对象和数组方法"><a href="#13、javaScript对象和数组方法" class="headerlink" title="13、javaScript对象和数组方法"></a>13、<code>javaScript</code>对象和数组方法</h3><p><strong>（1）数组<code>indexOf()</code>方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span></code></pre><p>解析：数组本质是一个<code>javaScript</code>对象，那就可以设置属性，即使数组的索引没有<code>-1</code>，但<code>-1</code>还可以作为对象的<code>key</code>存在，所以可以设置<code>arr[-1] = -1</code>；然后<code>arr.indexOf()</code>方法索要查找的值如果不存在则返回<code>-1</code>，因此相当于打印<code>arr[-1]</code>。</p><p><strong>（2）数组<code>sort()</code>方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 数字转换成字符串比较排序</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 12, 132, 14, 22]</span><span class="token comment" spellcheck="true">// 实际数字比较大小排序</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 升序  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 降序</span></code></pre><p>解析：<code>sort()</code>方法默认把元素转换成字符串，再比较UTF-16编码的单元值序列进行升序排列。</p><h3 id="14、原型链"><a href="#14、原型链" class="headerlink" title="14、原型链"></a>14、原型链</h3><p>原型链的顶层是<code>null</code>。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ghx2s5np0xj30vm0f8ads.jpg" alt="原型链数据"></p><p>一般认为原型链顶层是<code>Object.protptype</code>，但<code>Object.protptype</code>还是有<code>__proto__</code>内部属性，</p><p>而<code>Object.protptype.__proto__</code>等于<code>null</code>。</p><h5 id="15、阻止给一个对象设置属性（✨）"><a href="#15、阻止给一个对象设置属性（✨）" class="headerlink" title="15、阻止给一个对象设置属性（✨）"></a>15、阻止给一个对象设置属性（✨）</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法：让obj.a = 1无效</span><span class="token number">1</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>解析：</p><ul><li><code>Object.freeze()</code>  最严格，会完全禁止对象做任何修改，包括：增加新属性，修改已有属性、修改其原型</li><li><code>Object.seal()</code>宽松一点，允许修改<code>writable</code>的属性，但不允许新增和删除属性，且已有属性都会被标记为不可配置的</li><li><code>Object.preventExtensions()</code> 更加宽松，可以阻止对象新增属性和修改其<code>__proto__</code></li><li><code>Object.defineProperty()</code> 将属性定义为不可写，因此无法给属性设置新的值（<code>writable</code>默认为<code>false</code>，可以省略）</li></ul><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000023350519" target="_blank" rel="noopener">https://segmentfault.com/a/1190000023350519</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js能力测评</title>
      <link href="/2020/08/18/js-neng-li-ce-ping/"/>
      <url>/2020/08/18/js-neng-li-ce-ping/</url>
      
        <content type="html"><![CDATA[<p>以下所有的js测评均来自牛客网，练习自己的js编码能力。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="查找数组元素位置"><a href="#查找数组元素位置" class="headerlink" title="查找数组元素位置"></a><a href="https://www.nowcoder.com/practice/e7835a8113dd48afb15f77ef8d1dcb1d?tpId=6&amp;&amp;tqId=10949&amp;rp=1&amp;ru=/ta/js-assessment&amp;qru=/ta/js-assessment/question-ranking" target="_blank" rel="noopener">查找数组元素位置</a></h2><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>找出元素 item 在给定数组 arr 中的位置，如果数组中存在 item，则返回元素在数组中的位置，否则返回 -1</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">2</span></code></pre><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a><a href="https://www.nowcoder.com/practice/cc3ce199461c4c4cb8f63db61d7eba30?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">数组求和</a></h2><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>计算给定数组 arr 中所有元素的总和。（输入数组中的元素均为 Number 类型）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">10</span></code></pre><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="移除数组中的元素"><a href="#移除数组中的元素" class="headerlink" title="移除数组中的元素"></a><a href="https://www.nowcoder.com/practice/edbc7496a36e433c89d298b9256af856?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">移除数组中的元素</a></h2><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>移除数组 arr 中的所有值与 item 相等的元素。<strong>不要直接修改数组 arr，结果返回新的数组</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 返回符合条件的数组，x为数组中遍历的元素</span>      <span class="token comment" spellcheck="true">// filter() 方法创建一个新的数组</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">!==</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="移除数组中的元素-1"><a href="#移除数组中的元素-1" class="headerlink" title="移除数组中的元素"></a><a href="https://www.nowcoder.com/practice/a93dd26ebb8c425d844acc17bcce9411?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">移除数组中的元素</a></h2><h5 id="题目描述-✨"><a href="#题目描述-✨" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>移除数组 arr 中的所有值与 item 相等的元素，<strong>直接在给定的 arr 数组上进行操作，并将结果返回</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// splice(index, 删除个数, 插入的元素)会改变原数组</span><span class="token keyword">function</span> <span class="token function">removeWithoutCopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a><a href="https://www.nowcoder.com/practice/3c7905cea3264ddaac4bf637ab3a19f9?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">添加元素</a></h2><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>在数组 arr 末尾添加元素 item。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一：初始化一个新的数组，先将arr数组中的元素添加到新数组中，然后在新数组末尾添加新元素item</span><span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// push()会改变原数组</span>    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二：slice(start, end)返回从start到end（不包括end）的元素，返回一个新数组</span><span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="删除数组最后一个元素"><a href="#删除数组最后一个元素" class="headerlink" title="删除数组最后一个元素"></a><a href="https://www.nowcoder.com/practice/df4b0b7a459447538351c4c7008b34e7?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">删除数组最后一个元素</a></h2><h5 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h5><p>删除数组 arr 最后一个元素。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    newArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a><a href="https://www.nowcoder.com/practice/93994cb28b1c4ec5ad7da4f9c33ebfbe?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">添加元素</a></h2><h5 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h5><p>在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// unshift()数组开头增加一个或多个元素，会改变原数组</span><span class="token keyword">function</span> <span class="token function">prepend</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// forEach()</span><span class="token keyword">function</span> <span class="token function">prepend</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    newArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// concat()连接两个或多个数组，返回新数组</span><span class="token keyword">function</span> <span class="token function">prepend</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 扩展运算符</span><span class="token keyword">function</span> <span class="token function">prepend</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// map()使用，返回新数组</span><span class="token keyword">function</span> <span class="token function">prepend</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    newArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="删除数组第一个元素"><a href="#删除数组第一个元素" class="headerlink" title="删除数组第一个元素"></a><a href="https://www.nowcoder.com/practice/0323822699da497b8822898e90025882?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">删除数组第一个元素</a></h2><h5 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h5><p>删除数组 arr 第一个元素。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curtail</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">curtail</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 不同种方法同上一题</span></code></pre><h2 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a><a href="https://www.nowcoder.com/practice/ba9ee11affbd44539a4104d7f098f06b?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">数组合并</a></h2><h5 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h5><p>合并数组 arr1 和数组 arr2。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// concat()连接两个或多个数组，返回新数组</span><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="添加元素-2"><a href="#添加元素-2" class="headerlink" title="添加元素"></a><a href="https://www.nowcoder.com/practice/941bcfa5b87940869fda681c1597fd3a?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">添加元素</a></h2><h5 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h5><p><strong>在数组 arr 的 index 处添加元素 item</strong>。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a><a href="https://www.nowcoder.com/practice/628339bd8e6e440590ad86caa7ac6849?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">计数</a></h2><h5 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h5><p>统计数组 arr 中值等于 item 的元素出现的次数</p><pre class=" language-JS"><code class="language-JS">// 输入[1, 2, 4, 4, 3, 4, 3], 4// 输出3</code></pre><h5 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="查找重复元素"><a href="#查找重复元素" class="headerlink" title="查找重复元素"></a><a href="https://www.nowcoder.com/practice/871a468deecf453589ea261835d6b78b?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找重复元素</a></h2><h5 id="题目描述-✨-1"><a href="#题目描述-✨-1" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>找出数组 arr 中重复出现过的元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-11"><a href="#代码：-11" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。 所以for in更适合遍历对象，不要使用for in遍历数组</span><span class="token keyword">function</span> <span class="token function">duplicates</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">?</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">duplicates</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="求二次方"><a href="#求二次方" class="headerlink" title="求二次方"></a><a href="https://www.nowcoder.com/practice/b7a8647e33d84f5c88acdd7c81a85fdf?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">求二次方</a></h2><h5 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h5><p>为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-12"><a href="#代码：-12" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> val <span class="token operator">*</span> val<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="查找元素位置"><a href="#查找元素位置" class="headerlink" title="查找元素位置"></a><a href="https://www.nowcoder.com/practice/0a9af9cb20c34babb6232126e019c74d?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">查找元素位置</a></h2><h5 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h5><p>在数组 arr 中，查找值与 item 相等的元素出现的所有位置</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token string">'a'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-13"><a href="#代码：-13" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">findAllOccurrences</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        val <span class="token operator">==</span> target <span class="token operator">?</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">findAllOccurrences</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="避免全局变量"><a href="#避免全局变量" class="headerlink" title="避免全局变量"></a><a href="https://www.nowcoder.com/practice/e362110c727347048f350bd90af31c62?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">避免全局变量</a></h2><h5 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定的 js 代码中存在全局变量，请修复</p><h5 id="代码：-14"><a href="#代码：-14" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">'Jory'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> myObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="正确的函数定义"><a href="#正确的函数定义" class="headerlink" title="正确的函数定义"></a><a href="https://www.nowcoder.com/practice/a5de760a7cf24c0e890eb02eed34bc02?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">正确的函数定义</a></h2><h5 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h5><p>请修复给定的 js 代码中，函数定义存在的问题</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//输入</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">// 输出</span>a</code></pre><h5 id="代码：-15"><a href="#代码：-15" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">functions</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'b'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">functions</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      getValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">'a'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      getValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">'b'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="正确使用parseInt"><a href="#正确使用parseInt" class="headerlink" title="正确使用parseInt"></a><a href="https://www.nowcoder.com/practice/a14f83473c384abba1bb51017d0dbd42?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">正确使用parseInt</a></h2><h5 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h5><p>修改 js 代码中 parseInt 的调用方式，使之通过全部测试用例</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'12'</span>   <span class="token string">'12px'</span>    <span class="token string">'0x12'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">12</span>    <span class="token number">12</span>    <span class="token number">0</span></code></pre><p>代码：</p><pre class=" language-JS"><code class="language-JS">// parseInt(string, radix)   将一个字符串 string 转换为 radix 进制的整数， radix 为介于2-36之间的数。function parse2Int(num) {    return parseInt(num, 10);}</code></pre><h2 id="完全等同"><a href="#完全等同" class="headerlink" title="完全等同"></a><a href="https://www.nowcoder.com/practice/1d7e4611cea64950aa3a10caf2529c92?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">完全等同</a></h2><h5 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h5><p>判断 val1 和 val2 是否完全等同</p><h5 id="代码：-16"><a href="#代码：-16" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val1 <span class="token operator">===</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简化版</span><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val1 <span class="token operator">===</span> val2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a><a href="https://www.nowcoder.com/practice/72c661d926494bd8a50608506915268c?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">计时器</a></h2><h5 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h5><p>实现一个打点计时器，要求<br>1、从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1<br>2、返回的对象中需要包含一个 cancel 方法，用于停止定时操作<br>3、第一个数需要立即输出</p><h5 id="代码：-17"><a href="#代码：-17" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一个数需要立即输出</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回的对象中需要包含一个 cancel 方法，用于停止定时操作</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        cancel<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        cancel<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a><a href="https://www.nowcoder.com/practice/8a7bff7ab0d345d5ac5c82e41d9f7115?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">流程控制</a></h2><h5 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h5><p>实现 fizzBuzz 函数，参数 num 与返回值的关系如下：<br>1、如果 num 能同时被 3 和 5 整除，返回字符串 fizzbuzz<br>2、如果 num 能被 3 整除，返回字符串 fizz<br>3、如果 num 能被 5 整除，返回字符串 buzz<br>4、如果参数为空或者不是 Number 类型，返回 false<br>5、其余情况，返回参数 num</p><pre class=" language-JS"><code class="language-JS">// 输入15// 输出fizzbuzz</code></pre><h5 id="代码：-18"><a href="#代码：-18" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'fizzbuzz'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'fizz'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'buzz'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> num <span class="token operator">!=</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>num <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'fizz'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'buzz'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str <span class="token operator">||</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a><a href="https://www.nowcoder.com/practice/80365a2685144559817e3d5e0c27f3a8?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">函数传参</a></h2><h5 id="题目描述（✨）"><a href="#题目描述（✨）" class="headerlink" title="题目描述（✨）"></a>题目描述（✨）</h5><p>将数组 arr 中的元素作为调用函数 fn 的参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">function</span> <span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> name<span class="token punctuation">,</span> punctuation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> greeting <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token punctuation">(</span>punctuation <span class="token operator">||</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'Ellie'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span>Hello<span class="token punctuation">,</span> Ellie<span class="token operator">!</span></code></pre><h5 id="代码：-19"><a href="#代码：-19" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">argsAsArray</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ？</span><span class="token keyword">function</span> <span class="token function">argsAsArray</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a><a href="https://www.nowcoder.com/practice/5e97b94794bd438f893137b2d3b28a6a?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">函数上下文</a></h2><h5 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h5><p>将函数 fn 的执行上下文改为 obj 对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'!!!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>greeting<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Rebecca'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span>Hello<span class="token punctuation">,</span> Rebecca<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span></code></pre><h5 id="代码：-20"><a href="#代码：-20" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a><a href="https://www.nowcoder.com/practice/1f9fd23cdfd14675ab10207191e1d035?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">返回函数</a></h2><h5 id="题目描述（✨）-1"><a href="#题目描述（✨）-1" class="headerlink" title="题目描述（✨）"></a>题目描述（✨）</h5><p>实现函数 functionFunction，调用之后满足如下条件：<br>1、返回值为一个函数 f<br>2、调用返回的函数 f，返回值为按照调用顺序的参数拼接，拼接字符为英文逗号加一个空格，即 ‘, ‘<br>3、所有函数的参数数量为 1，且均为 String 类型</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token function">functionFunction</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span>Hello<span class="token punctuation">,</span> world</code></pre><h2 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a><a href="https://www.nowcoder.com/practice/578026cd24e3446bbf27fe565473dc26?tpId=6&amp;&amp;tqId=10972&amp;rp=1&amp;ru=/ta/js-assessment&amp;qru=/ta/js-assessment/question-ranking" target="_blank" rel="noopener">使用闭包</a></h2><h5 id="题目描述-✨-2"><a href="#题目描述-✨-2" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>实现函数 makeClosures，调用之后满足如下条件：<br>1、返回一个函数数组 result，长度与 arr 相同<br>2、运行 result 中第 i 个函数，即 <code>result[i]()</code>，结果与 <code>fn(arr[i])</code> 相同</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入 </span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">4</span></code></pre><h5 id="代码：-21"><a href="#代码：-21" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ?</span><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二次封装函数"><a href="#二次封装函数" class="headerlink" title="二次封装函数"></a><a href="https://www.nowcoder.com/practice/fb2d46b99947455a897f2e9fe2268355?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">二次封装函数</a></h2><h5 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h5><p>已知函数 fn 执行需要 3 个参数。请实现函数 partial，调用之后满足如下条件：<br>1、返回一个函数 result，该函数接受一个参数<br>2、执行 result(str3) ，返回的结果与 fn(str1, str2, str3) 一致</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">var</span> sayIt <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> name<span class="token punctuation">,</span> punctuation<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> greeting <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token punctuation">(</span>punctuation <span class="token operator">||</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">partial</span><span class="token punctuation">(</span>sayIt<span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'Ellie'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出</span>Hello<span class="token punctuation">,</span> Ellie<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span></code></pre><h5 id="代码：-22"><a href="#代码：-22" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用arguments"><a href="#使用arguments" class="headerlink" title="使用arguments"></a><a href="https://www.nowcoder.com/practice/df84fa320cbe49d3b4a17516974b1136?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">使用<code>arguments</code></a></h2><h5 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h5><p>函数 useArguments 可以接收 1 个及以上的参数。请实现函数 useArguments，返回所有调用参数相加后的结果。本题的测试参数全部为 Number 类型，不需考虑参数转换。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">10</span></code></pre><h5 id="代码：-23"><a href="#代码：-23" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">useArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">useArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用apply调用函数"><a href="#使用apply调用函数" class="headerlink" title="使用apply调用函数"></a><a href="https://www.nowcoder.com/practice/d47b482e7148497582c7a995df51f393?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">使用<code>apply</code>调用函数</a></h2><h5 id="题目描述-✨-3"><a href="#题目描述-✨-3" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>实现函数 callIt，调用之后满足如下条件<br>1、返回的结果为调用 fn 之后的结果<br>2、fn 的调用参数为 callIt 的第一个参数之后的全部参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">callIt</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">callIt</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法三</span><span class="token keyword">function</span> <span class="token function">callIt</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//将arguments转化为数组后，截取第一个元素之后的所有元素</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二次封装函数-1"><a href="#二次封装函数-1" class="headerlink" title="二次封装函数"></a><a href="https://www.nowcoder.com/practice/694afeb930f74392bda01a815219d81b?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">二次封装函数</a></h2><h5 id="题目描述（✨）-2"><a href="#题目描述（✨）-2" class="headerlink" title="题目描述（✨）"></a>题目描述（✨）</h5><p>实现函数 partialUsingArguments，调用之后满足如下条件：<br>1、返回一个函数 result<br>2、调用 result 之后，返回的结果与调用函数 fn 的结果一致<br>3、fn 的调用参数为 partialUsingArguments 的第一个参数之后的全部参数以及 result 的调用参数</p><h5 id="代码：-24"><a href="#代码：-24" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">partialUsingArguments</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span>bind<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a><a href="https://www.nowcoder.com/practice/bb78d69986794470969674a8b504ac00?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">柯里化</a></h2><h5 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h5><p>已知 fn 为一个预定义函数，实现函数 curryIt，调用之后满足如下条件：<br>1、返回一个函数 a，a 的 length 属性值为 1（即显式声明 a 接收一个参数）<br>2、调用 a 之后，返回一个函数 b, b 的 length 属性值为 1<br>3、调用 b 之后，返回一个函数 c, c 的 length 属性值为 1<br>4、调用 c 之后，返回的结果与调用 fn 的返回值一致<br>5、fn 的参数依次为函数 a, b, c 的调用参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">curryIt</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">6</span></code></pre><h5 id="代码：-25"><a href="#代码：-25" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curryIt</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a><a href="https://www.nowcoder.com/practice/77f1e6e2f54044d0ad47ab14e3711489?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">或运算</a></h2><h5 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h5><p>返回参数 a 和 b 的逻辑或运算结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// 输出</span><span class="token boolean">true</span></code></pre><h5 id="代码：-26"><a href="#代码：-26" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">or</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="且运算"><a href="#且运算" class="headerlink" title="且运算"></a><a href="https://www.nowcoder.com/practice/608780935ae44babb9785485bb650a76?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">且运算</a></h2><h5 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h5><p>返回参数 a 和 b 的逻辑且运算结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// 输出</span><span class="token boolean">false</span></code></pre><h5 id="代码：-27"><a href="#代码：-27" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">and</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a href="https://www.nowcoder.com/practice/48e53feaabe94506a61300edadb5496d?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">模块</a></h2><h5 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h5><p>完成函数 createModule，调用之后满足如下要求：<br>1、返回一个对象<br>2、对象的 greeting 属性值等于 str1， name 属性值等于 str2<br>3、对象存在一个 sayIt 方法，该方法返回的字符串为 greeting属性值 + ‘, ‘ + name属性值</p><h5 id="代码：-28"><a href="#代码：-28" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createModule</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        greeting<span class="token punctuation">:</span> str1<span class="token punctuation">,</span>        name<span class="token punctuation">:</span> str2<span class="token punctuation">,</span>        sayIt<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">}</span></code></pre><h2 id="二进制转换1"><a href="#二进制转换1" class="headerlink" title="二进制转换1"></a><a href="https://www.nowcoder.com/practice/2c7f25d532aa4e20b67af9d3c93dc65f?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">二进制转换1</a></h2><h5 id="题目描述-✨-4"><a href="#题目描述-✨-4" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>获取数字 num 二进制形式第 bit 位的值。注意：<br>1、bit 从 1 开始<br>2、返回 0 或 1<br>3、举例：2 的二进制为 10，第 1 位为 0，第 2 位为 1</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">1</span></code></pre><h5 id="代码：-29"><a href="#代码：-29" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// parseInt(string, radix) 将一个字符串string 转换为radix 进制的整数</span><span class="token keyword">function</span> <span class="token function">valueAtBit</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> bit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 为啥子？</span>    <span class="token keyword">return</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span>length <span class="token operator">-</span> bit<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二进制转换2"><a href="#二进制转换2" class="headerlink" title="二进制转换2"></a><a href="https://www.nowcoder.com/practice/4123561150114d119ba41f28219a454f?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">二进制转换2</a></h2><h5 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定二进制字符串，将其换算成对应的十进制数字</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'11000000'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">192</span></code></pre><h5 id="代码：-30"><a href="#代码：-30" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 直接使用parseInt函数</span><span class="token keyword">function</span> <span class="token function">base10</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">base10</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 先将字符串进行分割转化为数组，然后对其进行反转，然后二进制转换为十进制，使用pow函数</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二进制转换3"><a href="#二进制转换3" class="headerlink" title="二进制转换3"></a><a href="https://www.nowcoder.com/practice/7b74386695cc48349af37196f45e62a8?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">二进制转换3</a></h2><h5 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h5><p>将给定数字转换成二进制字符串。如果字符串长度不足 8 位，则在前面补 0 到满8位。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token number">65</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">01000001</span></code></pre><h5 id="代码：-31"><a href="#代码：-31" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">convertToBinary</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">convertToBinary</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'00000000'</span> <span class="token operator">+</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a><a href="https://www.nowcoder.com/practice/6429776e4630435cbc3eeb36bdf41f83?tpId=6&amp;&amp;tqId=10984&amp;rp=1&amp;ru=/ta/js-assessment&amp;qru=/ta/js-assessment/question-ranking" target="_blank" rel="noopener">乘法</a></h2><h5 id="题目描述-✨-5"><a href="#题目描述-✨-5" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>求 a 和 b 相乘的值，a 和 b 可能是小数，需要注意结果的精度问题</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0.0001</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">0.0003</span></code></pre><h5 id="代码：-32"><a href="#代码：-32" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> lenA <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lenB <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> lenA<span class="token punctuation">.</span>length <span class="token operator">+</span> lenB<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="改变上下文"><a href="#改变上下文" class="headerlink" title="改变上下文"></a><a href="https://www.nowcoder.com/practice/dfcc28bf243642b795eaf5a2a621acc5?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">改变上下文</a></h2><h5 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h5><p>将函数 fn 的执行上下文改为 obj，返回 fn 执行后的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token function">alterContext</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Rebecca'</span><span class="token punctuation">,</span> greeting<span class="token punctuation">:</span> <span class="token string">'Yo'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span>Yo<span class="token punctuation">,</span> Rebecca<span class="token operator">!</span></code></pre><h5 id="代码：-33"><a href="#代码：-33" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">alterContext</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">alterContext</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">alterContext</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="批量改变对象的属性"><a href="#批量改变对象的属性" class="headerlink" title="批量改变对象的属性"></a><a href="https://www.nowcoder.com/practice/4f7d25a30eb1463cbf1daac39ec04f8d?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">批量改变对象的属性</a></h2><h5 id="题目描述-✨-6"><a href="#题目描述-✨-6" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>给定一个构造函数 constructor，请完成 alterObjects 方法，将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">var</span> C <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token string">'Rebecca'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alterObjects</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> <span class="token string">'What\'s up'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> obj1<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出</span>What's up</code></pre><h5 id="代码：-34"><a href="#代码：-34" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">alterObjects</span><span class="token punctuation">(</span>constructor<span class="token punctuation">,</span> greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="属性遍历"><a href="#属性遍历" class="headerlink" title="属性遍历"></a><a href="https://www.nowcoder.com/practice/0158a4f165154f2eaf27d1907aa55e57?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">属性遍历</a></h2><h5 id="题目描述-✨-7"><a href="#题目描述-✨-7" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>找出对象 obj 不在原型链上的属性(注意这题测试例子的冒号后面也有一个空格~)<br>1、返回数组，格式为 key: value<br>2、结果数组不要求顺序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">var</span> C <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">'bim'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> C<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bop <span class="token operator">=</span> <span class="token string">'bip'</span><span class="token punctuation">;</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token string">"foo: bar"</span><span class="token punctuation">,</span> <span class="token string">"baz: bim"</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-35"><a href="#代码：-35" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">iterate</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">iterate</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">iterate</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="判断是否包含数字"><a href="#判断是否包含数字" class="headerlink" title="判断是否包含数字"></a><a href="https://www.nowcoder.com/practice/0fcb4eb9306d4bec837d0037fe39bcf7?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">判断是否包含数字</a></h2><h5 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定字符串 str，检查其是否包含数字，包含返回 true，否则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'abc123'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token boolean">true</span></code></pre><h5 id="代码：-36"><a href="#代码：-36" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">containsNumber</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="检查重复字符串"><a href="#检查重复字符串" class="headerlink" title="检查重复字符串"></a><a href="https://www.nowcoder.com/practice/5ef31f11adf64d9fb18d74860e9ab873?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">检查重复字符串</a></h2><h5 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 true，否则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'rattler'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token boolean">true</span></code></pre><h5 id="代码：-37"><a href="#代码：-37" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">containsRepeatingLetter</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/([A-z])\1/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="判断是否以元音字母结尾"><a href="#判断是否以元音字母结尾" class="headerlink" title="判断是否以元音字母结尾"></a><a href="https://www.nowcoder.com/practice/c141ec7458f244a1ba1bb334c71e0f27?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">判断是否以元音字母结尾</a></h2><h5 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定字符串 str，检查其是否以元音字母结尾<br>1、元音字母包括 a，e，i，o，u，以及对应的大写<br>2、包含返回 true，否则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'gorilla'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token boolean">true</span></code></pre><h5 id="代码：-38"><a href="#代码：-38" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">endsWithVowel</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/[a,e,i,o,u,A,E,I,O,U]$/g</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">endsWithVowel</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/[a,e,i,o,u]$/i</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="获取指定字符串"><a href="#获取指定字符串" class="headerlink" title="获取指定字符串"></a><a href="https://www.nowcoder.com/practice/4ec56ad04a9a4402a01e50a390a8060a?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">获取指定字符串</a></h2><h5 id="题目描述-✨-8"><a href="#题目描述-✨-8" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>给定字符串 str，检查其是否包含 连续3个数字<br>1、如果包含，返回最先出现的 3 个数字的字符串<br>2、如果不包含，返回 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">captureThreeNumbers</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d{3}/</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="判断是否符合指定格式"><a href="#判断是否符合指定格式" class="headerlink" title="判断是否符合指定格式"></a><a href="https://www.nowcoder.com/practice/eb86f08c478749868a01861f5ddad28b?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">判断是否符合指定格式</a></h2><h5 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定字符串 str，检查其是否符合如下格式<br>1、XXX-XXX-XXXX<br>2、其中 X 为 Number 类型</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'800-555-1212'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token boolean">true</span></code></pre><h5 id="代码：-39"><a href="#代码：-39" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">matchesPattern</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token regex">/^\d{3}-\d{3}-\d{4}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="判断是否符合USD格式"><a href="#判断是否符合USD格式" class="headerlink" title="判断是否符合USD格式"></a><a href="https://www.nowcoder.com/practice/667dd00250d04d06989ed1b69102c9ab?tpId=6&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">判断是否符合USD格式</a></h2><h5 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定字符串 str，检查其是否符合美元书写格式<br>1、以 <code>$</code>开始<br>2、整数部分，从个位起，满 3 个数字用 , 分隔<br>3、如果为小数，则小数部分长度为 2<br>4、正确的格式如：<code>$</code>1,023,032.03 或者 ​<code>$</code>2.03，错误的格式如：<code>$</code>3,432,12.12 或者 <code>$</code>34,344.3</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isUSD</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// *匹配前一个表达式 0 次或多次</span>    <span class="token keyword">return</span> <span class="token regex">/^(\$)([0-9]{1,3})(,[0-9]{3})*(\.(([1-9][0-9])||([0][1-9])))?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端大挑战</title>
      <link href="/2020/08/16/qian-duan-da-tiao-zhan/"/>
      <url>/2020/08/16/qian-duan-da-tiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="前端大挑战"><a href="#前端大挑战" class="headerlink" title="前端大挑战"></a>前端大挑战</h1><h2 id="修改this指向"><a href="#修改this指向" class="headerlink" title="修改this指向"></a><a href="https://www.nowcoder.com/practice/a616b3de81b948fda9a92db7e86bd171?tpId=2&amp;&amp;tqId=10851&amp;rp=1&amp;ru=/ta/front-end&amp;qru=/ta/front-end/question-ranking" target="_blank" rel="noopener">修改this指向</a></h2><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>封装函数 f，使 f 的 this 指向指定的对象</p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一种</span><span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> oTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第二种</span><span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> oTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第三种</span><span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> oTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">,</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="获取-url-中的参数"><a href="#获取-url-中的参数" class="headerlink" title="获取 url 中的参数"></a><a href="https://www.nowcoder.com/practice/a3ded747e3884a3c86d09d88d1652e10?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">获取 url 中的参数</a></h2><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><ol><li>指定参数名称，返回该参数的值 或者 空字符串</li><li>不指定参数名称，返回全部的参数对象 或者 {}</li><li>如果存在多个同名参数，则返回数组</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>nowcoder<span class="token punctuation">.</span>com<span class="token operator">?</span>key<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>key<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>key<span class="token operator">=</span><span class="token number">3</span><span class="token operator">&amp;</span>test<span class="token operator">=</span><span class="token number">4</span>#hehe key<span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>给定一个url为<code>http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe key</code>，首先根据<code>#</code>截取字符串url的前半部分，即``<a href="http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4`，然后再通过`?`截取`url`参数，即`key=1&amp;key=2&amp;key=3`，接着分情况讨论：" target="_blank" rel="noopener">http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4`，然后再通过`?`截取`url`参数，即`key=1&amp;key=2&amp;key=3`，接着分情况讨论：</a></p><ul><li><p>当指定参数名称时，首先对上边处理获得的参数字符串通过<code>&amp;</code>进行分割，得到一个字符串数组，如<code>["key=1", "key=2", "key=3"]</code>，对该字符串数组进行遍历，先对遍历到的当前字符串通过<code>=</code>进行分割，得到的结果记为<code>tmp</code>，判断该字符串是否与指定的参数名称相等，如果相同，则将其添加到数组中。遍历结束之后，如果数组长度为2，则直接返回值，如果长度为0，则直接返回空字符串。</p></li><li><p>当不指定参数时，大致流程同上，最后通过判断返回全部的参数对象 或者 {}</p><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span>sUrl<span class="token punctuation">,</span> sKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> param <span class="token operator">=</span> sUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sKey<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//指定参数名称</span>        <span class="token keyword">var</span> strs <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> arrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果存在多个同名参数，则返回数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> tmp <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> sKey<span class="token punctuation">)</span><span class="token punctuation">{</span>                arrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回该参数的值或者空字符串</span>            <span class="token keyword">return</span> arrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arrs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arrs<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不指定参数名称，返回全部的参数对象 或者 {}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>param <span class="token operator">==</span> undefined <span class="token operator">||</span> param <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> strs <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> arrObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> tmp <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> arrObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arrObj<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arrObj<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>            <span class="token keyword">return</span> arrObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="dom节点查找"><a href="#dom节点查找" class="headerlink" title="dom节点查找"></a><a href="https://www.nowcoder.com/practice/74d74be449af4c66907fe2d6961c255c?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener"><code>dom</code>节点查找</a></h2><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>查找两个节点的最近的一个共同父节点，可以包括节点自身。</p><h5 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h5><pre><code>oNode1 和 oNode2 在同一文档中，且不会为相同的节点</code></pre><h5 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">commonParentNode</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">,</span> oNode2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>oNode1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oNode2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> oNode1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        oNode1 <span class="token operator">=</span> oNode1<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">commonParentNode</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">,</span> oNode2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> oNode1<span class="token punctuation">;</span> oNode1 <span class="token operator">=</span> oNode1<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oNode2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> oNode1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="根据包名，在指定空间中创建对象"><a href="#根据包名，在指定空间中创建对象" class="headerlink" title="根据包名，在指定空间中创建对象"></a><a href="https://www.nowcoder.com/practice/a82e035501504cedbe881d08c824a381?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">根据包名，在指定空间中创建对象</a></h2><h5 id="题目描述-✨"><a href="#题目描述-✨" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>根据包名，在指定空间中创建对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'a.b.c.d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span>d<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">namespace</span><span class="token punctuation">(</span>oNamespace<span class="token punctuation">,</span> sPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> sPackage<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保留对原始对象的引用</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> oNamespace<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 空间名在对象中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> oNamespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oNamespace<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将此属性设为空对象</span>                oNamespace<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 空间名不在对象中，建立此空间名属性，赋值为空</span>                oNamespace<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将指针指向下一个空间名属性</span>        oNamespace <span class="token operator">=</span> oNamespace<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">namespace</span><span class="token punctuation">(</span>oNamespace<span class="token punctuation">,</span> sPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sPackage<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oNamespace<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            oNamespace<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        oNamespace <span class="token operator">=</span> oNamespace<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a><a href="https://www.nowcoder.com/practice/0b5ae9c4a8c546f79e2547c0179bfdc2?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">数组去重</a></h2><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>为 Array 对象添加一个去除重复项的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span></code></pre><h5 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniq <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniq <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断NaN</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><a href="https://www.nowcoder.com/practice/aa8ffe28ec7c4050b2aa8bc9d26710e9?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">斐波那契数列</a></h2><h5 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h5><p>用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="时间格式化输出"><a href="#时间格式化输出" class="headerlink" title="时间格式化输出"></a><a href="https://www.nowcoder.com/practice/a789783e7c984f10a0bf649f6d4e2d59?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">时间格式化输出</a></h2><h5 id="题目描述-✨-1"><a href="#题目描述-✨-1" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><blockquote><p>按所给的时间格式输出指定的时间<br>格式说明<br>对于 2014.09.05 13:14:20<br>yyyy: 年份，2014<br>yy: 年份，14<br>MM: 月份，补满两位，09<br>M: 月份, 9<br>dd: 日期，补满两位，05<br>d: 日期, 5<br>HH: 24制小时，补满两位，13<br>H: 24制小时，13<br>hh: 12制小时，补满两位，01<br>h: 12制小时，1<br>mm: 分钟，补满两位，14<br>m: 分钟，14<br>ss: 秒，补满两位，20<br>s: 秒，20<br>w: 星期，为 [‘日’, ‘一’, ‘二’, ‘三’, ‘四’, ‘五’, ‘六’] 中的某一个，本 demo 结果为 五</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1409894060000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'yyyy-MM-dd HH:mm:ss 星期w'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">2014</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">20</span> 星期五</code></pre><h5 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        yyyy<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        yy<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        M<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>        MM<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        dd<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        H<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        HH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        h<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">,</span>        hh<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        m<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        mm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        s<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ss<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        w<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'日'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'二'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">,</span> <span class="token string">'五'</span><span class="token punctuation">,</span> <span class="token string">'六'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// + 匹配任何包含至少一个 n 的字符串</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> obj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a><a href="https://www.nowcoder.com/practice/e436bbc408744b73b69a8925fac26efc?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">获取字符串的长度</a></h2><h5 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h5><p>如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1，否则如果字符 Unicode 编码 &gt; 255 则长度为 2</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'hello world, 牛客'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 输出</span><span class="token number">17</span></code></pre><h5 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">strLength</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> bUnicode255For1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bUnicode255For1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法一简化版</span><span class="token keyword">function</span> <span class="token function">strLength</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> bUnicode255For1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bUnicode255For1 <span class="token operator">?</span> s<span class="token punctuation">.</span>length <span class="token punctuation">:</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="邮箱字符串判断"><a href="#邮箱字符串判断" class="headerlink" title="邮箱字符串判断"></a><a href="https://www.nowcoder.com/practice/c72b2b5472704d4a98597cb74b0257a7?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">邮箱字符串判断</a></h2><h5 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h5><p>判断输入是否是正确的邮箱格式，返回布尔值</p><h5 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">isAvailableEmail</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^([A-z0-9_\-\.])+\@([A-z0-9_\-\.])+\.([A-z]{2,4})$/</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">isAvailableEmail</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^([\w+\.])+@(\w+)([.]\w+)+$/</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="将字符串转化为驼峰格式"><a href="#将字符串转化为驼峰格式" class="headerlink" title="将字符串转化为驼峰格式"></a><a href="https://www.nowcoder.com/practice/2ded24e34ec34325a62d42d0c8479bae?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">将字符串转化为驼峰格式</a></h2><h5 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h5><p>css 中经常有类似 background-image 这种通过 - 连接的字符，通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，请完成此转换功能</p><ol><li>以 - 为分隔符，将第二个起的非空单词首字母转为大写</li><li>-webkit-border-image 转换后的结果为 webkitBorderImage</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'font-size'</span><span class="token comment" spellcheck="true">// 输出</span>fontSize</code></pre><h5 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cssStyle2DomStyle</span><span class="token punctuation">(</span>sName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> sName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> char <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> char <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="字符串字符统计"><a href="#字符串字符统计" class="headerlink" title="字符串字符统计"></a><a href="https://www.nowcoder.com/practice/777d0cd160de485cae0b1fd1dd973b44?tpId=2&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1" target="_blank" rel="noopener">字符串字符统计</a></h2><h5 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h5><p>统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率</p><ol><li>不限制 key 的顺序</li><li>输入的字符串参数不会为空</li><li>忽略空白字符</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'hello world'</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">{</span>h<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> o<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h5 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 代替空白字符</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            obj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历非空白字符</span>    str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\S/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">?</span> obj<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="颜色字符串转换"><a href="#颜色字符串转换" class="headerlink" title="颜色字符串转换"></a><a href="https://www.nowcoder.com/practice/80b08802a833419f9c4ccc6e042c1cca?tpId=2&amp;&amp;tqId=10860&amp;rp=1&amp;ru=/ta/front-end&amp;qru=/ta/front-end/question-ranking" target="_blank" rel="noopener">颜色字符串转换</a></h2><h5 id="题目描述-✨-2"><a href="#题目描述-✨-2" class="headerlink" title="题目描述(✨)"></a>题目描述(✨)</h5><p>将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff</p><ol><li>rgb 中每个 , 后面的空格数量不固定</li><li>十六进制表达式使用六位小写字母</li><li>如果输入不符合 rgb 格式，返回原始输入</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 输入</span><span class="token string">'rgb(255, 255, 255)'</span><span class="token comment" spellcheck="true">// 输出</span>#ffffff</code></pre><h5 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">rgb2hex</span><span class="token punctuation">(</span>sRGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> sRGB<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^rgb\((\d+)\s*\,\s*(\d+)\s*\,\s*(\d+)\)$/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">'#'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">hex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">16</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax篇</title>
      <link href="/2020/08/15/ajax-pian/"/>
      <url>/2020/08/15/ajax-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>同步：必须等待前面的任务完成，才能继续后面的任务。</p></li><li><p>异步：不受当前任务的影响。</p></li></ul><h3 id="异步更新网站"><a href="#异步更新网站" class="headerlink" title="异步更新网站"></a>异步更新网站</h3><p>我们在访问一个普通的网站时，当浏览器加载完<code>HTML、CSS、JS</code>以后，网站的内容就固定了。如果想让网站内容发生更改，就必须<strong>刷新</strong>页面才能够看到更新的内容。</p><p>可如果用到<strong>异步更新</strong>，情况就大为改观了。比如，我们在访问新浪微博时，看到一大半了，点击底部的<strong>加载更多</strong>，会自动帮我们加载更多的微博，同时<strong>页面并没有刷新</strong>。</p><p>试想一下，如果没有异步刷新的话，每次点击“加载更多”，网页都要刷新，体验就太不好了。</p><p><code>web</code>前端里的异步更新，就要用到 <code>Ajax</code>。</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a><code>Ajax</code></h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><code>Ajax</code>（<code>Asynchronous Javascript And XML</code>：异步 <code>JavaScript</code>和 <code>XML</code>）。它是对于现有技术的结合。<strong><code>Ajax</code>的核心是 <code>js</code>对象</strong>：<strong><code>XMLHttpRequest</code></strong>。也就是使用 <code>XMLHttpRequest</code>对象与服务器通信。 它可以使用 <code>JSON，XML，HTML</code> 和 <code>text</code> 文本等格式发送和接收数据。</p><p>在浏览器中，我们可以在不刷新页面的情况下，通过<code>ajax</code>的方式与服务器通信，交换数据，或更新页面，去获取一些新的内容。</p><h3 id="XMLHttpRequest对象详解"><a href="#XMLHttpRequest对象详解" class="headerlink" title="XMLHttpRequest对象详解"></a><code>XMLHttpRequest</code>对象详解</h3><h4 id="创建异步对象"><a href="#创建异步对象" class="headerlink" title="创建异步对象"></a>创建异步对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Mozilla, Safari, IE7+ ...</span>  hr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// IE 6 and older</span>  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>发送请求的方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// method：请求的类型；GET 或 POST;url：文件在服务器上的位置;async：true（异步）或 false（同步）</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a><code>GET</code>请求</h4><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'请求的url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a><code>POST</code>请求</h4><p>如果想让 像<code>form</code> 表单提交数据那样使用<code>POST</code>请求，就需要使用 <code>XMLHttpRequest</code>对象的 <code>setRequestHeader()</code>方法 来添加 <code>HTTP</code>头。然后在 <code>send()</code> 方法中添加想要发送的数据：</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'请求的url'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-wwww-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'name=tom&amp;age=18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a><code>onreadystatechange</code> 事件</h3><p>注册 <code>onreadystatechange</code> 事件后，每当 <code>readyState</code>属性改变时，就会调用 <code>onreadystatechange</code> 函数。</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Process the server response here.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="readyState状态"><a href="#readyState状态" class="headerlink" title="readyState状态"></a><code>readyState</code>状态</h5><ul><li><p>0: 请求未初始化</p></li><li><p>1: 服务器连接已建立</p></li><li><p>2: 请求已接收</p></li><li><p>3: 请求处理中</p></li><li><p>4: 请求已完成，且响应已就绪</p></li></ul><h5 id="status状态"><a href="#status状态" class="headerlink" title="status状态"></a><code>status</code>状态</h5><ul><li><p>200: “OK”。</p></li><li><p>404: 未找到页面。</p></li></ul><p>在 <code>onreadystatechange</code> 事件中，<strong>当 <code>readyState</code> 等于 4，且状态码为200时，表示响应已就绪</strong>。</p><h4 id="服务器响应的内容"><a href="#服务器响应的内容" class="headerlink" title="服务器响应的内容"></a>服务器响应的内容</h4><ul><li><p><code>responseText</code>：获得字符串形式的响应数据。</p></li><li><p><code>responseXML</code>：获得 <code>XML</code> 形式的响应数据。</p></li></ul><p>如果响应的是普通字符串，就使用<code>responseText</code>；如果响应的是<code>XML</code>，使用<code>responseXML</code>。</p><h3 id="发送-Ajax-请求的五个步骤"><a href="#发送-Ajax-请求的五个步骤" class="headerlink" title="发送 Ajax 请求的五个步骤"></a>发送 Ajax 请求的五个步骤</h3><p>（1）创建异步对象。即 <code>XMLHttpRequest</code>对象。</p><p>（2）使用<code>open</code>方法设置请求的参数。<code>open(method, url, async)</code>（请求的方法、请求的url、是否异步）。</p><p>（3）发送请求。</p><p>（4）注册事件。 注册<code>onreadystatechange</code>事件，状态改变时就会调用。如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。</p><p>（5）获取返回的数据。</p><h4 id="Ajax-请求实例"><a href="#Ajax-请求实例" class="headerlink" title="Ajax 请求实例"></a><code>Ajax</code> 请求实例</h4><h5 id="GET请求示例"><a href="#GET请求示例" class="headerlink" title="GET请求示例"></a><code>GET</code>请求示例</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Ajax的get请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>发送get请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送get请求<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAjax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"getAjax"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 发送ajax请求</span>            <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'请求的url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'数据返回成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="POST请求示例"><a href="#POST请求示例" class="headerlink" title="POST请求示例"></a><code>POST</code>请求示例</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Ajax的Post请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>发送post请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送Post请求<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postAjax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'请求的url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果想要使用post提交数据,必须添加此行</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-wwww-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数据通过send方法传递</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'name=tom&amp;age=18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="Ajax-传输-JSON"><a href="#Ajax-传输-JSON" class="headerlink" title="Ajax 传输 JSON"></a><code>Ajax</code> 传输 <code>JSON</code></h3><h4 id="JSON的语法"><a href="#JSON的语法" class="headerlink" title="JSON的语法"></a><code>JSON</code>的语法</h4><p><code>JSON(JavaScript Object Notation)</code>：是<code>ECMAScript</code>的子集。作用是<strong>进行数据的交换</strong>。语法更为简洁，网络传输、机器解析都更为迅速。</p><h5 id="语法规则："><a href="#语法规则：" class="headerlink" title="语法规则："></a>语法规则：</h5><ul><li><p>数据在键值对中</p></li><li><p>数据由逗号分隔</p></li><li><p>花括号保存对象</p></li><li><p>方括号保存数组</p></li></ul><h5 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h5><ul><li><p>数字（整数或浮点数）</p></li><li><p>字符串（在双引号中）</p></li><li><p>逻辑值（true 或 false）</p></li><li><p>数组（在方括号中）</p></li><li><p>对象（在花括号中）</p></li><li><p>null</p></li></ul><p>示例：</p><pre class=" language-json"><code class="language-json">// 对象<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"fox"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token string">"18"</span><span class="token punctuation">,</span>  <span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token property">"car"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">}</span>// 数组<span class="token punctuation">[</span>  <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"小小胡"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span><span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"小二胡"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span><span class="token string">"2"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="json-字符串-与-js-对象转换"><a href="#json-字符串-与-js-对象转换" class="headerlink" title="json 字符串 与 js 对象转换"></a>json 字符串 与 js 对象转换</h4><p>基本所有的语言都有<strong>将 json 字符串转化为该语言对象</strong>的语法。</p><h5 id="JS中的转换"><a href="#JS中的转换" class="headerlink" title="JS中的转换"></a><code>JS</code>中的转换</h5><p><code>JSON.parse()</code>：将<code>JSON</code>字符串转化为 <code>js</code> 对象。例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> jsObj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>JSON.stringify()</code>：将 <code>JS</code> 对象转化为<code>JSON</code>字符串。例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 js 对象格式化为 JSON 字符串</span>    <span class="token keyword">var</span> jsonStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>Obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="PHP中的转换"><a href="#PHP中的转换" class="headerlink" title="PHP中的转换"></a><code>PHP</code>中的转换</h5><ul><li><p><code>json_decode()</code>方法：将<code>json</code>字符串转化为变量。</p></li><li><p><code>json_encode()</code>方法：将变量转化为<code>json</code>字符串。</p></li></ul><h4 id="jQuery中的-Ajax"><a href="#jQuery中的-Ajax" class="headerlink" title="jQuery中的 Ajax"></a><code>jQuery</code>中的 <code>Ajax</code></h4><p><code>JQuery</code>作为最受欢迎的<code>JS</code>框架之一，常见的<code>Ajax</code>已经帮助我们封装好了，只需要调用即可。更为详细的api文档可以查阅：<a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">w3cSchool_JQueryAjax</a></p><p>格式：</p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'请求地址'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token string">'name=tom&amp;age=16'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 请求成功执行的方法</span>            success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 在发送请求之前调用，可以做一些验证之类的处理</span>            beforeSend<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// 请求失败调用</span>            error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Ajax-与-cookie"><a href="#Ajax-与-cookie" class="headerlink" title="Ajax 与 cookie"></a>Ajax 与 cookie</h3><ul><li>ajax 会自动带上同源的 cookie，不会带上不同源的 cookie</li><li>可以通过前端设置 withCredentials 为 true， 后端设置 Header 的方式让 ajax 自动带上不同源的 cookie，但是这个属性对同源请求没有任何影响。会被自动忽略。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials" target="_blank" rel="noopener">withCredentials | MDN</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://example.com/"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Ajax函数封装"><a href="#Ajax函数封装" class="headerlink" title="Ajax函数封装"></a>Ajax函数封装</h2><p>此部分把ajax发送HTTP的常用请求进行封装，方便调用，减少代码冗余，解耦合，在编写项目时可以作为工具类使用。</p><h4 id="请求封装"><a href="#请求封装" class="headerlink" title="请求封装"></a>请求封装</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get请求封装</span>        <span class="token keyword">function</span> <span class="token function">getAjax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>                url <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// post请求封装</span>        <span class="token keyword">function</span> <span class="token function">postAjax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// get和post一起封装</span>        <span class="token comment" spellcheck="true">/*            参数1:url            参数2:数据            参数3:请求的方法            参数4:数据成功获取以后，调用的方法        */</span>        <span class="token keyword">function</span> <span class="token function">ajaxTool</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> method<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果忽略大小写呢</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>                    url <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>                xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application-x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get请求</span><span class="token keyword">var</span> resData <span class="token operator">=</span> <span class="token function">ajaxTool</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// post请求</span><span class="token keyword">var</span> resData <span class="token operator">=</span> <span class="token function">ajaxTool</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="同源和跨域"><a href="#同源和跨域" class="headerlink" title="同源和跨域"></a>同源和跨域</h2><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p>同源策略是浏览器的一种安全策略，所谓同源是指<strong>域名，协议，端口完全相同</strong>。</p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>从我们自己的网站访问别人网站的内容，就叫跨域。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ghozvbow3wj30jj09egos.jpg" alt="跨域"></p><p>出于安全性考虑，浏览器不允许ajax跨域获取数据。</p><ul><li><p><code>iframe</code>：出于安全性考虑，浏览器的开发厂商已经禁止了这种方式。</p></li><li><p><code>JSONP</code>：<code>script</code>标签的 <code>src</code>属性传递数据。</p></li></ul><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><code>JSONP</code></h4><p><code>JSONP(JSON with Padding)</code>：带补丁的 <code>json</code>，本质是利用了 <code>&lt;script src=""&gt;&lt;/script&gt;</code>标签具有可跨域的特性，由服务端返回一个预先定义好的JS函数的调用，并且将服务器数据以该函数参数的形式传递过来。此方法需要前后端配合完成。</p><p>html标签的 src 属性是支持跨域的：</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xxx.com/xxx.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p><code>jsonp</code>就是利用这个特性实现的跨域，但用的是 <code>script</code> 标签。如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- jsonp 就是 利用 src，实现的跨域 用的是 script标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://192.168.141.137/2018-02-28/myData.php<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上述代码的意思是：刷新A服务器上的<code>index</code>页面后，会去请求 B 服务器上的 <code>myData.php</code> 这个页面。而且请求的方式是<code>get</code> 请求。但是 B 服务器上的页面不是你想请求就可以请求的，大家一起配合才可以。</p><p><strong>具体实现步骤：</strong></p><p>需要首先声明的是，<strong><code>jsonp</code>只能通过 <code>GET</code> 方式进行请求</strong>。</p><p>（1）A客户端的代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 定义 fn() 方法</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我被调用了哦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用 script标签 发送了 get请求 去到了一个 php页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://192.168.141.137/01.php?callback1<span class="token punctuation">=</span>fn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们来分析上方代码中的最后一行的那个url：A 客户端请求的是 B服务器上的 <code>01.php</code>页面。url里有个<code>callback1=fn</code>，意思是：callback1是A和B 之间的约定，约定后，将执行方法 fn。</p><p>其实，fn方法已经在最后一行代码中执行了。只不过，fn方法里的data数据，是从 B 服务器中获取的。</p><p>（2）B服务器端的代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$mycallBack</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'callback1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"zhaoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$mycallBack</span><span class="token punctuation">.</span>`<span class="token punctuation">(</span>`<span class="token punctuation">.</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span>`<span class="token punctuation">)</span>`<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串拼接</span><span class="token delimiter">?></span></code></pre><p>代码解释：</p><p>第一行的<code>callback1</code> 是A和B之间的约定，二者必须一致。</p><p>echo语句中输出的内容，即使要返回给A客户端的内容，此内容会保存在 A 客户端的fn方法的data里。 data[0]指的是 zhangsan。</p><p><code>json_encode</code>指的是，将php对象转化为 json。</p><p>刷新A页面，输出结果为：</p><pre><code>    mycallBack(["zhangsan","lisi","zhaoliu"])</code></pre><h4 id="jQuery-中的-JSONP"><a href="#jQuery-中的-JSONP" class="headerlink" title="jQuery 中的 JSONP"></a>jQuery 中的 JSONP</h4><p>jQuery 中发送 Ajax 请求，格式是：</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"./data.php?callback1=fn"</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span><span class="token string">"jsonp"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//jsonp:"callback1",   //传递给B服务器的回调函数的名字（默认为 callback）</span>                <span class="token comment" spellcheck="true">//jsonCallBack:"fn"    //自定义的函数名称。默认为 jQuery 自动生成的随机函数名</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//$("#showInfo").html(data);</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那如果数据是 JSONP，上方代码则改为：</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"./data.php?fn"</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//$("#showInfo").html(data);</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js篇</title>
      <link href="/2020/08/13/node-js-pian/"/>
      <url>/2020/08/13/node-js-pian/</url>
      
        <content type="html"><![CDATA[<p>Node 的重要性已经不言而喻，很多互联网公司都已经有大量的高性能系统运行在 Node 之上。Node 凭借其单线程、异步等举措实现了极高的性能基准。此外，目前最为流行的 Web 开发模式是前后端分离的形式，即前端开发者与后端开发者在自己喜欢的 IDE 上独立进行开发，然后通过 HTTP 或是 RPC 等方式实现数据与流程的交互。这种开发模式在 Node 的强大功能的引领下变得越来越高效，也越来越受到各个互联网公司的青睐。</p><h2 id="什么是-Node-js"><a href="#什么是-Node-js" class="headerlink" title="什么是 Node.js"></a>什么是 Node.js</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> 是一个基于 <strong>Chrome V8 引擎</strong>的 JavaScript 运行环境。Node.js 使用了一个<strong>事件驱动</strong>、<strong>非阻塞式 I/O</strong>的模型，使其轻量又高效。<strong>Node.js 的包管理工具 npm 是全球最大的开源库生态系统</strong>。</p><p>Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的Web服务器 ，<strong>Node.js 是 JavaScript 在服务器端的运行环境（平台）</strong>。</p><h2 id="Node-js-的组成"><a href="#Node-js-的组成" class="headerlink" title="Node.js 的组成"></a>Node.js 的组成</h2><p>在 Node.js 里运行 JavaScript，跟在 Chrome 里运行 JavaScript 有什么不同？</p><p>二者采用的是同样的 JS 引擎。在 Node.js 里写 JS，和在前端写 JS，几乎没有不同。在写法上的区别在于：Node.js 没有浏览器、页面标签相关的 API，但是新增了一些 Node.js 相关的 API。通俗来说，对于开发者而言，在前端写 JS 是用于控制浏览器；而 Node.js 环境写 JS 可以控制整个计算机。</p><p>我们知道，JavaScript 的组成分为三个部分：</p><ul><li><p>ECMAScript</p></li><li><p>DOM：标签元素相关的API</p></li><li><p>BOM：浏览器相关的API</p></li></ul><p>ECMAScript 是 JS 的语法；DOM 和 BOM 浏览器端为 JS 提供的 API。</p><p>而 Node.js 的组成分为：</p><ul><li><p><strong>ECMAScript</strong>。ECMAScript 的所有语法在 Node 环境中都可以使用。</p></li><li><p><strong>Node 环境</strong>提供的一些<strong>附加 API</strong>(包括文件、网络等相关的 API)。</p></li></ul><p>如下图所示：</p><p><img src="http://img.smyhvae.com/20200409_1545.png" alt=""></p><h2 id="Node-js-的架构和依赖"><a href="#Node-js-的架构和依赖" class="headerlink" title="Node.js 的架构和依赖"></a>Node.js 的架构和依赖</h2><p>Node.js 的架构如下：</p><p><img src="http://img.smyhvae.com/20180301_1540.png" alt=""></p><p>Node.js 内部采用 Google Chrome 的 V8 引擎，作为 JavaScript 语言解释器；同时结合自行开发的 libuv 库，<strong>扩展了 JS 在后端的能力（比如 I/O 操作、文件读写、数据库操作等）</strong>。使得 JS 既可以在前端进行 DOM 操作（浏览器前端），又可以在后端调用操作系统资源，是目前最简单的全栈式语言。</p><p>其次，Node 生态系统活跃，提供了大量的开源库，使得 JavaScript 语言能与操作系统进行更多的交互。</p><h3 id="Node-js-运行环境的核心：V8-引擎-和-libuv-库"><a href="#Node-js-运行环境的核心：V8-引擎-和-libuv-库" class="headerlink" title="Node.js 运行环境的核心：V8 引擎 和 libuv 库"></a>Node.js 运行环境的核心：V8 引擎 和 libuv 库</h3><p>Node.js 是 JavaScript 在服务器端的运行环境，在这个意义上，Node.js 的地位其实就是 JavaScript 在服务器端的虚拟机，类似于 Java 语言中的 Java 虚拟机。</p><ul><li><p><a href="https://v8.dev/" target="_blank" rel="noopener">V8 引擎</a> ：编译和执行 JS 代码、管理内存、垃圾回收。V8 给 JS 提供了运行环境，可以说是 JS 的虚拟机。V8 引擎本身是用 C++ 写的。</p></li><li><p><a href="https://zh.wikipedia.org/wiki/Libuv" target="_blank" rel="noopener">libuv</a>： libuv 是一个专注于异步 I/O 的跨平台类库，目前主要在 Node.js 上使用。它是 Node.js 最初的作者 Ryan Dahl 为 Node.js 写的底层类库，也可以称之为虚拟机。libuv 本身是用 C 写的。</p></li></ul><h3 id="V8-的内存限制"><a href="#V8-的内存限制" class="headerlink" title="V8 的内存限制"></a>V8 的内存限制</h3><p>在一般的后端开发语言中，在基本的内存使用上没有什么限制，然而在 Node 中通过 JavaScript 使用内存时就会发现只能使用部分内存（64 位系统下约为 1.4GB，32 位系统下约为 0.7GB）。在这样的限制下，将会导致 Node 无法直接操作大内存对象。</p><p>造成这个问题的主要原因在于 Node 基于 V8 构建，所以在 Node 中使用的 JavaScript 对象基本上都是通过 V8 自己的方式来进行分配和管理的。V8 的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，足以胜任前端页面中的所有需求。但在 Node 中，这却限制了开发者随心所欲使用大内存的想法。</p><h2 id="Node-js-的特点"><a href="#Node-js-的特点" class="headerlink" title="Node.js 的特点"></a>Node.js 的特点</h2><ul><li><p>异步、非阻塞 IO 模型</p></li><li><p>事件循环</p></li><li><p>单线程</p></li></ul><p>Node.js 的性能和效率非常高。</p><p>传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个线程。而 Node.js 则完全没有采用这种模型，它本质上就是一个单线程。</p><p>你可能会疑问：一个线程如何服务于大量的请求、如何处理高并发的呢？这是因为，Node.js 采用的是异步的、非阻塞的模型。</p><p>这里所谓的“单线程”，指的是 Node 的主线程只有一个。为了确保主线程不被阻塞，主线程是用于接收客户端请求。但不会处理具体的任务。而 Node 的背后还有一个线程池，线程池会处理长时间运行的任务（比如 IO 操作、网络操作）。线程池里的任务是通过队列和事件循环的机制来执行。</p><h2 id="使用-Node-js-时的劣势"><a href="#使用-Node-js-时的劣势" class="headerlink" title="使用 Node.js 时的劣势"></a>使用 Node.js 时的劣势</h2><ul><li><p>程序运行不稳定，可能会出现服务不可用的情况</p></li><li><p>程序运行效率较低，每秒的请求数维持在一个较低的水平</p></li><li><p>前端同学对服务器端的技术不太熟悉。</p></li></ul><h2 id="模块化的理解"><a href="#模块化的理解" class="headerlink" title="模块化的理解"></a>模块化的理解</h2><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p><strong>概念</strong>：将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并组合在一起。</p><p>模块的内部数据、实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。</p><p>最早的时候，我们会把所有的代码都写在一个js文件里，那么，耦合性会很高（关联性强），不利于维护；而且会造成全局污染，很容易命名冲突。</p><h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><ul><li><p>避免命名冲突，减少命名空间污染</p></li><li><p>降低耦合性；更好地分离、按需加载</p></li><li><p><strong>高复用性</strong>：代码方便重用，别人开发的模块直接拿过来就可以使用，不需要重复开发类似的功能。</p></li><li><p><strong>高可维护性</strong>：软件的声明周期中最长的阶段其实并不是开发阶段，而是维护阶段，需求变更比较频繁。使用模块化的开发，方式更容易维护。</p></li><li><p>部署方便</p></li></ul><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><h3 id="模块化规范的引入"><a href="#模块化规范的引入" class="headerlink" title="模块化规范的引入"></a>模块化规范的引入</h3><p>假设我们引入模块化，首先可能会想到的思路是：在一个文件中引入多个js文件。如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zepto.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fastClick.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>util/login.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>util/base.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>util/city.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>但是这样做会带来很多问题：</p><ul><li><p>请求过多：引入十个js文件，就有十次http请求。</p></li><li><p>依赖模糊：不同的js文件可能会相互依赖，如果改其中的一个文件，另外一个文件可能会报错。</p></li></ul><p>以上两点，最终导致：<strong>难以维护</strong>。</p><p>于是，这就引入了模块化规范。</p><h3 id="模块化的概念解读"><a href="#模块化的概念解读" class="headerlink" title="模块化的概念解读"></a>模块化的概念解读</h3><p>模块化起源于 Node.js。Node.js 中把很多 js 打包成 package，需要的时候直接通过 require 的方式进行调用（CommonJS），这就是模块化的方式。</p><p>那如何把这种模块化思维应用到前端来呢？这就产生了两种伟大的 js：RequireJS 和 SeaJS。</p><h3 id="模块化规范-1"><a href="#模块化规范-1" class="headerlink" title="模块化规范"></a>模块化规范</h3><h5 id="服务器端规范："><a href="#服务器端规范：" class="headerlink" title="服务器端规范："></a>服务器端规范：</h5><ul><li><a href="http://www.commonjs.org/" target="_blank" rel="noopener"><strong>CommonJS规范</strong></a>：是 Node.js 使用的模块化规范。</li></ul><p><strong>CommonJS 就是一套约定标准，不是技术</strong>。用于约定我们的代码应该是怎样的一种结构。</p><h5 id="浏览器端规范："><a href="#浏览器端规范：" class="headerlink" title="浏览器端规范："></a>浏览器端规范：</h5><ul><li><a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="noopener"><strong>AMD规范</strong></a>：是 <strong><a href="http://requirejs.org/" target="_blank" rel="noopener">RequireJS</a></strong> 在推广过程中对模块化定义的规范化产出。</li></ul><pre><code>- 异步加载模块；- 依赖前置、提前执行：require([`foo`,`bar`],function(foo,bar){});   //也就是说把所有的包都 require 成功，再继续执行代码。- define 定义模块：define([`require`,`foo`],function(){return});</code></pre><ul><li><strong><a href="">CMD规范</a></strong>：是 <strong><a href="http://seajs.org/">SeaJS</a></strong> 在推广过程中对模块化定义的规范化产出。淘宝团队开发。</li></ul><pre><code>  同步加载模块；  依赖就近，延迟执行：require(./a) 直接引入。或者Require.async 异步引入。   //依赖就近：执行到这一部分的时候，再去加载对应的文件。  define 定义模块， export 导出：define(function(require, export, module){});</code></pre><p>PS：面试时，经常会问AMD 和 CMD 的区别。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2020/08/09/han-shu/"/>
      <url>/2020/08/09/han-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>持续更新……</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>函数就是将一些功能或语句进行<strong>封装</strong>，在需要的时候进行调用。在 JavaScript中，每个函数其实都是一个<code>Function</code>对象。因为它们可以像任何其他<strong>对象</strong>一样具有属性和方法。它们与其他对象的区别在于函数可以被调用。</p><blockquote><p>在使用<code>typeof</code>检查一个函数时，会返回<code>function</code></p></blockquote><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>简化编程，高内聚、低耦合</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果一个函数中没有使用return语句，则它默认返回<code>undefined</code>。要想返回一个特定的值，则函数必须使用 <code>return</code> 语句来指定一个要返回的值。</p><blockquote><p>使用<a href="https://developer.mozilla.org/zh-cn/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">new</a>关键字调用一个<a href="https://developer.mozilla.org/zh-cn/JavaScript/Reference/Global_Objects/Object/constructor" target="_blank" rel="noopener">构造函数</a>除外</p></blockquote><h5 id="实参和形参（值传递和引用传递）"><a href="#实参和形参（值传递和引用传递）" class="headerlink" title="实参和形参（值传递和引用传递）"></a>实参和形参（值传递和引用传递）</h5><p>调用函数时，传递给函数的值被称为函数的实参（值传递），对应位置的函数参数名叫作形参。<strong>如果实参是一个包含原始值(数字，字符串，布尔值)的变量，则就算函数在内部改变了对应形参的值，返回后，该实参变量的值也不会改变。如果实参是一个对象引用，则对应形参会和该实参指向同一个对象。</strong>假如函数在内部改变了对应形参的值，返回后，实参指向的对象的值也会改变：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 定义函数 myFunc */</span> <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>theObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//实参 mycar 和形参 theObject 指向同一个对象.</span>   theObject<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"Toyota"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*  * 定义变量 mycar;  * 创建并初始化一个对象;  * 将对象的引用赋值给变量 mycar  */</span> <span class="token keyword">var</span> mycar <span class="token operator">=</span> <span class="token punctuation">{</span>   brand<span class="token punctuation">:</span> <span class="token string">"Honda"</span><span class="token punctuation">,</span>   model<span class="token punctuation">:</span> <span class="token string">"Accord"</span><span class="token punctuation">,</span>   year<span class="token punctuation">:</span> <span class="token number">1998</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 弹出 'Honda' */</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>mycar<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 将对象引用传给函数 */</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>mycar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  * 弹出 'Toyota',对象的属性已被修改.  */</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mycar<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><h4 id="1、函数声明（命名函数）"><a href="#1、函数声明（命名函数）" class="headerlink" title="1、函数声明（命名函数）"></a>1、函数声明（命名函数）</h4><p>利用函数关键字<code>function</code>自定义函数，<code>name</code>为函数名，<code>param</code>为传递给函数的参数名称。语法如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 语法</span><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span>param<span class="token punctuation">[</span><span class="token punctuation">,</span> param<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span> param<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2、函数表达式"><a href="#2、函数表达式" class="headerlink" title="2、函数表达式"></a>2、函数表达式</h4><p>同函数声明类似，可以定义函数“名字”（例如可以在调用堆栈时使用）或者使用“匿名”函数。函数表达式不会提升，所以不能在定义之前调用。语法如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 语法 name为函数名可以省略，如果函数名省略，该函数就变为匿名函数</span><span class="token keyword">var</span> myFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span>param<span class="token punctuation">[</span><span class="token punctuation">,</span> param<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span> param<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span><span class="token keyword">var</span> myFunction <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">[</span>param<span class="token punctuation">[</span><span class="token punctuation">,</span> param<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span> param<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例</span><span class="token keyword">var</span> myFunction <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> myFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">namedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当函数只使用一次时，通常使用<strong>IIFE (\Immediately Invokable Function Expressions)。</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// statements</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>IIFE</strong>是在函数声明后立即调用的函数表达式。</p><h4 id="3、构造函数"><a href="#3、构造函数" class="headerlink" title="3、构造函数"></a>3、构造函数</h4><p>所有其他对象, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Function" target="_blank" rel="noopener"><code>Function</code></a> 对象可以用new操作符创建:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 语法 arg1,arg2...表示参数名称，functionBody是一个构成的函数定义的，包含JavaScript声明语句的字符串。</span><span class="token keyword">new</span> <span class="token class-name">Function</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span> argN<span class="token punctuation">,</span> functionBody<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 示例</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'console.log("hello");  console.log(a + b);'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span></code></pre><blockquote><p><strong>注意:</strong> 不推荐使用 <code>Function</code> 构造函数创建函数,因为它需要的函数体作为字符串可能会阻止一些JS引擎优化,也会引起其他问题。</p></blockquote><h4 id="4、箭头函数表达式（-gt-）"><a href="#4、箭头函数表达式（-gt-）" class="headerlink" title="4、箭头函数表达式（=>）"></a>4、箭头函数表达式（=&gt;）</h4><p>箭头函数表达式有着更短的语法，<code>param</code>是参数名称，零参数需要用()表示，只有一个参数时不需要括号(例如 <code>foo =&gt; 1</code>)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 语法 </span><span class="token punctuation">(</span><span class="token punctuation">[</span>param<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> param<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span> param <span class="token operator">=</span><span class="token operator">></span> expression<span class="token comment" spellcheck="true">// 示例</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> materials <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'Hydrogen'</span><span class="token punctuation">,</span>  <span class="token string">'Helium'</span><span class="token punctuation">,</span>  <span class="token string">'Lithium'</span><span class="token punctuation">,</span>  <span class="token string">'Beryllium'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>materials<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>material <span class="token operator">=</span><span class="token operator">></span> material<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// output: Array [8, 6, 7, 9]</span></code></pre><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2020/08/08/pai-xu-suan-fa/"/>
      <url>/2020/08/08/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在生活中，我们离不开排序，在数据结构中，排序算法也是很重要很经典的知识，更是每个程序员都必须得掌握的，在本篇我将总结一下常用的排序算法，便于自己以后复习。</p><h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><p>冒泡排序是一种简单的排序算法。其算法思想是从要排序的数列的一端开始向另一端冒泡，也就是把相邻的元素两两比较，当一个元素大于右侧相邻元素时，交换它们的位置；当一个元素小于或等于右侧相邻元素时，位置不变。</p><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt="img"></p><h4 id="原始冒泡排序"><a href="#原始冒泡排序" class="headerlink" title="原始冒泡排序"></a>原始冒泡排序</h4><h5 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h5><ul><li>相邻的元素两两比较，如果第一个比第二个大，就交换它们两个，这样在最后的元素将会是最大的数。</li><li>两层嵌套循环，外层冒泡轮数，里层依次比较，最后排序完成。</li></ul><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 原始冒泡排序     * @param array     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 元素交换</span>                    tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="冒泡排序优化1-有序标记"><a href="#冒泡排序优化1-有序标记" class="headerlink" title="冒泡排序优化1-有序标记"></a>冒泡排序优化1-有序标记</h4><p>冒泡排序算法的前提是无论数列是否有序无序，都会进行双层循环，但是如果数列在几轮排序之后已经有序了，没必要继续循环，浪费资源，在这种情况下，如果能判断出数列已经有序，并做出标记，那么剩下的几轮排序就不必执行了。</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 冒泡排序优化-有序标记     * @param array     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSortIsSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//有序标记，每一轮的初始值都是true</span>            <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 元素交换</span>                    tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//因为有元素进行交换，所以不是有序的，标记变为false</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果当前标记为true，则说明已是有序数组，直接跳出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="冒泡排序优化2-有序区界定"><a href="#冒泡排序优化2-有序区界定" class="headerlink" title="冒泡排序优化2-有序区界定"></a>冒泡排序优化2-有序区界定</h4><p>在上一步优化的基础上还可以继续优化，如果数列已经有一大部分原始是排好序的，比如数组<code>{3,2,5,7,9}</code>，可以看到后边<code>{5,7,9}</code>已经是排好序的，那我们就没必要继续进行比较了，那么，该如何避免这种情况呢？我们可以在每一轮排序后，记录下来最后一次元素交换的位置，该位置即为无序数列的边界，再往后就是有序区了。</p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 冒泡排序优化-有序区界定 * @param array */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSortBorder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最后一次交换的位置</span>    <span class="token keyword">int</span> lastExchangeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无序数列的边界</span>    <span class="token keyword">int</span> sortBorder <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有序标记，每一轮的初始值都是true</span>        <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sortBorder<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 元素交换</span>                tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//因为有元素进行交换，所以不是有序的，标记变为false</span>                isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 更新为最后一次交换元素的位置</span>                lastExchangeIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sortBorder <span class="token operator">=</span> lastExchangeIndex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前标记为true，则说明已是有序数组，直接跳出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="鸡尾酒排序"><a href="#鸡尾酒排序" class="headerlink" title="鸡尾酒排序"></a>鸡尾酒排序</h4><h5 id="鸡尾酒排序算法的思想"><a href="#鸡尾酒排序算法的思想" class="headerlink" title="鸡尾酒排序算法的思想"></a>鸡尾酒排序算法的思想</h5><p>在无规律排放的数组中，先从左到右冒泡排序，则最大的元素去到最右端；再先从右到左冒泡排序，则最大的元素去到最左端。以此类推，直到完成排序。</p><p>考虑这样的一个序列：<code>{2,3,4,5,1}</code> 。如果使用鸡尾酒排序，一个来回就可以搞定；而冒泡排序则需要跑四趟。</p><p><img src="http://www.suanfajun.com/wp-content/uploads/2017/04/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE.gif" alt="img"></p><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 冒泡排序优化-鸡尾酒排序（适用于大部分元素已经有序的情况）     * @param array     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSortTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有序标记</span>            <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//奇数轮，从左向右比较和交换</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 在偶数轮之前，将isSorted重新标记为true</span>            isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 偶数轮，从右向左比较和交换</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="鸡尾酒排序优化"><a href="#鸡尾酒排序优化" class="headerlink" title="鸡尾酒排序优化"></a>鸡尾酒排序优化</h4><p>同冒泡排序的有序区界定优化类似，我们可以在每一轮排序后，记录下来最后一次元素交换的位置，该位置即为无序数列的边界，再往后就是有序区了。因为鸡尾酒是两边循环交替，因此需要设置两个边界值来判断。</p><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 鸡尾酒排序优化-有序区界定（适用于大部分元素已经有序的情况）     * @param array     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSortTwoBorder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左侧最后一次交换的位置</span>        <span class="token keyword">int</span> leftExchangeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 右侧最后一次交换的位置</span>        <span class="token keyword">int</span> rightExchangeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无序数组的左边界</span>        <span class="token keyword">int</span> leftSortBorder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无序数组的右边界</span>        <span class="token keyword">int</span> rightSortBorder <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有序标记</span>            <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//奇数轮</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> leftSortBorder<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rightSortBorder<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    rightExchangeIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            rightSortBorder <span class="token operator">=</span> rightExchangeIndex<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 偶数轮</span>            isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> rightSortBorder<span class="token punctuation">;</span> j <span class="token operator">></span> leftSortBorder<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相邻元素两两比较</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    leftExchangeIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            leftSortBorder <span class="token operator">=</span> leftExchangeIndex<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center">空间复杂度</td><td align="center">O(1)</td></tr><tr><td align="center">稳定性</td><td align="center">稳定</td></tr></tbody></table><blockquote><p>面经：</p><p><a href="https://www.nowcoder.com/discuss/411580?type=2" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/411580?type=2</a></p><p><a href="https://www.nowcoder.com/discuss/406201" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/406201</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML篇</title>
      <link href="/2020/08/08/html-pian/"/>
      <url>/2020/08/08/html-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Doctype-是什么，有什么作用？标准模式与兼容模式各有什么区别"><a href="#1、Doctype-是什么，有什么作用？标准模式与兼容模式各有什么区别" class="headerlink" title="1、Doctype 是什么，有什么作用？标准模式与兼容模式各有什么区别?"></a>1、Doctype 是什么，有什么作用？标准模式与兼容模式各有什么区别?</h2><p><strong>概念</strong>：<code>DOCTYPE</code> 是用来声明文档类型和 DTD （DocType Declaration）规范的。任何一个标准的HTML页面，第一行一定是一个以<code>&lt;!DOCTYPE ……&gt;</code>开头的语句。它不是一个 HTML 标签，处于 html 标签之前。<strong>DTD可告知浏览器文档使用哪种 HTML 或 XHTML 规范</strong>。</p><p><strong>作用</strong>：告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE 不存在或格式不正确会导致文档以兼容模式呈现。</p><p><strong>标准模式与兼容模式区别</strong>：标准模式的排版 和 JS 运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p><p>在 HTML4.01 中&lt;!doctype&gt;声明指向一个 DTD，由于 HTML4.01 基于 SGML，所以 DTD 指定了标记规则以保证浏览器正确渲染内容 HTML5 不基于 SGML，所以不用指定 DTD。</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p><strong>HTML4.01</strong>这个版本是IE6开始兼容的。<strong>HTML5是IE9开始兼容的</strong>。如今，手机、移动端的网页，就可以使用HTML5了，因为其兼容性更高。</p><p>HTML4.01里面有两大种规范，每大种规范里面又各有3种小规范。所以一共6种规范（见下图）。</p><p><img src="http://img.smyhvae.com/20170629_1600.png" alt="规范"></p><blockquote><p>总结：</p><ul><li>让浏览器以标准模式渲染</li><li>让浏览器知道元素的合法性</li></ul></blockquote><h2 id="2、HTML、XHTML、HTML5的区别"><a href="#2、HTML、XHTML、HTML5的区别" class="headerlink" title="2、HTML、XHTML、HTML5的区别"></a>2、HTML、XHTML、HTML5的区别</h2><ul><li>HTML（HyperText Markup Language） 是超文本标记语言，负责描述文档语义的语言，属于 SGML。</li><li>XHTML （Extensible Hypertext Markup Language）是可扩展超文本标记语言，属于 XML，是 HTML 进行 XML 严格化的结果。</li><li>HTML5 不属于SGML，也不属于 XML（HTML5有自己独立的一套规范），比 XHTML 宽松。</li></ul><h2 id="3、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？"><a href="#3、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？" class="headerlink" title="3、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？"></a>3、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h2><p><strong>定义</strong>：CSS 规范规定，每个元素都有 display 属性，确定该元素的类型，每个元素都有默认的 display 值，如 div 的 display 默认值为“block”，则为“块级”元素；span 默认 display 属性值为“inline”，是“行内”元素。</p><ul><li>行内元素有：a b span img input select strong（强调的语气）</li><li>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</li><li>空元素：<ul><li>常见: br hr img input link meta</li><li>不常见: area base col command embed keygen param source track wbr</li></ul></li></ul><p>不同浏览器（版本）、HTML4（5）、CSS2 等实际略有差异 参考: <a href="http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements" target="_blank" rel="noopener">http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</a></p><h2 id="4、HTML-全局属性"><a href="#4、HTML-全局属性" class="headerlink" title="4、HTML 全局属性"></a>4、HTML 全局属性</h2><p>全局属性是所有 HTML 元素共有的属性; 它们可以用于所有元素，即使属性可能对某些元素不起作用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes" target="_blank" rel="noopener">全局属性 | MDN</a></p><h2 id="页面导入样式时，使用-link-和-import-有什么区别？"><a href="#页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="页面导入样式时，使用 link 和@import 有什么区别？"></a>页面导入样式时，使用 link 和@import 有什么区别？</h2><ul><li>link 属于 XHTML 标签，除了加载 CSS 外，还能用于定义 RSS, 定义 rel 连接属性等作用；而@import 是 CSS 提供的，只能用于加载 CSS;</li><li>页面被加载的时，link 会同时被加载，而@import 引用的 CSS 会等到页面被加载完再加载;</li><li>import 是 CSS2.1 提出的，只在 IE5 以上才能被识别，而 link 是 XHTML 标签，无兼容问题;</li><li>link 支持使用 js 控制 DOM 去改变样式，而@import 不支持;</li></ul><h2 id="浏览器内核的理解？"><a href="#浏览器内核的理解？" class="headerlink" title="浏览器内核的理解？"></a>浏览器内核的理解？</h2><p>浏览器主要分成两部分：渲染引擎(layout engineer 或 Rendering Engine)和 JS 引擎。</p><p><strong>渲染引擎（浏览器内核）</strong>：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后渲染到用户的屏幕上。<strong>渲染引擎是浏览器兼容性问题出现的根本原因。</strong></p><p><strong>JS 引擎</strong>：解析和执行 javascript 来实现逻辑和控制 DOM 进行交互。浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时会逐行解释每一句源码（转换为机器语言），然后由计算机去执行。所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><p>最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，<strong>浏览器内核就倾向于只指渲染引擎</strong>。</p><h4 id="主流浏览器机器内核："><a href="#主流浏览器机器内核：" class="headerlink" title="主流浏览器机器内核："></a>主流浏览器机器内核：</h4><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360 极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td></td></tr><tr><td>Safari</td><td>webkit</td><td>从 Safari 推出之时起，它的渲染引擎就是 Webkit，一提到 webkit，首先想到的便是 chrome，Webkit 的鼻祖其实是 Safari。</td></tr><tr><td>chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用 Blink 内核。二次开发</td></tr><tr><td>Opera</td><td>blink</td><td>Opera 内核原为：Presto，现在跟随 chrome 用 blink 内核。</td></tr></tbody></table><h2 id="HTML5-变化"><a href="#HTML5-变化" class="headerlink" title="HTML5 变化"></a>HTML5 变化</h2><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等。 </p><h3 id="新的语义化元素"><a href="#新的语义化元素" class="headerlink" title="新的语义化元素"></a>新的语义化元素</h3><h5 id="1、H5中新增的语义标签"><a href="#1、H5中新增的语义标签" class="headerlink" title="1、H5中新增的语义标签"></a>1、H5中新增的语义标签</h5><ul><li><code>&lt;section&gt;</code> 表示区块</li><li><code>&lt;article&gt;</code> 表示文章。如文章、评论、帖子、博客</li><li><code>&lt;header&gt;</code> 表示页眉</li><li><code>&lt;footer&gt;</code> 表示页脚</li><li><code>&lt;nav&gt;</code> 表示导航</li><li><code>&lt;aside&gt;</code> 表示侧边栏。如文章的侧栏</li><li><figure> 表示媒介内容分组。</figure></li><li><code>&lt;mark&gt;</code> 表示标记 (用得少)</li><li><code>&lt;progress&gt;</code> 表示进度 (用得少)</li><li><code>&lt;time&gt;</code> 表示日期</li></ul><p>本质上新语义标签与<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>没有区别，只是其具有表意性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成<code>&lt;div class="nav"&gt;</code> 相当于<code>&lt;nav&gt;</code>。</p><h5 id="2、移除的元素"><a href="#2、移除的元素" class="headerlink" title="2、移除的元素"></a>2、移除的元素</h5><ul><li>纯表现的元素：basefont，big，center，font, s，strike，tt，u;</li><li>对可用性产生负面影响的元素：frame，frameset，noframes；</li></ul><h3 id="表单增强"><a href="#表单增强" class="headerlink" title="表单增强"></a>表单增强</h3><ul><li><code>email</code> 只能输入email格式。自动带有验证功能。</li><li><code>tel</code> 手机号码。</li><li><code>url</code> 只能输入url格式。</li><li><code>number</code> 只能输入数字。</li><li><code>search</code> 搜索框</li><li><code>range</code> 滑动条</li><li><code>color</code> 拾色器</li><li><code>time</code> 时间</li><li><code>date</code> 日期</li><li><code>datetime</code> 时间日期</li><li><code>month</code> 月份</li><li><code>week</code> 星期</li></ul><p>上面的部分类型是针对移动设备生效的，且具有一定的兼容性，在实际应用当中可选择性的使用。</p><h3 id="新-API"><a href="#新-API" class="headerlink" title="新 API"></a>新 API</h3><ul><li><p>离线 （applicationCache ）</p></li><li><p>音视频 （audio, vidio）</p></li><li><p>图形 （canvans）</p></li><li><p>实时通信（websoket）</p></li><li><p>本地存储（本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；sessionStorage 的数据在浏览器关闭后自动删除）</p></li><li><p>设备能力（地图定位，手机摇一摇）</p></li><li><p>支持 HTML5 新标签：</p><ul><li><p>IE8/IE7/IE6 支持通过 document.createElement 方法产生的标签，</p></li><li><p>可以利用这一特性让这些浏览器支持 HTML5 新标签，</p></li><li><p>浏览器支持新标签后，还需要添加标签默认的样式。</p></li><li><p>当然也可以直接使用成熟的框架、比如 html5shim;</p><pre><code>&lt;!--[if lt IE 9]&gt;  &lt;script&gt;    src = "http://html5shim.googlecode.com/svn/trunk/html5.js";  &lt;/script&gt;&lt;![endif]--&gt;</code></pre></li></ul></li><li><p>如何区分 HTML5： DOCTYPE 声明\新增的结构元素\功能元素</p></li></ul><h2 id="对-HTML-语义化的理解？"><a href="#对-HTML-语义化的理解？" class="headerlink" title="对 HTML 语义化的理解？"></a>对 HTML 语义化的理解？</h2><ul><li>用正确的标签做正确的事情。</li><li>html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li><li>即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;</li><li>搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</li></ul><h2 id="请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h2><ul><li>cookie 是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li><li>cookie 数据始终在同源的 http 请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</li><li>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。</li><li>存储大小：<ul><li>cookie 数据大小不能超过 4k。</li><li>sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。</li></ul></li><li>有效期（生命周期）：<ul><li>localStorage: 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</li><li>sessionStorage: 数据在当前浏览器窗口关闭后自动删除。</li><li>cookie: 设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li><li>共享<ul><li>sessionStorage 不能共享，localStorage 在同源文档之间共享，cookie 在同源且符合 path 规则的文档之间共享</li></ul></li></ul><h2 id="HTML5-的-form-如何关闭自动补全功能？"><a href="#HTML5-的-form-如何关闭自动补全功能？" class="headerlink" title="HTML5 的 form 如何关闭自动补全功能？"></a>HTML5 的 form 如何关闭自动补全功能？</h2><p>给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p><h2 id="如何实现浏览器内多个标签页之间的通信-阿里"><a href="#如何实现浏览器内多个标签页之间的通信-阿里" class="headerlink" title="如何实现浏览器内多个标签页之间的通信? (阿里)"></a>如何实现浏览器内多个标签页之间的通信? (阿里)</h2><ul><li>WebSocket、SharedWorker；</li><li>也可以调用 localstorge、cookies 等本地存储方式；</li></ul><p>localstorge 另一个浏览上下文里被添加、修改或删除时，它都会触发一个<code>storage</code>事件，</p><p>我们通过监听事件，控制它的值来进行页面信息通信；</p><p>注意 quirks：Safari 在无痕模式下设置 localstorge 值时会抛出 QuotaExceededError 的异常；</p><h2 id="webSocket-如何兼容低浏览器？-阿里"><a href="#webSocket-如何兼容低浏览器？-阿里" class="headerlink" title="webSocket 如何兼容低浏览器？(阿里)"></a>webSocket 如何兼容低浏览器？(阿里)</h2><ul><li>Adobe Flash Socket 、</li><li>ActiveX HTMLFile (IE) 、</li><li>基于 multipart 编码发送 XHR 、</li><li>基于长轮询的 XHR</li></ul><h2 id="HTML5-的离线储存怎么使用，工作原理能不能解释一下？"><a href="#HTML5-的离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="HTML5 的离线储存怎么使用，工作原理能不能解释一下？"></a>HTML5 的离线储存怎么使用，工作原理能不能解释一下？</h2><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p><p>原理：HTML5 的离线存储是基于一个新建的.appcache 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><h4 id="cache-manifest-缓存清单文件"><a href="#cache-manifest-缓存清单文件" class="headerlink" title="cache manifest 缓存清单文件"></a><code>cache manifest</code> 缓存清单文件</h4><p>缓存清单文件中列出了浏览器应缓存，以供离线访问的资源。推荐使用 <code>.appcache</code>作为后缀名，另外还要添加MIME类型。</p><p><strong>缓存清单文件里的内容怎样写：</strong></p><p>（1）顶行写CACHE MANIFEST。</p><p>（2）CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js等。</p><p>（3）NETWORK: 换行 指定需要在线访问的资源，可使用通配符（也就是：不需要缓存的、必须在网络下面才能访问的资源）。</p><p>（4）FALLBACK: 换行 当被缓存的文件找不到时的备用资源（当访问不到某个资源时，自动由另外一个资源替换）。</p><p>格式举例1：</p><p><img src="http://img.smyhvae.com/20180224_2240.png" alt="缓存清单"></p><p>格式举例2：</p><pre class=" language-bash"><code class="language-bash">CACHE MANIFEST<span class="token comment" spellcheck="true">#要缓存的文件</span>CACHE:    images/img1.jpg    images/img2.jpg<span class="token comment" spellcheck="true">#指定必须联网才能访问的文件</span>NETWORK:     images/img3.jpg     images/img4.jpg<span class="token comment" spellcheck="true">#当前页面无法访问是回退的页面</span>FALLBACK:    404.html</code></pre><p><strong>缓存清单文件怎么用：</strong></p><p>（1）例如我们创建一个名为 <code>demo.appcache</code>的文件。例如：</p><p>demo.appcache：</p><pre class=" language-bash"><code class="language-bash">CACHE MANIFEST<span class="token comment" spellcheck="true"># 注释以#开头</span><span class="token comment" spellcheck="true">#下面是要缓存的文件</span>CACHE:    http://img.smyhvae.com/2016040101.jpg</code></pre><p>（2）在需要应用缓存在页面的根元素(html)里，添加属性manifest=”demo.appcache”。路径要保证正确。例如：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>01.appcache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img.smyhvae.com/2016040101.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="浏览器是怎么对-HTML5-的离线储存资源进行管理和加载的呢？"><a href="#浏览器是怎么对-HTML5-的离线储存资源进行管理和加载的呢？" class="headerlink" title="浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？"></a>浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？</h3><ul><li>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ul><p>在离线状态时，操作 window.applicationCache 进行需求实现。</p><p>参考链接：<a href="https://yanhaijing.com/html/2014/12/28/html5-manifest/" target="_blank" rel="noopener">HTML5 离线缓存-manifest 简介</a></p><h2 id="title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别？"><a href="#title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别？" class="headerlink" title="title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？"></a>title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？</h2><ul><li>title 属性没有明确意义只表示是个标题，H1 则表示层次明确的标题，对页面信息的抓取也有很大的影响；</li><li>strong 是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：strong 会重读，而 b 是展示强调内容。</li><li>i 内容展示为斜体是样式标签，em 表示强调的文本，是语义化标签；效果都是斜体</li></ul><p>Physical Style Elements – 自然样式标签</p><p>b, i, u, s, pre</p><p>Semantic Style Elements – 语义样式标签</p><p>strong, em, ins, del, code</p><p>应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。</p><h2 id="哪些元素可以自闭合？"><a href="#哪些元素可以自闭合？" class="headerlink" title="哪些元素可以自闭合？"></a>哪些元素可以自闭合？</h2><ul><li>表单元素 input</li><li>img</li><li>br, hr</li><li>meta, link</li></ul><h2 id="HTML-和-DOM-的关系"><a href="#HTML-和-DOM-的关系" class="headerlink" title="HTML 和 DOM 的关系"></a>HTML 和 DOM 的关系</h2><ul><li>HTML 只是一个字符串</li><li>DOM 由 HTML 解析而来</li><li>JS 可以维护 DOM</li></ul><h2 id="property-和-attribute-的区别"><a href="#property-和-attribute-的区别" class="headerlink" title="property 和 attribute 的区别"></a>property 和 attribute 的区别</h2><p>例如一个 input 标签 <code>&lt;input value="3" /&gt;</code> 它的 attribute 是 3 但如果使用<code>input.value = 4</code> 或 直接修改值为 4，这时再去 getAttribute 得到的还是”3”</p><h2 id="form-作用"><a href="#form-作用" class="headerlink" title="form 作用"></a>form 作用</h2><ul><li>直接提交表单</li><li>使用 submit / reset 按钮</li><li>便于浏览器保存表单</li><li>第三方库（比如 jQuery）可以整体获取值</li><li>第三方库可以进行表单验证</li></ul><p>所以，如果我们是通过 Ajax 提交表单数据，也建议加上 form。</p><h2 id="html-中-title-属性和-alt-属性的区别？"><a href="#html-中-title-属性和-alt-属性的区别？" class="headerlink" title="html 中 title 属性和 alt 属性的区别？"></a>html 中 title 属性和 alt 属性的区别？</h2><pre><code>&lt;img src="#" alt="alt信息" /&gt;</code></pre><p>当图片不输出信息的时候，会显示 alt 信息 鼠标放上去没有信息，当图片正常读取，不会出现 alt 信息。</p><pre><code>&lt;img src="#" alt="alt信息" title="title信息" /&gt;</code></pre><ul><li>当图片不输出信息的时候，会显示 alt 信息 鼠标放上去会出现 title 信息；</li><li>当图片正常输出的时候，不会出现 alt 信息，鼠标放上去会出现 title 信息。</li><li>除了纯装饰图片外都必须设置有意义的值，搜索引擎会分析。</li></ul><h4 id="另外还有一些关于-title-属性的知识："><a href="#另外还有一些关于-title-属性的知识：" class="headerlink" title="另外还有一些关于 title 属性的知识："></a>另外还有一些关于 title 属性的知识：</h4><ul><li>title 属性可以用在除了 base，basefont，head，html，meta，param，script 和 title 之外的所有标签。</li><li>title 属性的功能是提示。额外的说明信息和非本质的信息请使用 title 属性。title 属性值可以比 alt 属性值设置的更长。</li><li>title 属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。</li></ul><h2 id="为什么我们要弃用-table-标签？"><a href="#为什么我们要弃用-table-标签？" class="headerlink" title="为什么我们要弃用 table 标签？"></a>为什么我们要弃用 table 标签？</h2><p>table 的缺点在于服务器把代码加载到本地服务器的过程中，本来是加载一行执行一行，但是 table 标签是里面的东西<strong>全都下载完之后才会显示出来</strong>，那么如果图片很多的话就会导致网页一直加载不出来，除非所有的图片和内容都加载完。如果要等到所有的图片全都加载完之后才显示出来的话那也太慢了，所以 table 标签现在我们基本放弃使用了。</p><h2 id="head-元素"><a href="#head-元素" class="headerlink" title="head 元素"></a>head 元素</h2><h4 id="html5-的比较完整的骨架："><a href="#html5-的比较完整的骨架：" class="headerlink" title="html5 的比较完整的骨架："></a>html5 的比较完整的骨架：</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>厉害很厉害<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>head 子元素大概分为三类，分别是：</p><ul><li>描述网页基本信息的</li><li>指向渲染网页需要其他文件链接的</li><li>各大厂商根据自己需要定制的</li></ul><h4 id="网页基本信息"><a href="#网页基本信息" class="headerlink" title="网页基本信息"></a>网页基本信息</h4><p>一个网页，首先得有个标题，就跟人有名字一样。除此之外，还可以根据实际需要补充一些基本信息。</p><ul><li>文档标题（浏览器标签中显示的文本）：<title>深入了解 head 元素</title></li><li>编码格式： 如果你的页面出现乱码，那一般就是编码格式不对</li><li>视窗设置：</li><li>搜索引擎优化相关内容：</li><li>IE 浏览器版本渲染设置：</li></ul><h4 id="其他文件链接"><a href="#其他文件链接" class="headerlink" title="其他文件链接"></a>其他文件链接</h4><ul><li>CSS 文件：</li><li>JavaScript 文件：&lt;script src=“script.js”&gt;</li></ul><p>但是为了让页面的样子更早的让用户看到，一般把 JS 文件放到 body 的底部</p><h4 id="厂商定制"><a href="#厂商定制" class="headerlink" title="厂商定制"></a>厂商定制</h4><p>同样分享页面到 QQ 的聊天窗口，有些页面直接就是一个链接，但是有些页面有标题，图片，还有文字介绍。为什么区别这么明显呢？其实就是看有没有设置下面这三个内容</p><pre><code>&lt;meta itemprop="name" content="这是分享的标题" /&gt;&lt;meta  itemprop="image"  content="http://imgcache.qq.com/qqshow/ac/v4/global/logo.png"/&gt;&lt;meta name="description" itemprop="description" content="这是要分享的内容" /&gt;</code></pre><h4 id="细化补充："><a href="#细化补充：" class="headerlink" title="细化补充："></a>细化补充：</h4><p>面试题：</p><ul><li>问：网页的head标签里面，表示的是页面的配置，有什么配置？</li><li>答：字符集、关键词、页面描述、页面标题、IE适配、视口、iPhone小图标等等。</li></ul><p>头标签内部的常见标签如下：</p><ul><li><code>&lt;title&gt;</code>：指定整个网页的标题，在浏览器最上方显示。</li><li><code>&lt;base&gt;</code>：为页面上的所有链接规定默认地址或默认目标。</li><li><code>&lt;meta&gt;</code>：提供有关页面的基本信息</li><li><code>&lt;body&gt;</code>：用于定义HTML文档所要显示的内容，也称为主体标签。我们所写的代码必须放在此标签內。</li><li><code>&lt;link&gt;</code>：定义文档与外部资源的关系。</li></ul><p><strong>meta 标签</strong>：</p><p>meta表示“元”。“元”配置，就是表示基本的配置项目。</p><p>常见的几种 meta 标签如下：</p><p>（1）字符集 charset：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>字符集用meta标签中的<code>charset</code>定义，charset就是charactor set（即“字符集”），即<strong>网页的编码方式</strong>。</p><p><strong>字符集</strong>(Character set)是多个字符的集合。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p><p>上面这行代码非常关键， 是必须要写的代码，否则可能导致乱码。比如你保存的时候，meta写的和声明的不匹配，那么浏览器就是乱码。</p><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312等。关于“编码方式”，我们在下一段会详细介绍。</p><p>（2）视口 viewport：</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p><code>width=device-width</code> ：表示视口宽度等于屏幕宽度。</p><p>viewport 这个知识点，初学者还比较难理解，以后学 Web 移动端的时候会用到。</p><p>（3）定义“关键词”：</p><p>举例如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易,邮箱,游戏,新闻,体育,娱乐,女性,亚运,论坛,短信<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>这些关键词，就是告诉搜索引擎，这个网页是干嘛的，能够提高搜索命中率。让别人能够找到你，搜索到你。</p><p>（4）定义“页面描述”：</p><p>meta除了可以设置字符集，还可以设置关键字和页面描述。</p><p>只要设置Description页面描述，那么百度搜索结果，就能够显示这些语句，这个技术叫做<strong>SEO</strong>（search engine optimization，搜索引擎优化）。</p><p>设置页面描述的举例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>效果如下：</p><p><img src="http://img.smyhvae.com/20170629_1743.png" alt="示例"></p><p>上面的几种<code>&lt;meta&gt;</code>标签都不用记，但是另外还有一个<code>&lt;meta&gt;</code>标签是需要记住的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3;http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>上面这个标签的意思是说，3秒之后，自动跳转到百度页面。</p><p><strong>title 标签</strong>:</p><p>用于设置网页标题：</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></code></pre><p>title标签也是有助于SEO搜索引擎优化的。</p><p><strong>base标签</strong>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>base 标签用于指定基础的路径。指定之后，所有的 a 链接都是以这个路径为基准。</p><h2 id="iframe-有那些缺点？"><a href="#iframe-有那些缺点？" class="headerlink" title="iframe 有那些缺点？"></a>iframe 有那些缺点？</h2><ul><li>iframe 会阻塞主页面的 Onload 事件；</li><li>搜索引擎的检索程序无法解读这种页面，不利于 SEO;</li><li>iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li></ul><p>使用 iframe 之前需要考虑这两个缺点。如果需要使用 iframe，最好是通过 javascript</p><p>动态给 iframe 添加 src 属性值，这样可以绕开以上两个问题。</p><h2 id="Label-的作用是什么？是怎么用的？"><a href="#Label-的作用是什么？是怎么用的？" class="headerlink" title="Label 的作用是什么？是怎么用的？"></a>Label 的作用是什么？是怎么用的？</h2><p>label 标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p><h2 id="页面可见性（Page-Visibility-API）-可以有哪些用途？"><a href="#页面可见性（Page-Visibility-API）-可以有哪些用途？" class="headerlink" title="页面可见性（Page Visibility API） 可以有哪些用途？"></a>页面可见性（Page Visibility API） 可以有哪些用途？</h2><ul><li>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;</li><li>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</li></ul><h2 id="如何在页面上实现一个圆形的可点击区域？"><a href="#如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="如何在页面上实现一个圆形的可点击区域？"></a>如何在页面上实现一个圆形的可点击区域？</h2><ul><li>map+area 或者 svg</li><li>border-radius</li><li>纯 js 实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ul><h2 id="实现不使用-border-画出-1px-高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。"><a href="#实现不使用-border-画出-1px-高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。" class="headerlink" title="实现不使用 border 画出 1px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。"></a>实现不使用 border 画出 1px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">1</span>px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="移动端项目需要注意的-4-个问题"><a href="#移动端项目需要注意的-4-个问题" class="headerlink" title="移动端项目需要注意的 4 个问题"></a>移动端项目需要注意的 4 个问题</h2><h4 id="meta-中设置-viewport"><a href="#meta-中设置-viewport" class="headerlink" title="meta 中设置 viewport"></a>meta 中设置 viewport</h4><p>阻止用户手滑放大或缩小页面，需要在 index.html 中添加 meta 元素,设置 viewport。</p><pre><code>&lt;meta  name="viewport"  content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;</code></pre><h4 id="CSS-样式统一问题"><a href="#CSS-样式统一问题" class="headerlink" title="CSS 样式统一问题"></a>CSS 样式统一问题</h4><p>我们需要重置页面样式，因为在不同的手机浏览器上，默认的 css 样式不是统一的。 解决方法：使用 reset.css 重置所有元素的默认样式</p><h4 id="一像素边框问题"><a href="#一像素边框问题" class="headerlink" title="一像素边框问题"></a>一像素边框问题</h4><p>有的手机分辨率比较高，是 2 倍屏或 3 倍屏，手机上的浏览器就会把 CSS 中的 1 像素值展示为 2 个或 3 个物理宽度 解决方法： 添加一个 border.css 库，将利用<strong>scroll 缩放的原理</strong>将边框重置。当我们需要使用一像素边框时只需要在标签上添加对应类名，如设置底部一像素边框就在标签上加入”border-bottom”的 class 名</p><h4 id="300-毫秒点击延迟问题"><a href="#300-毫秒点击延迟问题" class="headerlink" title="300 毫秒点击延迟问题"></a>300 毫秒点击延迟问题</h4><p>在移动端开发中，某些机型上使用 click 事件会延迟 300ms 才执行，这样影响了用户体验。 解决方法： 引入<a href="https://www.jianshu.com/p/05b142d84780" target="_blank" rel="noopener">fastclick.js</a>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端js</title>
      <link href="/2020/08/02/qian-duan-js/"/>
      <url>/2020/08/02/qian-duan-js/</url>
      
        <content type="html"><![CDATA[<h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><h3 id="JS中一共有六种数据类型"><a href="#JS中一共有六种数据类型" class="headerlink" title="JS中一共有六种数据类型"></a>JS中一共有六种数据类型</h3><ul><li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</p></li><li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p></li></ul><p>注意：内置对象 Function、Array、Date、RegExp、Error等都是属于 Object 类型。也就是说，除了那五种基本数据类型之外，其他的，都称之为 Object类型。</p><p><strong>数据类型之间最大的区别</strong>：</p><ul><li><p>基本数据类型：参数赋值的时候，传数值。</p></li><li><p>引用数据类型：参数赋值的时候，传地址（修改的同一片内存空间）。</p></li></ul><h2 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h2><p>我们首先记住一句话：JS中，所有的<strong>变量</strong>都是保存在<strong>栈内存</strong>中的。</p><p>然后来看看下面的区别。</p><p><strong>基本数据类型</strong>：</p><p><strong>基本数据类型的值，直接保存在栈内存中</strong>。值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><p><strong>引用数据类型</strong>：</p><p>对象是保存到<strong>堆内存</strong>中的。每创建一个新的对象，就会在堆内存中开辟出一个新的空间；而<strong>变量保存了对象的内存地址</strong>（对象的引用），保存在栈内存当中。如果两个变量保存了同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>在字符串中我们可以使用<code>\</code>作为转义字符，当表示一些特殊符号时可以使用<code>\</code>进行转义。</p><ul><li><p><code>\"</code> 表示 <code>"</code> 双引号</p></li><li><p><code>\'</code> 表示 <code>'</code> 单引号</p></li><li><p><code>\\</code> 表示<code>\</code></p></li><li><p><code>\r</code> 表示回车</p></li><li><p><code>\n</code> 表示换行。n 的意思是 newline。</p></li><li><p><code>\t</code> 表示缩进。t 的意思是 tab。</p></li><li><p><code>\b</code> 表示空格。b 的意思是 blank。</p></li></ul><h2 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h2><p>字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>代码举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span></code></pre><p>比如上面的代码，当重新给变量 str 赋值时，常量<code>hello</code>不会被修改，依然保存在内存中；str 会改为指向<code>qianguyihao</code>。</p><h2 id="模板字面量（模板字符串）"><a href="#模板字面量（模板字符串）" class="headerlink" title="模板字面量（模板字符串）"></a>模板字面量（模板字符串）</h2><p>ES6中引入了<strong>模板字面量</strong>，让我们省去了字符串拼接的烦恼。</p><p>有了 ES6 语法，字符串拼接可以这样写：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在模板字符串中插入变量</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'26'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">',age:'</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传统写法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ES6 写法。注意语法格式</span><span class="token comment" spellcheck="true">// 在模板字面量中插入表达式</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`this is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and not </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在模板字面量中插入函数返回值</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`www.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.com`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：www.qianguyihao.com</span><span class="token comment" spellcheck="true">// 模板字面量支持嵌套使用</span><span class="token keyword">const</span> nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'千古壹号'</span><span class="token punctuation">,</span> <span class="token string">'许嵩'</span><span class="token punctuation">,</span> <span class="token string">'解忧少帅'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// join('') 的意思是，把数组里的内容合并成一个字符串</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;ul>    ${nameList        .map((item) => `</span></span><span class="token operator">&lt;</span>li<span class="token operator">></span>$<span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token template-string"><span class="token string">`)        .join('')}    &lt;/ul>`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">myTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="数值型：Number"><a href="#数值型：Number" class="headerlink" title="数值型：Number"></a>数值型：Number</h2><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。</p><ul><li><p>最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308</p></li><li><p>最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324</p></li></ul><p><strong>如果使用 Number 表示的变量超过了最大值，则会返回Infinity。</strong></p><ul><li><p>无穷大（正无穷）：Infinity</p></li><li><p>无穷小（负无穷）：-Infinity</p></li></ul><p>注意：<code>typeof Infinity</code>的返回结果是number。</p><p>注意：<code>typeof NaN</code>的返回结果是 number。</p><p>Undefined和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。</p><h2 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h2><h3 id="运算精度问题"><a href="#运算精度问题" class="headerlink" title="运算精度问题"></a>运算精度问题</h3><p>在JS中，整数的运算<strong>基本</strong>可以保证精确；但是<strong>小数的运算，可能会得到一个不精确的结果</strong>。所以，千万不要使用JS进行对精确度要求比较高的运算。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印结果：0.30000000000000004</span></code></pre><h3 id="处理数学运算的精度问题"><a href="#处理数学运算的精度问题" class="headerlink" title="处理数学运算的精度问题"></a>处理数学运算的精度问题</h3><p>如果只是一些简单的精度问题，可以使用 <code>toFixd()</code> 方法进行小数的截取。备注：关于 <code>toFixed()</code>方法。</p><h2 id="Null：空对象"><a href="#Null：空对象" class="headerlink" title="Null：空对象"></a>Null：空对象</h2><p>null 专门用来定义一个<strong>空对象</strong>（例如：<code>let a = null</code>）。</p><p>如果你想定义一个变量用来保存引用类型，但是还没想好放什么内容，这个时候，可以在初始化时将其设置为 null。</p><p>比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> myObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：object</span></code></pre><p>补充：</p><ul><li><p>Null 类型的值只有一个，就是 null。比如 <code>let a = null</code>。</p></li><li><p>使用 typeof 检查一个 null 值时，会返回 object。</p></li></ul><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><h3 id="case1：变量已声明，未赋值时"><a href="#case1：变量已声明，未赋值时" class="headerlink" title="case1：变量已声明，未赋值时"></a>case1：变量已声明，未赋值时</h3><p><strong>声明</strong>了一个变量，但没有<strong>赋值</strong>，此时它的值就是 <code>undefined</code>。举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：undefined</span></code></pre><p>补充：</p><ul><li><p>Undefined 类型的值只有一个，就是 undefind。比如 <code>let a = undefined</code>。</p></li><li><p>使用 typeof 检查一个 undefined 值时，会返回 undefined。</p></li></ul><h3 id="case2：变量未声明（未定义）时"><a href="#case2：变量未声明（未定义）时" class="headerlink" title="case2：变量未声明（未定义）时"></a>case2：变量未声明（未定义）时</h3><p>如果你从未声明一个变量，就去使用它，则会报错（这个大家都知道）；此时，如果用 <code>typeof</code> 检查这个变量时，会返回 <code>undefined</code>。举例：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：Uncaught ReferenceError: a is not defined</span></code></pre><h3 id="case3：函数无返回值时"><a href="#case3：函数无返回值时" class="headerlink" title="case3：函数无返回值时"></a>case3：函数无返回值时</h3><p>如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。</p><p>或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 <code>return undefined</code>。</p><p>举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：undefined</span></code></pre><h3 id="case4：调用函数时，未传参"><a href="#case4：调用函数时，未传参" class="headerlink" title="case4：调用函数时，未传参"></a>case4：调用函数时，未传参</h3><p>调用函数时，如果没有传参，那么，这个参数的值就是 undefined。</p><p>举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数时，未传参。执行函数后的打印结果：undefined</span></code></pre><p>实际开发中，如果调用函数时没有传参，我们可以给形参设置一个默认值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>等学习了 ES6 之后，上方代码也可以这样写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="null和undefined区别"><a href="#null和undefined区别" class="headerlink" title="null和undefined区别"></a>null和undefined区别</h3><p>null 和 undefined 有很大的相似性。看看 <code>null == undefined</code> 的结果为 <code>true</code> 也更加能说明这点。</p><p>但是 <code>null === undefined</code> 的结果是 false。它们虽然相似，但还是有区别的，其中一个区别是，和数字运算时：</p><ul><li><p>10 + null 结果为 10。</p></li><li><p>10 + undefined 结果为 NaN。</p></li></ul><p>规律总结：</p><ul><li><p>任何数据类型和 undefined 运算都是 NaN;</p></li><li><p>任何值和 null 运算，null 可看做 0 运算。</p></li></ul><h2 id="其他类型转换为-Boolean"><a href="#其他类型转换为-Boolean" class="headerlink" title="其他类型转换为 Boolean"></a>其他类型转换为 Boolean</h2><p>其他的数据类型都可以转换为 Boolean类型。情况如下：</p><ul><li><p>情况一：数字 –&gt; 布尔。除了 0 和 NaN，其余的都是 true。也就是说，<code>Boolean(NaN)</code>的结果是 false。</p></li><li><p>情况二：字符串 —&gt; 布尔。除了空串，其余的都是 true。全是空格的字符串，转换结果也是 true。字符串<code>'0'</code>的转换结果也是 true。</p></li><li><p>情况三：null 和 undefined 都会转换为 false。</p></li><li><p><strong>情况四：引用数据类型会转换为 true。注意，空数组<code>[]</code>和空对象<code>{}</code>，转换结果也是 true，这个一点，很多人都不知道。</strong></p></li></ul><p>PS：转换为 Boolean 的这几种情况，<strong>很重要</strong>，开发中会经常用到。</p><h2 id="知识补充：其他进制的数字"><a href="#知识补充：其他进制的数字" class="headerlink" title="知识补充：其他进制的数字"></a>知识补充：其他进制的数字</h2><ul><li><p>16 进制的数字，以<code>0x</code>开头</p></li><li><p>8 进制的数字，以<code>0</code>开头</p></li><li><p>2 进制的数字，<code>0b</code>开头（不是所有的浏览器都支持：chrome 和火狐支持，IE 不支持）</p></li></ul><p>比如<code>070</code>这个字符串，如果我调用 parseInt()转成数字时，有些浏览器会当成 8 进制解析，有些会当成 10 进制解析。</p><p><strong>所以，比较建议的做法是：可以在 parseInt()中传递第二个参数，来指定当前数字的进制。</strong>例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"070"</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将 070 当成八进制来看待，转换结果为十进制。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：56。这个地方要好好理解。</span></code></pre><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>重点：<strong>隐式类型转换，内部调用的都是显式类型的方法</strong>。下面来详细介绍。</p><h3 id="isNaN-函数"><a href="#isNaN-函数" class="headerlink" title="isNaN() 函数"></a>isNaN() 函数</h3><p>语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">isNaN</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：判断指定的参数是否为 NaN（非数字类型），返回结果为 Boolean 类型。也就是说：<strong>任何不能被转换为数值的参数，都会让这个函数返回 true</strong>。</p><p><strong>执行过程</strong>：</p><p>（1）先调用<code>Number(参数)</code>函数；</p><p>（2）然后将<code>Number(参数)</code>的返回结果和<code>NaN</code>进行比较。</p><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回结果：false。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回结果：true。因为 Number('abc') 的返回结果是 NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回结果：false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回结果：true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回结果：true</span></code></pre><h5 id="任何值和NaN做运算的结果都是NaN。"><a href="#任何值和NaN做运算的结果都是NaN。" class="headerlink" title="任何值和NaN做运算的结果都是NaN。"></a>任何值和NaN做运算的结果都是NaN。</h5><h3 id="非布尔值的与或运算【重要】"><a href="#非布尔值的与或运算【重要】" class="headerlink" title="非布尔值的与或运算【重要】"></a>非布尔值的与或运算【重要】</h3><blockquote><p>之所以重要，是因为在实际开发中，我们经常用这种代码做容错处理或者兜底处理。</p></blockquote><p>非布尔值进行<strong>与或运算</strong>时，会先将其转换为布尔值，然后再运算，但返回结果是<strong>原值</strong>。比如说：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运算过程：true &amp;&amp; true;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result：'</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：6（也就是说最后面的那个值。）</span></code></pre><p>上方代码可以看到，虽然运算过程为布尔值的运算，但返回结果是原值。</p><p>那么，返回结果是哪个原值呢？我们来看一下。</p><p><strong>与运算</strong>的返回结果：（以多个非布尔值的运算为例）</p><ul><li><p>如果第一个值为false，则执行第一条语句，并直接返回第一个值；不会再往后执行。</p></li><li><p>如果第一个值为true，则继续执行第二条语句，并返回第二个值（如果所有的值都为true，则返回的是最后一个值）。</p></li></ul><p><strong>或运算</strong>的返回结果：（以多个非布尔值的运算为例）</p><ul><li><p>如果第一个值为true，则执行第一条语句，并直接返回第一个值；不会再往后执行。</p></li><li><p>如果第一个值为false，则继续执行第二条语句，并返回第二个值（（如果所有的值都为false，则返回的是最后一个值）。</p></li></ul><p>实际开发中，我们经常是这样来做「容错处理」的：</p><p>当前端成功调用一个接口后，返回的数据为 result 对象。这个时候，我们用变量 a 来接收 result 里的图片资源。通常的写法是这样的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>resultCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>imgUrl <span class="token operator">||</span> <span class="token string">'http://img.smyhvae.com/20160401_01.jpg'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上方代码的意思是，获取返回结果中的<code>result.data.imgUrl</code>这个图片资源；如果返回结果中没有 <code>result.data.imgUrl</code> 这个字段，就用 <code>http://img.smyhvae.com/20160401_01.jpg</code> 作为<strong>兜底</strong>图片。这种写法，在实际开发中经常用到。</p><h3 id="短路运算的妙用【重要】"><a href="#短路运算的妙用【重要】" class="headerlink" title="短路运算的妙用【重要】"></a>短路运算的妙用【重要】</h3><blockquote><p>下方举例中的写法技巧，在实际开发中，经常用到。这种写法，是一种很好的「容错、容灾、降级」方案，需要多看几遍。</p></blockquote><p>1、JS中的<code>&amp;&amp;</code>属于<strong>短路</strong>的与：</p><ul><li><p>如果第一个值为false，则不会执行后面的内容。</p></li><li><p>如果第一个值为 true，则继续执行第二条语句，并返回第二个值。</p></li></ul><p>举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个值为true，会继续执行后面的内容</span>a1 <span class="token operator">&amp;&amp;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'看 a1 出不出来'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以弹出 alert 框</span><span class="token keyword">const</span> a2 <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个值为false，不会继续执行后面的内容</span>a2 <span class="token operator">&amp;&amp;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'看 a2 出不出来'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会弹出 alert 框</span></code></pre><p>2、JS中的<code>||</code>属于<strong>短路</strong>的或：</p><ul><li><p>如果第一个值为true，则不会执行后面的内容。</p></li><li><p>如果第一个值为 false，则继续执行第二条语句，并返回第二个值。</p></li></ul><p>举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求接口时，后台返回的内容</span><span class="token keyword">let</span> errorMsg <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前端的文案提示</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>retCode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接口返回异常码时</span>    errorMsg <span class="token operator">=</span> result<span class="token punctuation">.</span>msg <span class="token operator">||</span> <span class="token string">'活动太火爆，请稍后再试'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文案提示信息，优先用 接口返回的msg字段，其次用 '活动太火爆，请稍后再试' 这个文案兜底。</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接口挂掉时</span>    errorMsg <span class="token operator">=</span> <span class="token string">'网络异常，请稍后再试'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="非数值的比较"><a href="#非数值的比较" class="headerlink" title="非数值的比较"></a>非数值的比较</h2><p>（1）对于非数值进行比较时，会将其转换为数字然后再比较。</p><p>举例如下：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//console.log(10 > null); //true</span><span class="token comment" spellcheck="true">//任何值和NaN做任何比较都是false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p><strong>（2）特殊情况：如果符号两侧的值都是字符串时，不会将其转换为数字进行比较。比较两个字符串时，比较的是字符串的Unicode编码。【非常重要，这里是个大坑，很容易踩到】</strong></p><p>比较字符编码时，是一位一位进行比较。如果两位一样，则比较下一位。</p><p>比如说，当你尝试去比较<code>"123"</code>和<code>"56"</code>这两个字符串时，你会发现，字符串”56”竟然比字符串”123”要大（因为 5 比 1 大）。也就是说，下面这样代码的打印结果，其实是true:（这个我们一定要注意，在日常开发中，很容易忽视）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 比较两个字符串时，比较的是字符串的字符编码，所以可能会得到不可预期的结果</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"56"</span> <span class="token operator">></span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>因此</strong>：当我们在比较两个字符串型的数字时，<strong>一定一定要先转型</strong>再比较大小，比如 <code>parseInt()</code>。</p><p>（3）任何值和NaN做任何比较都是false。</p><h3 id="符号的强调"><a href="#符号的强调" class="headerlink" title="==符号的强调"></a><code>==</code>符号的强调</h3><p>注意<code>==</code>这个符号，它是<strong>判断是否等于</strong>，而不是赋值。</p><p>（1）<code>==</code>这个符号，还可以验证字符串是否相同。例如：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你中国"</span> <span class="token operator">==</span> <span class="token string">"我爱你中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果为true</span></code></pre><p>（2）<code>==</code>这个符号并不严谨，会做隐式转换，将不同的数据类型，<strong>转为相同类型</strong>进行比较（大部分情况下，都是转换为数字）。例如：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6"</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印结果：true。这里的字符串"6"会先转换为数字6，然后再进行比较</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 打印结果：true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 打印结果：true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 打印结果：false</span></code></pre><p>（3）undefined 衍生自 null，所以这两个值做相等判断时，会返回true。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印结果：true。</span></code></pre><p>（4）NaN不和任何值相等，包括他本身。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><p>问题：那如果我想判断  b的值是否为NaN，该怎么办呢？</p><p>答案：可以通过isNaN()函数来判断一个值是否是NaN。举例：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上方代码所示，如果 b 为 NaN，则返回true；否则返回false。</p><h3 id="全等符号的强调"><a href="#全等符号的强调" class="headerlink" title="===全等符号的强调"></a><code>===</code>全等符号的强调</h3><p><strong>全等在比较时，不会做类型转换</strong>。如果要保证<strong>绝对等于（完全等于）</strong>，我们就要用三个等号<code>===</code>。例如：</p><pre class=" language-javascript"><code class="language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6"</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//true</span></code></pre><p>上述内容分析出：</p><ul><li><p><code>==</code>两个等号，不严谨，”6”和6是true。</p></li><li><p><code>===</code>三个等号，严谨，”6”和6是false。</p></li></ul><p>另外还有：<strong><code>==</code>的反面是<code>!=</code>，<code>===</code>的反面是<code>!==</code></strong>。例如：</p><pre class=" language-javascript"><code class="language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false，因为3=="3"是true，所以反过来就是false。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">!==</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true，应为3==="3"是false，所以反过来是true。</span></code></pre><h2 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h2><blockquote><p>这一段中，我们来讲引申的内容：Unicode编码的使用。</p></blockquote><p>各位同学可以先在网上查一下“Unicode 编码表”。</p><p>1、在字符串中可以使用转义字符输入Unicode编码。格式如下：</p><pre><code>\u四位编码</code></pre><p>举例如下：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u2600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里的 2600 采用的是16进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u2602"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里的 2602 采用的是16进制。</span></code></pre><p>打印结果：</p><p><img src="http://img.smyhvae.com/20181222_1218.png" alt=""></p><p>2、我们还可以在 HTML 网页中使用Unicode编码。格式如下：</p><pre><code>&amp;#四位编码;</code></pre><p>PS：我们知道，Unicode编码采用的是16进制，但是，这里的编码需要使用10进制。</p><p>举例如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#9860;">&amp;#9860;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>打印结果：</p><p><img src="http://img.smyhvae.com/20181222_1226.png" alt=""></p><h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><h3 id="switch-和-case-后面的值"><a href="#switch-和-case-后面的值" class="headerlink" title="switch 和 case 后面的值"></a>switch 和 case 后面的值</h3><p>switch 后面的<strong>括号里</strong>可以是<strong>表达式</strong>或者<strong>值</strong>， 通常是一个<strong>变量</strong>（通常做法是：先把表达式或者值存放到变量中）。</p><p>JS 是属于弱类型语言，case 后面的<code>值1</code>、<code>值2</code>可以是 <code>'a'</code>、<code>6</code>、<code>true</code> 等任意数据类型的值，也可以是<strong>表达式</strong>。注意，在这里，<strong>字符串<code>'6'</code>和 数字 <code>6</code> 是不一样的</strong>。</p><h3 id="switch-语句的结束条件【非常重要】"><a href="#switch-语句的结束条件【非常重要】" class="headerlink" title="switch 语句的结束条件【非常重要】"></a>switch 语句的结束条件【非常重要】</h3><ul><li><p>情况 a：遇到 break 就结束，而不是遇到 default 就结束。（因为 break 在此处的作用就是退出 switch 语句）</p></li><li><p>情况 b：执行到程序的末尾就结束。</p></li></ul><p>我们来看下面的两个例子就明白了。</p><h3 id="case-穿透"><a href="#case-穿透" class="headerlink" title="case 穿透"></a>case 穿透</h3><p>switch 语句中的<code>break</code>可以省略，但一般不建议（对于新手而言）。否则结果可能不是你想要的，会出现一个现象：<strong>case 穿透</strong>。</p><p>当然，如果你能利用好 case 穿透，会让代码些得十分优雅。</p><p><strong>举例 1</strong>：（case 穿透的情况）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//switch判断语句</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期一'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期二'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期六'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期日'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你输入的数据有误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上方代码的运行结果，可能会令你感到意外：</p><pre><code>星期四星期五星期六</code></pre><p>上方代码的解释：因为在 case 4 和 case 5 中都没有 break，那语句走到 case 6 的 break 才会停止。</p><p><strong>举例 2</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//switch判断语句</span><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是defaul语句'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// break;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二个呵呵:'</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三个呵呵:'</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第四个呵呵:'</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上方代码的运行结果，你也许会意外：</p><pre><code>我是defaul语句第二个呵呵:5第三个呵呵:5</code></pre><p>上方代码的解释：代码走到 default 时，因为没有遇到 break，所以会继续往下走，直到遇见 break 或者走到程序的末尾。 从这个例子可以看出：<strong>switch 语句的结束与 default 的顺序无关。</strong></p><h2 id="switch-语句的实战举例：替换-if-语句"><a href="#switch-语句的实战举例：替换-if-语句" class="headerlink" title="switch 语句的实战举例：替换 if 语句"></a>switch 语句的实战举例：替换 if 语句</h2><p>我们实战开发中，经常需要根据接口的返回码 retCode ，来让前端做不同的展示。</p><p>这种场景是业务开发中经常出现的，请一定要掌握。然而，很多人估计会这么写：</p><h3 id="写法-1（不推荐。这种写法太挫了）"><a href="#写法-1（不推荐。这种写法太挫了）" class="headerlink" title="写法 1（不推荐。这种写法太挫了）"></a>写法 1（不推荐。这种写法太挫了）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> retCode <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回码 retCode 的值可能有很多种情况</span><span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'接口联调成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">103</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动未开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">104</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动已结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'参数错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1002</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'接口频率限制'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1003</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其他异常返回码</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'系统君失联了，请稍候再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你是按照上面的 <code>if else</code>的方式来写各种条件判断，说明你的代码水平太初级了，会被人喷的，千万不要这么写。这种写法，容易导致<strong>嵌套太深，可读性很差</strong>。</p><p>那要怎么改进呢？继续往下看。</p><h3 id="写法-2（推荐。通过-return-的方式，将上面的写法进行改进）"><a href="#写法-2（推荐。通过-return-的方式，将上面的写法进行改进）" class="headerlink" title="写法 2（推荐。通过 return 的方式，将上面的写法进行改进）"></a>写法 2（推荐。通过 return 的方式，将上面的写法进行改进）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> retCode <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回码 retCode 的值可能有很多种情况</span><span class="token function">handleRetCode</span><span class="token punctuation">(</span>retCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法：根据接口不同的返回码，处理前端不同的显示状态</span><span class="token keyword">function</span> <span class="token function">handleRetCode</span><span class="token punctuation">(</span>retCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'接口联调成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">103</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动未开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">104</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动已结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'参数错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1002</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'接口频率限制'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1003</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retCode <span class="token operator">==</span> <span class="token number">1004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 其他异常返回码</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'系统君失联了，请稍候再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的写法 2，是比较推荐的写法：直接通过 return 的方式，让 function 里的代码不再继续往下走，这就达到目的了。对了，因为要用到 return ，所以需要单独封装到一个 function 里面。</p><p>如果你以后看到有前端小白采用的是<strong>写法 1</strong>，请一定要把<strong>写法 2</strong>传授给他：不需要那么多的 if else，直接用 return 返回就行了。</p><h3 id="写法-3（推荐。将-if-else-改为-switch）"><a href="#写法-3（推荐。将-if-else-改为-switch）" class="headerlink" title="写法 3（推荐。将 if else 改为 switch）"></a>写法 3（推荐。将 if else 改为 switch）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> retCode <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回码 retCode 的值可能有很多种情况</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>retCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'接口联调成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">101</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">103</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动未开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">104</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'活动已结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1001</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'参数错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1002</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'接口频率限制'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1003</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1004</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其他异常返回码</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'系统君失联了，请稍候再试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在实战开发中，方式 3 是非常推荐的写法，甚至比方式 2 还要好。我们尽量不要写太多的 if 语句，避免代码嵌套过深。</p><h3 id="switch-语句的优雅写法：适时地去掉-break"><a href="#switch-语句的优雅写法：适时地去掉-break" class="headerlink" title="switch 语句的优雅写法：适时地去掉 break"></a>switch 语句的优雅写法：适时地去掉 break</h3><p>我们先来看看下面这段代码：（不推荐）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'relax'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'relax'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的代码，咋一看，好像没啥毛病。但你有没有发现，重复代码太多了？</p><p>实战开发中，凡是有重复的地方，我们都必须要想办法简化。写代码就是在不断重构的过程。</p><p>上面的代码，可以改进如下：（推荐，非常优雅）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里放一个 break</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'relax'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里放一个 break</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你没看错，就是上面的这种写法，能达到同样的效果，非常优雅。</p><p>小白可能认为这样的写法可读性不强，所以说他是小白。我可以明确告诉你，改进后的这种写法，才是最优雅的、最简洁、可读性最好的。</p><h3 id="while-循环和-do…while-循环的区别"><a href="#while-循环和-do…while-循环的区别" class="headerlink" title="while 循环和 do…while 循环的区别"></a>while 循环和 do…while 循环的区别</h3><p>这两个语句的功能类似，不同的是：</p><ul><li>while 是先判断后执行，而 do…while 是先执行后判断。</li></ul><p>也就是说，do…while 可以保证循环体至少执行一次，而 while 不能。</p><h3 id="while-循环举例"><a href="#while-循环举例" class="headerlink" title="while 循环举例"></a>while 循环举例</h3><p><strong>题目</strong>：假如投资的年利率为 5%，试求从 1000 块增长到 5000 块，需要花费多少年？</p><p><strong>代码实现</strong>：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">/*             * 假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年             *             * 1000 1000*1.05             * 1050 1050*1.05             */</span>            <span class="token comment" spellcheck="true">//定义一个变量，表示当前的钱数</span>            <span class="token keyword">var</span> money <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义一个计数器</span>            <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义一个while循环来计算每年的钱数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                money <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">1.05</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使count自增</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'一共需要'</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">'年'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>打印结果：</p><pre><code>5003.18854203379一共需要33年</code></pre><p>另外，你也可以自己算一下，假如投资的年利率为 5%，从 1000 块增长到 1 万块，需要花费 48 年：</p><pre><code>10401.269646942128一共需要48年</code></pre><h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><blockquote><p>这个知识点非常重要。</p></blockquote><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul><li><p>break 可以用来退出 switch 语句或退出<strong>整个</strong>循环语句（循环语句包括 for 循环、while 循环。不包括 if。if 里不能用 break 和 continue，否则会报错）。</p></li><li><p>break 会立即终止离它<strong>最近</strong>的那个循环语句。</p></li><li><p><strong>可以为循环语句创建一个 label，来标识当前的循环（格式：label:循环语句）。使用 break 语句时，可以在 break 后跟着一个 label，这样 break 将会结束指定的循环，而不是最近的。</strong></p></li></ul><p><strong>举例 1</strong>：通过 break 终止循环语句</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i的值:'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意，虽然在 if 里 使用了 break，但这里的 break 是服务于外面的 for 循环。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印结果：</p><pre><code>i的值:0i的值:1i的值:2</code></pre><p><strong>举例 2</strong>：label 的使用</p><pre class=" language-javascript"><code class="language-javascript">outer<span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'外层循环 i 的值：'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span> outer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接跳出outer所在的外层循环（这个outer是我自定义的label）</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'内层循环 j 的值:'</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印结果：</p><pre><code>外层循环 i 的值：0</code></pre><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul><li><p>continue 可以用来跳过<strong>当次</strong>循环，继续下一次循环。</p></li><li><p>同样，continue 默认只会离他<strong>最近</strong>的循环起作用。</p></li><li><p>同样，如果需要跳过指定的当次循环，可以使用 label 标签。</p></li></ul><p>举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i的值:'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印结果：</p><pre><code>i的值:1i的值:3i的值:5i的值:7i的值:9</code></pre><h2 id="对象传值和传址的区别"><a href="#对象传值和传址的区别" class="headerlink" title="对象传值和传址的区别"></a>对象传值和传址的区别</h2><h3 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h3><p>代码举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 b 赋值给 a</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改 b 的值</span></code></pre><p>上方代码中，当我修改 b 的值之后，a 的值并不会发生改变。这个大家都知道。我们继续往下看。</p><h3 id="传址（一个经典的例子）"><a href="#传址（一个经典的例子）" class="headerlink" title="传址（一个经典的例子）"></a>传址（一个经典的例子）</h3><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"孙悟空"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 obj1 的地址赋值给 obj2。从此， obj1 和 obj2 指向了同一个堆内存空间</span><span class="token comment" spellcheck="true">//修改obj2的name属性</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"猪八戒"</span><span class="token punctuation">;</span></code></pre><p>上面的代码中，当我修改 obj2 的name属性后，会发现，obj1 的 name 属性也会被修改。因为obj1和obj2指向的是堆内存中的同一个地址。</p><p>这个例子要尤其注意，实战开发中，很容易忽略。</p><p>对于引用类型的数据，赋值相当于地址拷贝，a、b指向了同一个堆内存地址。所以改了b，a也会变；本质上a、b就是一个东西。</p><p>如果你打算把引用类型 A 的值赋值给 B，让A和B相互不受影响的话，可以通过 Object.assign() 来复制对象。效果如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'孙悟空'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 复制对象：把 obj1 赋值给 obj3。两者之间互不影响</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p>1.内置对象：</p><ul><li><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用</p></li><li><p>比如：Object、Math、Date、String、Array、Number、Boolean、Function等。</p></li></ul><p>2.宿主对象：</p><ul><li><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象。</p></li><li><p>比如 BOM DOM。比如<code>console</code>、<code>document</code>。</p></li></ul><p>3.自定义对象：</p><ul><li>由开发人员自己创建的对象</li></ul><p>通过 new 关键字创建出来的对象实例，都是属于对象类型，比如Object、Array、Date等。</p><p><strong>JavaScript的内置对象</strong>：</p><table><thead><tr><th align="left">内置对象</th><th align="left">对象说明</th></tr></thead><tbody><tr><td align="left">Arguments</td><td align="left">函数参数集合</td></tr><tr><td align="left">Array</td><td align="left">数组</td></tr><tr><td align="left">Boolean</td><td align="left">布尔对象</td></tr><tr><td align="left">Math</td><td align="left">数学对象</td></tr><tr><td align="left">Date</td><td align="left">日期时间</td></tr><tr><td align="left">Error</td><td align="left">异常对象</td></tr><tr><td align="left">Function</td><td align="left">函数构造器</td></tr><tr><td align="left">Number</td><td align="left">数值对象</td></tr><tr><td align="left">Object</td><td align="left">基础对象</td></tr><tr><td align="left">RegExp</td><td align="left">正则表达式对象</td></tr><tr><td align="left">String</td><td align="left">字符串对象</td></tr></tbody></table><h2 id="基本数据类型不能绑定属性和方法"><a href="#基本数据类型不能绑定属性和方法" class="headerlink" title="基本数据类型不能绑定属性和方法"></a>基本数据类型不能绑定属性和方法</h2><p>属性和方法只能添加给对象，不能添加给基本数据类型。</p><p><strong>1、基本数据类型：</strong></p><p>注意，基本数据类型<code>string</code>是<strong>无法绑定属性和方法</strong>的。比如说：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span>aaa <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印结果为：string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印结果为：undefined</span></code></pre><p>上方代码中，当我们尝试打印<code>str.aaa</code>的时候，会发现打印结果为：undefined。也就是说，不能给 <code>string</code> 绑定属性和方法。</p><p>当然，我们可以打印 str.length、str.indexOf(“m”)等等。因为这两个方法的底层做了数据类型转换（<strong>临时</strong>将 <code>string</code> 字符串转换为 <code>String</code> 对象，然后再调用内置方法），也就是我们在上一段中讲到的<strong>包装类</strong>。</p><p><strong>2、引用数据类型：</strong></p><p>引用数据类型<code>String</code>是可以绑定属性和方法的。如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'smyhvae'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strObj<span class="token punctuation">.</span>aaa <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strObj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> strObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印结果：Object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strObj<span class="token punctuation">.</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><p><img src="http://img.smyhvae.com/20180202_1351.png" alt=""></p><p>内置对象 Number 也有一些自带的方法，比如：</p><ul><li><p>Number.MAX_VALUE;</p></li><li><p>Number.MIN_VALUE;</p></li></ul><p>内置对象 Boolean 也有一些自带的方法，但是用的不多。</p><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们都知道，js 中的数据类型包括以下几种。</p><ul><li><p>基本数据类型：String、Number、Boolean、Null、Undefined</p></li><li><p>引用数据类型：Object</p></li></ul><p>JS 为我们提供了三个<strong>基本包装类型</strong>：</p><ul><li><p>String()：将基本数据类型字符串，转换为 String 对象。</p></li><li><p>Number()：将基本数据类型的数字，转换为 Number 对象。</p></li><li><p>Boolean()：将基本数据类型的布尔值，转换为 Boolean 对象。</p></li></ul><p>通过上面这这三个包装类，我们可以<strong>将基本数据类型的数据转换为对象</strong>。</p><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'qianguyihao'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意，打印结果：object</span></code></pre><p><strong>需要注意的是</strong>：我们在实际应用中一般不会使用基本数据类型的对象。如果使用基本数据类型的对象，在做一些比较时可能会带来一些<strong>不可预期</strong>的结果。</p><p>比如说：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> boo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boo1 <span class="token operator">===</span> boo2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果竟然是：false</span></code></pre><p>再比如说：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> boo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>boo3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'qianguyihao'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行代码竟然执行了</span><span class="token punctuation">}</span></code></pre><p>显然，使用 typeof 去检查类型时，</p><h3 id="基本包装类型的作用"><a href="#基本包装类型的作用" class="headerlink" title="基本包装类型的作用"></a>基本包装类型的作用</h3><p>当我们对一些基本数据类型的值去调用属性和方法时，浏览器会<strong>临时使用包装类将基本数据类型转换为引用数据类型</strong>，这样的话，基本数据类型就有了属性和方法，然后再调用对象的属性和方法；调用完以后，再将其转换为基本数据类型。</p><p>举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：11</span></code></pre><p>比如，上面的代码，执行顺序是这样的：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 步骤（1）：把简单数据类型 string 转换为 引用数据类型  String，保存到临时变量中</span><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'qianguyihao'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 步骤（2）：把临时变量的值 赋值给 str</span>str <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  步骤（3）：销毁临时变量</span>temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><h2 id="在底层，字符串以字符数组的形式保存"><a href="#在底层，字符串以字符数组的形式保存" class="headerlink" title="在底层，字符串以字符数组的形式保存"></a>在底层，字符串以字符数组的形式保存</h2><p>在底层，字符串是以字符数组的形式保存的。代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'smyhvae'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取字符串的长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取字符串中的第2个字符</span></code></pre><p>上方代码中，<code>smyhvae</code>这个字符串在底层是以<code>["s", "m", "y", "h", "v", "a", "e"]</code>的形式保存的。因此，我们既可以获取字符串的长度，也可以获取指定索引 index 位置的单个字符。这很像数组中的操作。</p><p>再比如，String 对象的很多内置方法，也可以直接给字符串用。此时，也是临时将字符串转换为 String 对象，然后再调用内置方法。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="使用构造函数创建数组"><a href="#使用构造函数创建数组" class="headerlink" title="使用构造函数创建数组"></a>使用构造函数创建数组</h3><p>语法：</p><pre><code>let arr = new Array(参数);let arr = Array(参数);</code></pre><p><strong>如果参数为空，则表示创建一个空数组；如果参数是一个数值时，表示数组的长度；如果有多个参数时，表示数组中的元素。</strong></p><p>来举个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式二</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为空</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为一个数值</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为多个数值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr1 = '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr2 = '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr3 = '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr4 = '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class=" language-javascript"><code class="language-javascript">object<span class="token punctuation">;</span>arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>从上方打印结果的第一行里，可以看出，数组的类型其实也是属于<strong>对象</strong>。</p><h3 id="数组中的元素的类型"><a href="#数组中的元素的类型" class="headerlink" title="数组中的元素的类型"></a>数组中的元素的类型</h3><p>数组中可以存放<strong>任意类型</strong>的数据，例如字符串、数字、布尔值、对象等。</p><p>比如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'qianguyihao'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'qianguyihao'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>我们甚至还可以存放<strong>多维数组</strong>（数组里面放数组）。比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h3><p>语法：</p><pre class=" language-javascript"><code class="language-javascript">数组<span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>如果读取不存在的索引（比如元素没那么多），系统不会报错，而是返回 undefined。</strong></p><p><strong>对于连续的数组，使用 length 可以获取到数组的长度（元素的个数）；对于非连续的数组，使用 length 会获取到数组的最大的索引+1。因此，尽量不要创建非连续的数组。</strong></p><h3 id="修改数组的长度（修改-length）"><a href="#修改数组的长度（修改-length）" class="headerlink" title="修改数组的长度（修改 length）"></a>修改数组的长度（修改 length）</h3><ul><li><p>如果修改的 length 大于原长度，则多出部分会空出来，置为 null。</p></li><li><p>如果修改的 length 小于原长度，则多出的元素会被删除，数组将从后面删除元素。</p></li><li><p>（特例：伪数组 arguments 的长度可以修改，但是不能修改里面的元素，后面单独讲。）</p></li></ul><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改数组 arr1 的 length</span>arr1<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改数组 arr2 的 length</span>arr2<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="Array-from-：将伪数组转换为真数组"><a href="#Array-from-：将伪数组转换为真数组" class="headerlink" title="Array.from()：将伪数组转换为真数组"></a>Array.from()：将伪数组转换为真数组</h2><p><strong>语法</strong>：</p><pre class=" language-javascript"><code class="language-javascript">array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>作用</strong>：将<strong>伪数组</strong>或可遍历对象转换为<strong>真数组</strong>。</p><p>代码举例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果是数组：["q","i","a","n","g","u","y","i","h","a","o"]</span></code></pre><h3 id="伪数组与真数组的区别"><a href="#伪数组与真数组的区别" class="headerlink" title="伪数组与真数组的区别"></a>伪数组与真数组的区别</h3><p><strong>伪数组</strong>：包含 length 属性的对象或可迭代的对象。</p><p>另外，伪数组的原型链中没有 Array.prototype，而真数组的原型链中有 Array.prototype。因此伪数组没有数组的一般方法，比如 pop()、join() 等方法。</p><h3 id="伪数组举例"><a href="#伪数组举例" class="headerlink" title="伪数组举例"></a>伪数组举例</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> btnArray <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btnArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btnArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>上面的布局中，有三个 button 标签，我们通过<code>getElementsByTagName</code>获取到的<code>btnArray</code>实际上是<strong>伪数组</strong>，并不是真实的数组：</p><p><img src="http://img.smyhvae.com/20180402_1116.png" alt=""></p><p>既然<code>btnArray</code>是伪数组，它就不能使用数组的一般方法，否则会报错：</p><p><img src="http://img.smyhvae.com/20180402_1121.png" alt=""></p><p>解决办法：采用<code>Array.from</code>方法将<code>btnArray</code>这个伪数组转换为真数组即可：</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>btnArray<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后就可以使用数组的一般方法了：</p><p><img src="http://img.smyhvae.com/20180402_1125.png" alt=""></p><h2 id="Array-of-：创建数组"><a href="#Array-of-：创建数组" class="headerlink" title="Array.of()：创建数组"></a>Array.of()：创建数组</h2><p><strong>语法</strong>：</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>作用</strong>：根据参数里的内容，创建数组。</p><p><strong>举例</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果是数组：[1, "abc", true]</span></code></pre><p><strong>补充：<code>new Array()</code>和 <code>Array.of()</code>的区别在于：当参数只有一个时，前者表示数组的长度，后者表示数组中的内容。</strong></p><h3 id="数组合并的另一种方式"><a href="#数组合并的另一种方式" class="headerlink" title="数组合并的另一种方式"></a><strong>数组合并的另一种方式</strong></h3><p>我们可以使用<code>...</code>这种展开语法，将两个数组进行合并。举例如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：["a","b","c",1,2,3]</span></code></pre><h2 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h2><blockquote><p>sort()方法需要好好理解。</p></blockquote><p><code>sort()</code>：对数组的元素进行从小到大来排序（会改变原来的数组）。</p><h3 id="sort-方法：无参时"><a href="#sort-方法：无参时" class="headerlink" title="sort()方法：无参时"></a>sort()方法：无参时</h3><p>如果在使用 sort() 方法时不带参，则默认按照<strong>Unicode 编码</strong>，从小到大进行排序。</p><p><strong>举例 1</strong>：（当数组中的元素为字符串时）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将数组 arr1 进行排序</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr1 ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre><code>    arr1 =["a","b","c","d","e","f"]    result =["a","b","c","d","e","f"]</code></pre><p>从上方的打印结果中，我们可以看到，<strong>sort 方法会改变原数组，而且方法的返回值也是同样的结果。</strong></p><p><strong>举例 2</strong>：（当数组中的元素为数字时）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将数组 arr2 进行排序</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr2 ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre><code>arr2 =[1,11,2,3,4,5]result =[1,11,2,3,4,5]</code></pre><p>上方的打印结果中，你会发现，使用 sort() 排序后，数字<code>11</code>竟然在数字<code>2</code>的前面。这是为啥呢？因为上面讲到了，<code>sort()</code>方法是按照<strong>Unicode 编码</strong>进行排序的。</p><p>那如果我想让 arr2 里的数字，完全按照从小到大排序，怎么操作呢？继续往下看。</p><h3 id="sort-方法：带参时，自定义排序规则"><a href="#sort-方法：带参时，自定义排序规则" class="headerlink" title="sort()方法：带参时，自定义排序规则"></a>sort()方法：带参时，自定义排序规则</h3><p>如果在 sort()方法中带参，我们就可以<strong>自定义</strong>排序规则。具体做法如下：</p><p>我们可以在 sort()添加一个回调函数，来指定排序规则。回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参去调用回调函数。</p><p>浏览器根据回调函数的返回值来决定元素的排序：（重要）</p><ul><li><p>如果返回一个大于 0 的值，则元素会交换位置</p></li><li><p><strong>如果返回一个小于 0 的值，则元素位置不变</strong></p></li><li><p>如果返回一个等于 0 的值，则认为两个元素相等，则不交换位置</p></li></ul><p>如果只是看上面的文字，可能不太好理解，我们来看看下面的例子，你肯定就能明白。</p><h3 id="举例：将数组中的数字按照从小到大排序"><a href="#举例：将数组中的数字按照从小到大排序" class="headerlink" title="举例：将数组中的数字按照从小到大排序"></a>举例：将数组中的数字按照从小到大排序</h3><p><strong>写法 1</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义排序规则</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 a 大于 b，则交换 a 和 b 的位置</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 a 小于 b，则位置不变</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 a 等于 b，则位置不变</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class=" language-javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>上方代码的写法太啰嗦了，其实也可以简化为如下写法：</p><p><strong>写法 2</strong>：（冒泡排序）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义排序规则</span><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 升序排列</span>    <span class="token comment" spellcheck="true">// return b - a; // 降序排列</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果不变。</p><p>上方代码还可以写成 ES6 的形式，也就是将 function 改为箭头函数，其写法如下。</p><p><strong>写法 3</strong>：（箭头函数）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义排序规则</span><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 升序排列</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上方代码，因为函数体内只有一句话，所以可以去掉 return 语句，继续简化为如下写法。</p><p><strong>写法 4</strong>：（推荐）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义排序规则：升序排列</span><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result ='</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的各种写法中，写法 4 是我们在实战开发中用得最多的。</p><p>为了确保代码的简洁优雅，接下来的代码中，凡是涉及到函数，我们将尽量采用 ES6 中的箭头函数来写。</p><h3 id="sort-方法举例：将数组从小到大排序"><a href="#sort-方法举例：将数组从小到大排序" class="headerlink" title="sort 方法举例：将数组从小到大排序"></a>sort 方法举例：将数组从小到大排序</h3><p>将数组从小到大排序，这个例子很常见。但在实际开发中，总会有一些花样。</p><p>下面这段代码，在实际开发中，经常用到，一定要掌握。完整代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">let</span> dataList <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'品牌鞋子，高品质低价入手'</span><span class="token punctuation">,</span>                    publishTime<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'不是很贵，但是很暖'</span><span class="token punctuation">,</span>                    publishTime<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'无法拒绝的美食，跟我一起吃吃'</span><span class="token punctuation">,</span>                    publishTime<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'qianguyihao 排序前的数组：'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将dataList 数组，按照 publishTime 字段，从小到大排序。（会改变原数组）</span>            dataList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>publishTime<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>publishTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'qianguyihao 排序后的数组：'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>打印结果：</p><pre><code>qianguyihao 排序前的数组：[    {"title":"品牌鞋子，高品质低价入手","publishTime":200},    {"title":"不是很贵，但是很暖","publishTime":100},    {"title":"无法拒绝的美食，跟我一起吃吃","publishTime":300}]qianguyihao 排序后的数组：[    {"title":"不是很贵，但是很暖","publishTime":100},    {"title":"品牌鞋子，高品质低价入手","publishTime":200},    {"title":"无法拒绝的美食，跟我一起吃吃","publishTime":300}]</code></pre><p>上方代码中，有人可能会问： publishTime 字段已经是 int 类型了，为啥在排序前还要做一次 parseInt() 转换？这是因为，这种数据，一般是后台接口返回给前端的，数据可能是 int 类型、也可能是字符串类型，所以还是统一先做一次 partInt() 比较保险。这是一种良好的工作习惯。</p><h2 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h2><p>语法：</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> newItem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：对数组中每一项运行回调函数，返回该函数的结果，组成的新数组（返回的是<strong>加工之后</strong>的新数组）。不会改变原数组。</p><p>作用：对数组中的每一项进行加工。</p><p><strong>举例 1</strong>：（拷贝的过程中改变数组元素的值）</p><p>有一个已知的数组 arr1，我要求让 arr1 中的每个元素的值都加 10，这里就可以用到 map 方法。代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让arr1中的每个元素加10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><p><img src="http://img.smyhvae.com/20180402_0938.png" alt=""></p><p><strong>举例 2</strong>：【重要案例，实际开发中经常用到】</p><p>将 A 数组中某个属性的值，存储到 B 数组中。代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'千古壹号'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">'28'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'许嵩'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">'32'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将数组 arr1 中的 name 属性，存储到 数组 arr2 中</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将数组 arr1 中的 name、age这两个属性，改一下“键”的名字，存储到 arr3中</span><span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    myName<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    myAge<span class="token punctuation">:</span> item<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将数组 arr1 中的 name 属性，存储到 数组 arr2 中</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr1:'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr2:'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr3:'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre><code>arr1:[{"name":"千古壹号","age":"28"},{"name":"许嵩","age":"32"}]arr2:["千古壹号","许嵩"]arr3:[{"myName":"千古壹号","myAge":"28"},{"myName":"许嵩","myAge":"32"}]</code></pre><p>map 的应用场景，主要就是以上两种。</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>语法：</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：对数组中的<strong>每一项</strong>运行回调函数，该函数返回结果是 true 的项，将组成新的数组（返回值就是这个新的数组）。不会改变原数组。</p><p>作用：对数组进行过滤。</p><p><strong>举例 1</strong>：找出数组 arr1 中大于 4 的元素，返回一个新的数组。代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将arr1中大于4的元素返回，组成新的数组</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：[1,3,6,2,5,6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：[6,5,6]</span></code></pre><p>上方代码更简洁的写法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将arr1中大于4的元素返回，组成新的数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：[1,3,6,2,5,6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：[6,5,6]</span></code></pre><p><strong>举例 2</strong>：</p><p>获取数组 A 中指定类型的对象，放到数组 B 中。代码举例如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'许嵩'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'一线'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'周杰伦'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'过气'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'邓紫棋'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'一线'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'一线'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 筛选出一线歌手</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'许嵩'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'一线'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'邓紫棋'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'一线'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce()方法"></a>reduce()方法</h2><h3 id="reduce-语法"><a href="#reduce-语法" class="headerlink" title="reduce() 语法"></a>reduce() 语法</h3><blockquote><p>reduce 的发音：[rɪ’djuːs]。中文含义是减少，但这个方法跟“减少”没有任何关系。</p></blockquote><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。返回值是回调函数累计处理的结果。</p><p><strong>语法</strong>：</p><pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数解释：</p><ul><li><p>previousValue：必填，上一次调用回调函数时的返回值</p></li><li><p>currentValue：必填，当前正在处理的数组元素</p></li><li><p>currentIndex：选填，当前正在处理的数组元素下标</p></li><li><p>arr：选填，调用 reduce()方法的数组</p></li><li><p>initialValue：选填，可选的初始值（作为第一次调用回调函数时传给 previousValue 的值）</p></li></ul><p>在以往的数组方法中，匿名的回调函数里是传三个参数：item、index、arr。但是在 reduce() 方法中，前面多传了一个参数<code>previousValue</code>，这个参数的意思是上一次调用回调函数时的返回值。第一次执行回调函数时，previousValue 没有值怎么办？可以用 initialValue 参数传给它。</p><p>备注：绝大多数人在一开始接触 reduce() 的时候会很懵逼，但是没关系，有事没事多看几遍，自然就掌握了。如果能熟练使用 reduce() 的用法，将能替代很多其他的数组方法，并逐渐走上进阶之路，领先于他人。</p><p>为了方便理解 reduce()，我们先来看看下面的简单代码，过渡一下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">88</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre><code>01------882------883------884------885------886------</code></pre><p>上面的代码中，由于<code>return</code>的是固定值，所以 prev 打印的也是固定值（只有初始值是 0，剩下的遍历中，都是打印 88）。</p><p>现在来升级一下，实际开发中，prev 的值往往是动态变化的，这便是 reduce()的精妙之处。我们来看几个例子就明白了。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1、<strong>所有的函数，都是 <code>Fuction</code> 的“实例”</strong>（或者说是“实例对象”）。函数本质上都是通过 new Function 得到的。</p><p>2、函数既然是实例对象，那么，<strong>函数也属于“对象”</strong>。还可以通过如下特征，来佐证函数属于对象：</p><p>（1）我们直接打印某一个函数，比如 <code>console.log(fun2)</code>，发现它的里面有<code>__proto__</code>。（这个是属于原型的知识，后续再讲）</p><p>（2）我们还可以打印 <code>console.log(fun2 instanceof Object)</code>，发现打印结果为 <code>true</code>。这说明 fun2 函数就是属于 Object。</p><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><h3 id="方式1：普通函数的调用"><a href="#方式1：普通函数的调用" class="headerlink" title="方式1：普通函数的调用"></a>方式1：普通函数的调用</h3><p>函数调用的语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者：</p><pre><code>函数名.call();</code></pre><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是函数体里面的内容1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是函数体里面的内容2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span>fn2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span></code></pre><h3 id="方式2：通过对象的方法来调用"><a href="#方式2：通过对象的方法来调用" class="headerlink" title="方式2：通过对象的方法来调用"></a>方式2：通过对象的方法来调用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">,</span>    fn2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'千古壹号，永不止步!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span></code></pre><p>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的<strong>方法</strong>。</p><p>函数也可以成为对象的属性。<strong>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的方法</strong>。</p><p>调用这个函数就说调用对象的方法（method）。函数和方法，有什么本质的区别吗？它只是名称上的区别，并没有其他的区别。</p><h3 id="方式3：立即执行函数"><a href="#方式3：立即执行函数" class="headerlink" title="方式3：立即执行函数"></a>方式3：立即执行函数</h3><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是立即执行函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>立即执行函数在定义后，会自动调用。</p><p>PS：关于立即执行函数，本文的后续内容里有讲到，可以往下面翻。</p><p>上面讲到的这三种方式，是用得最多的。接下来讲到的三种方式，暂时看不懂也没关系，可以等学完其他的知识点，再回过头来看。</p><h3 id="方式4：通过构造函数来调用"><a href="#方式4：通过构造函数来调用" class="headerlink" title="方式4：通过构造函数来调用"></a>方式4：通过构造函数来调用</h3><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'千古壹号，永不止步~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种方式用得不多。</p><h3 id="方式5：绑定事件函数"><a href="#方式5：绑定事件函数" class="headerlink" title="方式5：绑定事件函数"></a>方式5：绑定事件函数</h3><p>代码举例：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是按钮，请点击我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.绑定事件</span>            btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击按钮后，要做的事情'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里涉及到DOM操作和事件的知识点，后续再讲。</p><h3 id="方式6：定时器函数"><a href="#方式6：定时器函数" class="headerlink" title="方式6：定时器函数"></a>方式6：定时器函数</h3><p>代码举例：（每间隔一秒，将 数字 加1）</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       num <span class="token operator">++</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里涉及到定时器的知识点。</p><h3 id="函数的参数：形参和实参"><a href="#函数的参数：形参和实参" class="headerlink" title="函数的参数：形参和实参"></a>函数的参数：形参和实参</h3><h3 id="实参的类型"><a href="#实参的类型" class="headerlink" title="实参的类型"></a>实参的类型</h3><p>函数的实参可以是任意的数据类型。</p><p><strong>调用函数时，解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</strong></p><h3 id="实参的数量（实参和形参的个数不匹配时）"><a href="#实参的数量（实参和形参的个数不匹配时）" class="headerlink" title="实参的数量（实参和形参的个数不匹配时）"></a>实参的数量（实参和形参的个数不匹配时）</h3><p>调用函数时，解析器也不会检查实参的数量。</p><ul><li><p><strong>如果实参的数量多于形参的数量，多余实参不会被赋值</strong>。</p></li><li><p><strong>如果实参的数量少于形参的数量，多余的形参会被定义为 undefined。表达式的运行结果为 NaN。</strong></p></li></ul><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span></code></pre><p>注意：在 JS 中，形参的默认值是 undefined。</p><h2 id="函数名、函数体和函数加载问题（重要，请记住）"><a href="#函数名、函数体和函数加载问题（重要，请记住）" class="headerlink" title="函数名、函数体和函数加载问题（重要，请记住）"></a>函数名、函数体和函数加载问题（重要，请记住）</h2><p>我们要记住：<strong>函数名 == 整个函数</strong>。举例：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">==</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义fn方法</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>我们知道，当我们在调用一个函数时，通常使用<code>函数()</code>这种格式；可如果，我们是直接使用<code>函数</code>这种格式，它的作用相当于整个函数。</p><p><strong>函数的加载问题</strong>：JS加载的时候，只加载函数名，不加载函数体。所以如果想使用内部的成员变量，需要调用函数。</p><h3 id="fn-和-fn-的区别【重要】"><a href="#fn-和-fn-的区别【重要】" class="headerlink" title="fn()  和 fn 的区别【重要】"></a>fn()  和 fn 的区别【重要】</h3><ul><li><p><code>fn()</code>：调用函数。调用之后，还获取了函数的返回值。</p></li><li><p><code>fn</code>：函数对象。相当于直接获取了整个函数对象。</p></li></ul><h3 id="类数组-arguments"><a href="#类数组-arguments" class="headerlink" title="类数组 arguments"></a>类数组 arguments</h3><blockquote><p>这部分，小白可能看不懂。所以，这一段，暂时可以忽略。</p></blockquote><p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p><ul><li><p>1.函数的上下文对象 this</p></li><li><p>2.<strong>封装实参的对象</strong> arguments</p></li></ul><p>例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://img.smyhvae.com/20180315_0903.png" alt=""></p><p>arguments 是一个类数组对象，它可以通过索引来操作数据，也可以获取长度。</p><p><strong>arguments 代表的是实参。在调用函数时，我们所传递的实参都会在 arguments 中保存。有个讲究的地方是：arguments只在函数中使用</strong>。</p><h3 id="1、返回函数实参的个数：arguments-length"><a href="#1、返回函数实参的个数：arguments-length" class="headerlink" title="1、返回函数实参的个数：arguments.length"></a>1、返回函数<strong>实参</strong>的个数：arguments.length</h3><p>arguments.length 可以用来获取<strong>实参的长度</strong>。</p><p>举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取形参的个数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取实参的个数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印结果：</p><p><img src="http://img.smyhvae.com/20180125_2140.png" alt=""></p><p>我们即使不定义形参，也可以通过 arguments 来使用实参（只不过比较麻烦）：arguments[0] 表示第一个实参、arguments[1] 表示第二个实参…</p><h3 id="2、返回正在执行的函数：arguments-callee"><a href="#2、返回正在执行的函数：arguments-callee" class="headerlink" title="2、返回正在执行的函数：arguments.callee"></a>2、返回正在执行的函数：arguments.callee</h3><p><strong>arguments 里边有一个属性叫做 callee，这个属性对应一个函数对象，就是当前正在指向的函数对象。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee <span class="token operator">==</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印结果为true</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>在使用函数递归调用时，推荐使用 arguments.callee 代替函数名本身。</strong></p><h3 id="3、arguments-可以修改元素"><a href="#3、arguments-可以修改元素" class="headerlink" title="3、arguments 可以修改元素"></a>3、arguments 可以修改元素</h3><p>之所以说 arguments 是伪数组，是因为：<strong>arguments 可以修改元素，但不能改变数组的长短</strong>。举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将实参的第一个数改为99</span>    arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此方法不通过，因为无法增加元素</span><span class="token punctuation">}</span></code></pre><h2 id="arguments-的使用"><a href="#arguments-的使用" class="headerlink" title="arguments 的使用"></a>arguments 的使用</h2><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。在 JavaScript 中，arguments 实际上是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个 arguments 对象（只有函数才有 arguments 对象），arguments 对象中存储了<strong>传递的所有实参</strong>.</p><p>arguments的展示形式是一个<strong>伪数组</strong>。伪数组具有以下特点：</p><ul><li><p>可以进行遍历；具有数组的 length 属性。</p></li><li><p>按索引方式存储数据。</p></li><li><p>不具有数组的 push()、pop() 等方法。</p></li></ul><p><strong>代码举例</strong>：利用 arguments 求函数实参中的最大值</p><p>代码实现：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> max <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过 arguments 遍历实参</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMaxValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p><strong>提醒1</strong>：在函数作用域中，也有声明提前的特性：</p><ul><li><p>函数中，使用var关键字声明的变量，会在函数中所有的代码执行之前被声明。</p></li><li><p>函数中，没有var声明的变量都是<strong>全局变量</strong>，而且并不会提前声明。</p></li></ul><p><strong>提醒2</strong>：定义形参就相当于在函数作用域中声明了变量。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>引入：</p><ul><li><p>只要是代码，就至少有一个作用域</p></li><li><p>写在函数内部的局部作用域</p></li><li><p>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</p></li></ul><p>基于上面几条内容，我们可以得出作用域链的概念。</p><p><strong>作用域链</strong>：内部函数访问外部函数的变量，采用的是链式查找的方式来决定取哪个值，这种结构称之为作用域链。查找时，采用的是<strong>就近原则</strong>。</p><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外部函数</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：20。</p><h2 id="JavaScript-运行三部曲"><a href="#JavaScript-运行三部曲" class="headerlink" title="JavaScript 运行三部曲"></a>JavaScript 运行三部曲</h2><ul><li><p>语法分析</p></li><li><p>预编译</p></li><li><p>解释执行</p></li></ul><h3 id="预编译前奏"><a href="#预编译前奏" class="headerlink" title="预编译前奏"></a>预编译前奏</h3><blockquote><p>在讲预编译前，我们先来普及下面两个规律。</p></blockquote><h3 id="两个规律"><a href="#两个规律" class="headerlink" title="两个规律"></a>两个规律</h3><p><strong>规律1：任何变量，如果未经声明就赋值，此变量是属于 window 的属性</strong>，而且不会做变量提升。（注意，无论在哪个作用域内赋值）</p><p>比如说，如果我们直接在代码里写 <code>console.log(a)</code>，这肯定会报错的，提示找不到 <code>a</code>。但如果我直接写 <code>a = 100</code>，这就不会报错，此时，这个 <code>a</code> 就是 <code>window.a</code>。</p><p><strong>规律2：一切声明的全局变量，全是window的属性</strong>。（注意，我说的是在全局作用域内声明的全局变量，不是说局部变量）</p><p>比如说，当我定义 <code>var a = 200</code> 时，这此时这个 <code>a</code> 就是 <code>window.a</code>。</p><p>由此，我们可以看出：<strong>window 代表了全局作用域</strong>（是说「代表」，没说「等于」）。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>掌握了上面两句话之后，我们再来看看下面的例子。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 连续赋值</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在全局范围内访问 b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在全局范围内访问 b，但是前面没有加 window 这个关键字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在全局范围内访问 a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在全局范围内访问 a，但是前面没有加 window 这个关键字</span></code></pre><p>上方代码的打印结果：</p><pre><code>100100undefined（会报错，提示 Uncaught ReferenceError: a is not defined）</code></pre><p><strong>解释</strong>：</p><p>当执行了<code>foo()</code>函数之后， <code>var a = b = 100</code> 这行<strong>连续赋值</strong>的代码等价于 <code>var a = (b = 100)</code>，其执行顺序是：</p><p>（1）先把 100 赋值给 b；</p><p>（2）再声明变量 a；</p><p>（3）再把 b 的值赋值给 a。</p><p>我们可以看到，b 是未经声明的变量就被赋值了，此时，根据规律1，这个 b 是属于 <code>window.b</code>；而 a 的作用域仅限于 foo() 函数内部，不属于 window。所以也就有了这样的打印结果。</p><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><h3 id="函数预编译的步骤"><a href="#函数预编译的步骤" class="headerlink" title="函数预编译的步骤"></a>函数预编译的步骤</h3><blockquote><p>函数预编译，发生在函数执行的前一刻。</p></blockquote><p>（1）创建AO对象。AO即 Activation Object 活跃对象，其实就是「执行期上下文」。</p><p>（2）找形参和变量声明，将形参名和变量作为 AO 的属性名，值为undefined。</p><p>（3）将实参值和形参统一，实参的值赋给形参。</p><p>（4）查找函数声明，函数名作为 AO 对象的属性名，值为整个函数体。</p><p>这个地方比较难理解。但只有了解了函数的预编译，才能理解明白函数的执行顺序。</p><p>代码举例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre><code>ƒ a() {}666666ƒ () {}</code></pre><h2 id="事件简介"><a href="#事件简介" class="headerlink" title="事件简介"></a>事件简介</h2><p>事件：就是文档或浏览器窗口中发生的一些特定的交互瞬间。对于 Web 应用来说，有下面这些代表性的事件：点击某个元素、将鼠标移动至某个元素上方、关闭弹窗等等。</p><p>JavaScript 是以<strong>事件驱动为核心</strong>的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。</p><h3 id="事件的三要素"><a href="#事件的三要素" class="headerlink" title="事件的三要素"></a>事件的三要素</h3><p><strong>事件的三要素：事件源、事件、事件驱动程序</strong>。</p><p>比如，我用手去按开关，灯亮了。这件事情里，事件源是：手。事件是：按开关。事件驱动程序是：灯开了或者关了。</p><p>再比如，网页上弹出一个广告，我点击右上角的<code>X</code>，广告就关闭了。这件事情里，事件源是：<code>X</code>。事件是：onclick。事件驱动程序是：广告关闭了。</p><p><strong>代码书写步骤如下：</strong>（重要）</p><ul><li><p>（1）获取事件源：document.getElementById(“box”);   // 类似于Android里面的findViewById</p></li><li><p>（2）绑定事件： 事件源box.事件onclick = function(){ 事件驱动程序 };</p></li><li><p>（3）书写事件驱动程序：关于DOM的操作。</p></li></ul><p>常见的事件如下：</p><p><img src="http://img.smyhvae.com/20180126_1553.png" alt=""></p><h3 id="onload事件"><a href="#onload事件" class="headerlink" title="onload事件"></a>onload事件</h3><blockquote><p>onload事件比较特殊，这里单独讲一下。</p></blockquote><p><strong>当页面加载（文本和图片）完毕的时候，触发onload事件。</strong></p><p>举例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"smyhvae"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等页面加载完毕时，打印字符串</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>有一点我们要知道：<strong>js的加载是和html同步加载的</strong>。因此，如果使用元素在定义元素之前，容易报错。这个时候，onload事件就能派上用场了，我们可以把使用元素的代码放在onload里，就能保证这段代码是最后执行。</p><p><strong>建议是：整个页面上所有元素加载完毕再执行js内容。所以，window.onload可以预防使用标签在定义标签之前。</strong></p><p><strong>备注</strong>：关于 onLoad事件，在下一篇文章《DOM简介和DOM操作》中有更详细的讲解和示例。</p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript基础分为三个部分：</p><ul><li><p>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p></li><li><p><strong>DOM</strong>：文档对象模型（Document object Model），操作<strong>网页上的元素</strong>的API。比如让盒子移动、变色、轮播图等。</p></li><li><p><strong>BOM</strong>：浏览器对象模型（Browser Object Model），操作<strong>浏览器部分功能</strong>的API。比如让浏览器自动滚动。</p></li></ul><p><strong>DOM树</strong>：（一切都是节点）</p><p>DOM的数据结构如下：</p><p><img src="http://img.smyhvae.com/20180126_2105.png" alt=""></p><p>上图可知，<strong>在HTML当中，一切都是节点</strong>（非常重要）。节点的分类，在上一段中，已经讲了。</p><p>整个html文档就是一个文档节点。所有的节点都是Object。</p><h2 id="JS动画"><a href="#JS动画" class="headerlink" title="JS动画"></a>JS动画</h2><p>JS动画的主要内容如下：</p><p>1、三大家族和一个事件对象：</p><ul><li><p>三大家族：offset/scroll/client。也叫三大系列。</p></li><li><p>事件对象/event（事件被触动时，鼠标和键盘的状态）（通过属性控制）。</p></li></ul><p>2、动画(闪现/匀速/缓动)</p><p>3、冒泡/兼容/封装</p><h2 id="offset-家族的组成"><a href="#offset-家族的组成" class="headerlink" title="offset 家族的组成"></a>offset 家族的组成</h2><p>我们知道，JS动画的三大家族包括：offset/scroll/client。今天来讲一下offset，以及与其相关的匀速动画。</p><blockquote><p>offset的中文是：偏移，补偿，位移。</p></blockquote><p>js中有一套方便的<strong>获取元素尺寸</strong>的办法就是offset家族。offset家族包括：</p><ul><li><p>offsetWidth</p></li><li><p>offsetHight</p></li><li><p>offsetLeft</p></li><li><p>offsetTop</p></li><li><p>offsetParent</p></li></ul><h3 id="1、offsetWidth-和-offsetHight"><a href="#1、offsetWidth-和-offsetHight" class="headerlink" title="1、offsetWidth 和 offsetHight"></a>1、offsetWidth 和 offsetHight</h3><p><strong><code>offsetWidth</code> 和 <code>offsetHight</code>：获取元素的宽高 + padding + border，不包括margin。</strong>如下：</p><ul><li><p>offsetWidth = width + padding + border</p></li><li><p>offsetHeight = Height + padding + border</p></li></ul><p>这两个属性，他们绑定在了所有的节点元素上。获取元素之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><h3 id="2、offsetParent"><a href="#2、offsetParent" class="headerlink" title="2、offsetParent"></a>2、offsetParent</h3><p><code>offsetParent</code>：获取当前元素的<strong>定位父元素</strong>。</p><ul><li><p>如果当前元素的父元素，<strong>有CSS定位</strong>（position为absolute、relative、fixed），那么 <code>offsetParent</code> 获取的是<strong>最近的</strong>那个父元素。</p></li><li><p>如果当前元素的父元素，<strong>没有CSS定位</strong>（position为absolute、relative、fixed），那么<code>offsetParent</code> 获取的是<strong>body</strong>。</p></li></ul><h3 id="3、offsetLeft-和-offsetTop-不太懂"><a href="#3、offsetLeft-和-offsetTop-不太懂" class="headerlink" title="3、offsetLeft 和 offsetTop(不太懂)"></a>3、offsetLeft 和 offsetTop(不太懂)</h3><p><code>offsetLeft</code>：当前元素相对于其<strong>定位父元素</strong>的水平偏移量。</p><p><code>offsetTop</code>：当前元素相对于其<strong>定位父元素</strong>的垂直偏移量。</p><p>备注：从父亲的 padding 开始算起，父亲的 border 不算在内。</p><p>举例：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*position: absolute;*/</span>            <span class="token comment" spellcheck="true">/*left: 10px;*/</span>            <span class="token comment" spellcheck="true">/*top: 10px;*/</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">10</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//offsetTop和offsetLeft</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//100</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//10px</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px之后)。注意，后者只识别行内样式。但区别不仅仅于此，下面会讲。</p><h3 id="offsetLeft-和-style-left-区别"><a href="#offsetLeft-和-style-left-区别" class="headerlink" title="offsetLeft 和 style.left 区别"></a>offsetLeft 和 style.left 区别</h3><p>（1）最大区别在于：</p><p>offsetLeft 可以返回无定位父元素的偏移量。如果父元素中都没有定位，则body为准。</p><p>style.left 只能获取行内样式，如果父元素中都没有设置定位，则返回””（意思是，返回空字符串）;</p><p>（2）offsetLeft 返回的是数字，而 style.left 返回的是字符串，而且还带有单位：px。</p><p>比如：</p><pre class=" language-javascript"><code class="language-javascript">div<span class="token punctuation">.</span>offsetLeft <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">"100px"</span><span class="token punctuation">;</span></code></pre><p>（3）offsetLeft 和 offsetTop <strong>只读</strong>，而 style.left 和 style.top 可读写（只读是获取值，可写是修改值）</p><p>总结：我们一般的做法是：<strong>用offsetLeft 和 offsetTop 获取值，用style.left 和 style.top 赋值</strong>（比较方便）。理由如下：</p><ul><li><p>style.left：只能获取行内式，获取的值可能为空，容易出现NaN。</p></li><li><p>offsetLeft：获取值特别方便，而且是现成的number，方便计算。它是只读的，不能赋值。</p></li></ul><h2 id="scroll-相关属性"><a href="#scroll-相关属性" class="headerlink" title="scroll 相关属性"></a>scroll 相关属性</h2><h3 id="window-onscroll-方法"><a href="#window-onscroll-方法" class="headerlink" title="window.onscroll() 方法"></a>window.onscroll() 方法</h3><p>当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法。</p><h3 id="1、ScrollWidth-和-scrollHeight"><a href="#1、ScrollWidth-和-scrollHeight" class="headerlink" title="1、ScrollWidth 和 scrollHeight"></a>1、ScrollWidth 和 scrollHeight</h3><p><code>ScrollWidth</code> 和 <code>scrollHeight</code>：获取元素<strong>整个滚动区域</strong>的宽、高。包括 width 和 padding，不包括 border和margin。</p><p><strong>注意</strong>：</p><p><code>scrollHeight</code> 的特点是：如果内容超出了盒子，<code>scrollHeight</code>为内容的高（包括超出的内容）；如果不超出，<code>scrollHeight</code>为盒子本身的高度。<code>ScrollWidth</code>同理。</p><h3 id="2、scrollTop-和-scrollLeft"><a href="#2、scrollTop-和-scrollLeft" class="headerlink" title="2、scrollTop 和 scrollLeft"></a>2、scrollTop 和 scrollLeft</h3><ul><li><p><code>scrollLeft</code>：获取水平滚动条滚动的距离。</p></li><li><p><code>scrollTop</code>：获取垂直滚动条滚动的距离。</p></li></ul><p><strong>实战经验</strong>：</p><p>当某个元素满足<code>scrollHeight - scrollTop == clientHeight</code>时，说明垂直滚动条滚动到底了。</p><p>当某个元素满足<code>scrollWidth - scrollLeft == clientWidth</code>时，说明水平滚动条滚动到底了。</p><p>这个实战经验非常有用，可以用来判断用户是否已经将内容滑动到底了。比如说，有些场景下，希望用户能够看完“长长的活动规则”，才允许触发接下来的表单操作。</p><h3 id="scrollTop-的兼容性"><a href="#scrollTop-的兼容性" class="headerlink" title="scrollTop 的兼容性"></a>scrollTop 的兼容性</h3><p>如果要获取页面滚动的距离，scrollTop 这个属性的写法要注意兼容性。</p><p>为了兼容，不管有没有DTD，<strong>最终版的兼容性写法：</strong></p><pre class=" language-javascript"><code class="language-javascript">    window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span></code></pre><h3 id="判断是否已经-DTD-声明"><a href="#判断是否已经-DTD-声明" class="headerlink" title="判断是否已经 DTD 声明"></a>判断是否已经 DTD 声明</h3><p>方法如下：</p><pre class=" language-javascript"><code class="language-javascript">    document<span class="token punctuation">.</span>compatMode <span class="token operator">===</span> <span class="token string">"CSS1Compat"</span>   <span class="token comment" spellcheck="true">// 已声明</span>    document<span class="token punctuation">.</span>compatMode <span class="token operator">===</span> <span class="token string">"BackCompat"</span>   <span class="token comment" spellcheck="true">// 未声明</span></code></pre><h2 id="获取-html-文档的方法"><a href="#获取-html-文档的方法" class="headerlink" title="获取 html 文档的方法"></a>获取 html 文档的方法</h2><p>获取title、body、head、html标签的方法如下：</p><ul><li><p><code>document.title</code> 文档标题；</p></li><li><p><code>document.head</code>  文档的头标签</p></li><li><p><code>document.body</code>  文档的body标签；</p></li><li><p><code>document.documentElement</code>  （这个很重要）。</p></li></ul><p><strong><code>document.documentElement</code>表示文档的html标签。也就是说，基本结构当中的 <code>html 标签</code>而是通过<code>document.documentElement</code>访问的，并不是通过 document.html 去访问的。</strong></p><h2 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h2><h3 id="三个函数"><a href="#三个函数" class="headerlink" title="三个函数"></a>三个函数</h3><p>缓慢动画里，我们要用到三个函数，这里先列出来：</p><ul><li><p>Math.ceil()         向上取整</p></li><li><p>Math.floor()        向下取整</p></li><li><p>Math.round();   四舍五入</p></li></ul><h3 id="缓动动画的原理"><a href="#缓动动画的原理" class="headerlink" title="缓动动画的原理"></a>缓动动画的原理</h3><p>缓动动画的原理就是：在移动的过程中，步长越来越小。</p><p>设置步长为：<strong>目标位置和盒子当前位置的十分之一</strong>。用公式表达，即：</p><pre><code>    盒子位置 = 盒子本身位置 + (目标位置 - 盒子本身位置)/ 10；</code></pre><h2 id="client-家族的组成"><a href="#client-家族的组成" class="headerlink" title="client 家族的组成"></a>client 家族的组成</h2><h3 id="clientWidth-和-clientHeight"><a href="#clientWidth-和-clientHeight" class="headerlink" title="clientWidth 和 clientHeight"></a>clientWidth 和 clientHeight</h3><p>元素调用时：</p><ul><li><p>clientWidth：获取元素的可见宽度（width + padding）。</p></li><li><p>clientHeight：获取元素的可见高度（height + padding）。</p></li></ul><p>body/html 调用时：</p><ul><li><p>clientWidth：获取网页可视区域宽度。</p></li><li><p>clientHeight：获取网页可视区域高度。</p></li></ul><p><strong>声明</strong>：</p><ul><li><p><code>clientWidth</code> 和 <code>clientHeight</code> 属性是只读的，不可修改。</p></li><li><p><code>clientWidth</code> 和 <code>clientHeight</code> 的值都是不带 px 的，返回的都是一个数字，可以直接进行计算。</p></li></ul><h3 id="clientX-和-clientY"><a href="#clientX-和-clientY" class="headerlink" title="clientX 和 clientY"></a>clientX 和 clientY</h3><p>event调用：</p><ul><li><p>clientX：鼠标距离可视区域左侧距离。</p></li><li><p>clientY：鼠标距离可视区域上侧距离。</p></li></ul><h3 id="clientTop-和-clientLeft"><a href="#clientTop-和-clientLeft" class="headerlink" title="clientTop 和 clientLeft"></a>clientTop 和 clientLeft</h3><ul><li><p>clientTop：盒子的上border。</p></li><li><p>clientLeft：盒子的左border。</p></li></ul><h2 id="三大家族-offset-scroll-client-的区别"><a href="#三大家族-offset-scroll-client-的区别" class="headerlink" title="三大家族 offset/scroll/client 的区别"></a>三大家族 offset/scroll/client 的区别</h2><h3 id="区别1：宽高"><a href="#区别1：宽高" class="headerlink" title="区别1：宽高"></a>区别1：宽高</h3><ul><li><p>offsetWidth  = width  + padding + border</p></li><li><p>offsetHeight = height + padding + border</p></li><li><p>scrollWidth   = 内容宽度（不包含border）</p></li><li><p>scrollHeight  = 内容高度（不包含border）</p></li><li><p>clientWidth  = width  + padding</p></li><li><p>clientHeight = height + padding</p></li></ul><h3 id="区别2：上左"><a href="#区别2：上左" class="headerlink" title="区别2：上左"></a>区别2：上左</h3><p>offsetTop/offsetLeft：</p><ul><li>调用者：任意元素。(盒子为主)</li><li>作用：距离父系盒子中带有定位的距离。</li></ul><p>scrollTop/scrollLeft：</p><ul><li>调用者：document.body.scrollTop（window调用）(盒子也可以调用，但必须有滚动条)</li><li>作用：浏览器无法显示的部分（被卷去的部分）。</li></ul><p>clientY/clientX：</p><ul><li>调用者：event</li><li>作用：鼠标距离浏览器可视区域的距离（左、上）。</li></ul><h2 id="函数封装：获取浏览器的宽高（可视区域）"><a href="#函数封装：获取浏览器的宽高（可视区域）" class="headerlink" title="函数封装：获取浏览器的宽高（可视区域）"></a>函数封装：获取浏览器的宽高（可视区域）</h2><p>函数封装如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//函数封装：获取屏幕可视区域的宽高</span><span class="token keyword">function</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ie9及其以上的版本的写法</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">"width"</span><span class="token punctuation">:</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span> window<span class="token punctuation">.</span>innerHeight        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">===</span> <span class="token string">"CSS1Compat"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//标准模式的写法（有DTD时）</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">"width"</span><span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有DTD时的写法</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">"width"</span><span class="token punctuation">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>            <span class="token string">"height"</span><span class="token punctuation">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例：根据浏览器的可视宽度，给定不同的背景的色。</strong></p><blockquote><p>PS：这个可以用来做响应式。</p></blockquote><p>代码如下：（需要用到上面的封装好的方法）</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tools.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//需求：浏览器每次更改大小，判断是否符合某一标准然后给背景上色。</span>    <span class="token comment" spellcheck="true">//  // >960红色，大于640小于960蓝色，小于640绿色。</span>    window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//页面大小发生变化时，执行该函数。</span>    <span class="token comment" spellcheck="true">//页面加载的时候直接执行一次函数，确定浏览器可视区域的宽，给背景上色</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装成函数，然后指定的时候去调用和绑定函数名</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">></span> <span class="token number">960</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">></span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上当代码中，<code>window.onresize</code>事件指的是：在窗口或框架被调整大小时发生。各个事件的解释如下：</p><ul><li><p>window.onscroll        屏幕滑动</p></li><li><p>window.onresize       浏览器大小变化</p></li><li><p>window.onload            页面加载完毕</p></li><li><p>div.onmousemove    鼠标在盒子上移动（注意：不是盒子移动）</p></li></ul><h2 id="获取显示器的分辨率"><a href="#获取显示器的分辨率" class="headerlink" title="获取显示器的分辨率"></a>获取显示器的分辨率</h2><p>比如，我的电脑的显示器分辨率是：1920*1080。</p><p>获取显示器的分辨率：</p><pre class=" language-javascript"><code class="language-javascript">    window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>显示效果：</p><p><img src="http://img.smyhvae.com/20180203_2155.png" alt=""></p><p>上图中，不管我如何改变浏览器的窗口大小，title栏显示的值永远都是我的显示器分辨率：1920*1080。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Arrays、Collections、Objects 常用方法源码解析</title>
      <link href="/2020/07/12/java-arrays-collections-objects-chang-yong-fang-fa-yuan-ma-jie-xi/"/>
      <url>/2020/07/12/java-arrays-collections-objects-chang-yong-fang-fa-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>我们在工作中都会写工具类，但如何才能使写出来的工具类更好用，也是有一些技巧的。</p><h3 id="1-工具类通用的特征"><a href="#1-工具类通用的特征" class="headerlink" title="1 工具类通用的特征"></a>1 工具类通用的特征</h3><p>再看细节之前，我们先总结一下好的工具类都有哪些通用的特征写法：</p><ol><li>构造器必须是私有的。这样的话，工具类就无法被 new 出来，因为工具类在使用的时候，无需初始化，直接使用即可，所以不会开放出构造器出来。</li><li>工具类的工具方法必须被 static、final 关键字修饰。这样的话就可以保证方法不可变，并且可以直接使用，非常方便。</li></ol><p>我们需要注意的是，尽量不在工具方法中，对共享变量有做修改的操作访问（如果必须要做的话，必须加锁），因为会有线程安全的问题。除此之外，工具类方法本身是没有线程安全问题的，可以放心使用。</p><h3 id="2-Arrays"><a href="#2-Arrays" class="headerlink" title="2 Arrays"></a>2 Arrays</h3><p>Arrays 主要对数组提供了一些高效的操作，比如说排序、查找、填充、拷贝、相等判断等等。我们选择其中两三个看下。</p><h4 id="2-1-排序"><a href="#2-1-排序" class="headerlink" title="2.1 排序"></a>2.1 排序</h4><p>Arrays.sort 方法主要用于排序，入参支持 int、long、double 等各种基本类型的数组，也支持自定义类的数组，下面我们写个 demo 来演示一下自定义类数组的排序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">// 自定义类</span><span class="token keyword">class</span> <span class="token class-name">SortDTO</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String sortTarget<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">SortDTO</span><span class="token punctuation">(</span>String sortTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sortTarget <span class="token operator">=</span> sortTarget<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>SortDTO<span class="token operator">></span> list <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"220"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我们先把数组的大小初始化成 list 的大小，保证能够正确执行 toArray</span>  SortDTO<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"排序之前：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>SortDTO<span class="token operator">:</span><span class="token operator">:</span>getSortTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"排序之后：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果为（字符串排序）：排序之前：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>排序之后：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>从输出的结果中可以看到，排序之后的数组已经是有顺序的了，也可以看到 sort 方法支持两个入参：要排序的数组和外部排序器。</p><p> sort 方法排序的性能较高，主要原因是 sort 使用了双轴快速排序算法。</p><h4 id="2-1-二分查找法"><a href="#2-1-二分查找法" class="headerlink" title="2.1 二分查找法"></a>2.1 二分查找法</h4><p>Arrays.binarySearch 方法主要用于快速从数组中查找出对应的值。其支持的入参类型非常多，如 byte、int、long 各种类型的数组。返回参数是查找到的对应数组下标的值，如果查询不到，则返回负数。示例代码如下：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>SortDTO<span class="token operator">></span> list <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"220"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SortDTO<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"搜索之前：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>SortDTO<span class="token operator">:</span><span class="token operator">:</span>getSortTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"先排序，结果为：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>SortDTO<span class="token operator">:</span><span class="token operator">:</span>getSortTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"没有找到 200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"搜索结果：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出的结果为：搜索之前：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>先排序，结果为：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>搜索结果：<span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span></code></pre><p>从上述代码中我们需要注意两点：</p><ol><li><strong>如果被搜索的数组是无序的，一定要先排序</strong>，否则二分搜索很有可能搜索不到，我们 demo 里面也先对数组进行了排序；</li><li><strong>搜索方法返回的是数组的下标值</strong>。如果搜索不到，返回的下标值就会是负数，这时我们需要判断一下正负。如果是负数，还从数组中获取数据的话，会报数组越界的错误。demo 中对这种情况进行了判断，如果是负数，会提前抛出明确的异常。</li></ol><p>接下来，我们来看下二分法底层代码的实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// a：我们要搜索的数组，fromIndex：从那里开始搜索，默认是0； toIndex：搜索到何时停止，默认是数组大小</span><span class="token comment" spellcheck="true">// key：我们需要搜索的值 c：外部比较器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span>                                     T key<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果比较器 c 是空的，直接使用 key 的 Comparable.compareTo 方法进行排序</span>    <span class="token comment" spellcheck="true">// 假设 key 类型是 String 类型，String 默认实现了 Comparable 接口，就可以直接使用 compareTo 方法进行排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这是另外一个方法，使用内部排序器进行比较的方法</span>        <span class="token keyword">return</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始位置小于结束位置，就会一直循环搜索</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假设 low =0，high =10，那么 mid 就是 5，所以说二分的意思主要在这里，每次都是计算索引的中间值</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        T midVal <span class="token operator">=</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 比较数组中间值和给定的值的大小关系</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>midVal<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果数组中间值小于给定的值，说明我们要找的值在中间值的右边</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我们要找的值在中间值的左边</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 找到了</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key found</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回的值是负数，表示没有找到</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// key not found.</span><span class="token punctuation">}</span></code></pre><p>二分的主要思想是每次查找之前，都找到中间值，然后拿我们要比较的值和中间值比较，根据结果修改比较的上限或者下限，通过循环最终找到相等的位置索引，以上代码实现比较简洁。</p><h4 id="2-2-拷贝"><a href="#2-2-拷贝" class="headerlink" title="2.2 拷贝"></a>2.2 拷贝</h4><p>数组拷贝我们经常遇到，有时需要拷贝整个数组，有时需要拷贝部分，比如 ArrayList 在 add（扩容） 或 remove（删除元素不是最后一个） 操作时，会进行一些拷贝。拷贝整个数组我们可以使用 copyOf 方法，拷贝部分我们可以使用 copyOfRange 方法，以 copyOfRange 为例，看下底层源码的实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// original 原始数组数据</span><span class="token comment" spellcheck="true">// from 拷贝起点</span><span class="token comment" spellcheck="true">// to 拷贝终点</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOfRange</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要拷贝的长度</span>    <span class="token keyword">int</span> newLength <span class="token operator">=</span> to <span class="token operator">-</span> from<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newLength <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>from <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化新数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用 native 方法进行拷贝，参数的意思分别是：</span>    <span class="token comment" spellcheck="true">// 被拷贝的数组、从数组那里开始、目标数组、从目的数组那里开始拷贝、拷贝的长度</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> from<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length <span class="token operator">-</span> from<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们发现，Arrays 的拷贝方法，实际上底层调用的是 System.arraycopy 这个 native 方法，如果你自己对底层拷贝方法比较熟悉的话，也可以直接使用。</p><h3 id="3-Collections"><a href="#3-Collections" class="headerlink" title="3 Collections"></a>3 Collections</h3><p><code>Arrays</code>是为了方便使用数组而产生的工具类，<code>Collections</code> 是为了方便使用集合而产生的工具类。</p><p>Collections 也提供了 sort 和 binarySearch 方法，sort 底层使用的就是 Arrays.sort 方法，binarySearch 底层是自己重写了二分查找算法，实现的逻辑和 Arrays 的二分查找算法完全一致，这两个方法上 Collections 和 Arrays 的内部实现很类似，接下来我们来看下 Collections 独有的特性。</p><h4 id="3-1-求集合中最大、小值"><a href="#3-1-求集合中最大、小值" class="headerlink" title="3.1 求集合中最大、小值"></a>3.1 求集合中最大、小值</h4><p>提供了 max 方法来取得集合中的最大值，min 方法来取得集合中的最小值，max 和 min 方法很相似的，我们以 max 方法为例来说明一下，<strong>max 提供了两种类型的方法，一个需要传外部排序器，一个不需要传排序器，但需要集合中的元素强制实现 Comparable 接口</strong>，后者的泛型定义很有意思，我们来看下（从右往左看）：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggoje96zsxj31160l8gyg.jpg" alt=""></p><p>从这段源码中，我们可以学习到两点：</p><ol><li>max 方法泛型 T 定义得非常巧妙，意思是泛型必须继承 Object 并且实现 Comparable 的接口。一般让我们来定义的话，我们可以会在方法里面去判断有无实现 Comparable 的接口，这种是在运行时才能知道结果。而这里泛型直接定义了必须实现 Comparable 接口，在编译的时候就可告诉使用者，当前类没有实现 Comparable 接口，使用起来很友好；</li><li>给我们提供了实现两种排序机制的好示例：自定义类实现 Comparable 接口和传入外部排序器。两种排序实现原理类似，但实现有所差别，我们在工作中如果需要些排序的工具类时，可以效仿。</li></ol><h4 id="3-2-多种类型的集合"><a href="#3-2-多种类型的集合" class="headerlink" title="3.2 多种类型的集合"></a>3.2 多种类型的集合</h4><p>Collections 对原始集合类进行了封装，提供了更好的集合类给我们，一种是线程安全的集合，一种是不可变的集合，针对 List、Map、Set 都有提供，我们先来看下线程安全的集合：</p><h5 id="3-2-1-线程安全的集合"><a href="#3-2-1-线程安全的集合" class="headerlink" title="3.2.1 线程安全的集合"></a>3.2.1 线程安全的集合</h5><p>线程安全的集合方法都是 synchronized 打头的，如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggojjsobjaj310o0u0tul.jpg" alt=""></p><p>从方法命名我们都可以看出来，底层是通过 synchronized 轻量锁来实现的，我们以 synchronizedList 为例来说明下底层的实现：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggojmo65ubj30x10u0qkf.jpg" alt=""></p><p>可以看到 List 的所有操作方法都被加上了 synchronized 锁，所以多线程对集合同时进行操作，是线程安全的。</p><h5 id="3-2-1-不可变的集合"><a href="#3-2-1-不可变的集合" class="headerlink" title="3.2.1 不可变的集合"></a>3.2.1 不可变的集合</h5><p>得到不可变集合的方法都是以 unmodifiable 开头的。这类方法的意思是，我们会从原集合中，得到一个不可变的新集合，新集合只能访问，无法修改；一旦修改，就会抛出异常。这主要是因为只开放了查询方法，其余任何修改操作都会抛出异常，我们以 unmodifiableList 为例来看下底层实现机制：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggojqywpqmj30wx0u0qkp.jpg" alt=""></p><h5 id="3-2-2-小结"><a href="#3-2-2-小结" class="headerlink" title="3.2.2 小结"></a>3.2.2 小结</h5><p>以上两种 List 其实解决了工作中的一些困惑，比如说 ArrayList 是线程不安全的，然后其内部数组很容易被修改，有的时候，我们希望 List 一旦生成后，就不能被修改，Collections 对 List 重新进行了封装，提供了两种类型的集合封装形式，从而解决了工作中的一些烦恼，如果你平时使用 List 时有一些烦恼，也可以学习此种方式，自己对原始集合进行封装，来解决 List 使用过程中的不方便。</p><h3 id="4-Objects"><a href="#4-Objects" class="headerlink" title="4 Objects"></a>4 Objects</h3><p>对于 Objects，我们经常使用的就是两个场景，相等判断和判空。</p><h4 id="4-1-相等判断"><a href="#4-1-相等判断" class="headerlink" title="4.1 相等判断"></a>4.1 相等判断</h4><p>Objects 有提供 equals 和 deepEquals 两个方法来进行相等判断，前者是判断基本类型和自定义类的，后者是用来判断数组的，我们来看下底层的源码实现：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggok2whuw7j31140kq7ls.jpg" alt=""></p><p>从源码中，可以看出 Objects 对基本类型和复杂类型的对象，都有着比较细粒度的判断，可以放心使用。</p><h4 id="4-2-为空判断"><a href="#4-2-为空判断" class="headerlink" title="4.2 为空判断"></a>4.2 为空判断</h4><p>Objects 提供了各种关于空的一些判断，<code>isNull</code>和 <code>nonNull</code>对于对象是否为空返回 <code>Boolean</code>值，<code>requireNonNull</code> 方法更加严格，如果一旦为空，会直接抛出异常，我们需要根据生活的场景选择使用。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggok6zyza2j31160d8dn0.jpg" alt=""></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="工作中有没有遇到特别好用的工具类，如何写好一个工具类"><a href="#工作中有没有遇到特别好用的工具类，如何写好一个工具类" class="headerlink" title="工作中有没有遇到特别好用的工具类，如何写好一个工具类"></a>工作中有没有遇到特别好用的工具类，如何写好一个工具类</h4><p>答：有的，像 Arrays 的排序、二分查找、Collections 的不可变、线程安全集合类、Objects 的判空相等判断等等工具类，好的工具类肯定很好用，比如说使用 static final 关键字对方法进行修饰，工具类构造器必须是私有等等手段来写好工具类。</p><h4 id="如果我希望-ArrayList-初始化之后，不能被修改，该怎么办"><a href="#如果我希望-ArrayList-初始化之后，不能被修改，该怎么办" class="headerlink" title="如果我希望 ArrayList 初始化之后，不能被修改，该怎么办"></a>如果我希望 ArrayList 初始化之后，不能被修改，该怎么办</h4><p>答：可以使用 Collections 的 unmodifiableList 的方法，该方法会返回一个不能被修改的内部类集合，这些集合类只开放查询的方法，对于调用修改集合的方法会直接抛出异常。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 常用关键字理解</title>
      <link href="/2020/06/19/java-chang-yong-guan-jian-zi-li-jie/"/>
      <url>/2020/06/19/java-chang-yong-guan-jian-zi-li-jie/</url>
      
        <content type="html"><![CDATA[<p>Java 中的关键字很多，在命名上我们不能和这些关键字冲突的，编译会报错，每个关键字都代表着不同场景下的不同含义，接下来我将介绍一下比较常用的 几个关键字，深入学习一下。</p><h2 id="1-static"><a href="#1-static" class="headerlink" title="1 static"></a>1 static</h2><p><strong>静态的、全局的，</strong>一旦被修饰，说明被修饰的东西在一定范围内是<strong>共享的</strong>，谁都可以访问，这时候<strong>需要注意并发读写的问题</strong>。</p><h3 id="1-1-修饰的对象"><a href="#1-1-修饰的对象" class="headerlink" title="1.1 修饰的对象"></a>1.1 修饰的对象</h3><p>static 只能修饰类变量、方法和方法块。</p><h4 id="static-修饰类变量"><a href="#static-修饰类变量" class="headerlink" title="static 修饰类变量"></a>static 修饰类变量</h4><p><strong>1、当 static 修饰类变量时</strong>，如果该变量是 public 的话，表示该变量任何类都可以直接访问，而且无需初始化类，直接使用 <strong>类名.static 变量</strong> 这种形式访问即可。</p><p>这时候我们非常需要注意的一点就是线程安全的问题了，因为当多个线程同时对共享变量进行读写时，很有可能会出现并发问题，如我们定义了：<code>public static List&lt;String&gt; list = new ArrayList();</code>这样的共享变量。这个 list 如果同时被多个线程访问的话，就有线程安全的问题，这时候一般有两个解决办法：</p><ol><li>把线程不安全的 ArrayList 换成 线程安全的 CopyOnWriteArrayList；</li><li>每次访问时，手动加锁。</li></ol><p>所以在使用 static 修饰类变量时，如何保证线程安全是我们常常需要考虑的。</p><p><strong>2、当 static 修饰方法时</strong>，代表该方法和当前类是无关的，如果权限是 public 的话，任意类都可以直接访问。</p><blockquote><p>有一点需要注意的是，该方法内部只能调用同样被 static 修饰的方法，不能调用普通方法，我们常用的 util 类里面的各种方法，我们比较喜欢用 static 修饰方法，好处就是调用特别方便。</p></blockquote><p><strong>static 方法内部的变量在执行时是没有线程安全问题的</strong>。方法执行时，数据运行在栈里面，栈的数据每个线程都是隔离开的，所以不会有线程安全的问题，所以 util 类的各个 static 方法，我们是可以放心使用的。</p><p><strong>3、当 static 修饰方法块时</strong>，我们叫做静态块，<strong>静态块常常用于在类启动之前，初始化一些值</strong>，比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 进行一些初始化的工作</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码演示了静态块做一些初始化的工作，但需要注意的是，静态块只能调用同样被 static 修饰的变量，并且 static 的变量需要写在静态块的前面，不然编译也会报错。</p><h3 id="1-2-初始化时机"><a href="#1-2-初始化时机" class="headerlink" title="1.2 初始化时机"></a>1.2 初始化时机</h3><p>对于被 static 修饰的类变量、方法块和静态方法的初始化时机，我们写了一个测试 demo，如下图：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggo9zjun35j31140g6jyn.jpg" alt="image-20200712163701402"></p><pre><code>打印出来的结果是：父类静态变量初始化父类静态块初始化子类静态变量初始化子类静态块初始化main 方法执行父类构造器初始化子类构造器初始化</code></pre><p>从上述的打印结果可以总结出：</p><ol><li><strong>父类的静态变量和静态块比子类优先初始化；</strong></li><li><strong>静态变量和静态块比类构造器优先初始化。</strong></li></ol><p><strong>被 static 修饰的方法，在类初始化的时候并不会初始化，只有当自己被调用时，才会被执行。</strong></p><h3 id="1-3-常见面试题"><a href="#1-3-常见面试题" class="headerlink" title="1.3 常见面试题"></a>1.3 常见面试题</h3><h4 id="如何证明-static-静态变量和类无关？"><a href="#如何证明-static-静态变量和类无关？" class="headerlink" title="如何证明 static 静态变量和类无关？"></a>如何证明 static 静态变量和类无关？</h4><p>答：从三个方面就可以看出静态变量和类无关。</p><ol><li>我们不需要初始化类就可直接使用静态变量；</li><li>我们在类中写个 main 方法运行，即便不写初始化类的代码，静态变量都会自动初始化；</li><li>静态变量只会初始化一次，初始化完成之后，不管我再 new 多少个类出来，静态变量都不会再初始化了。</li></ol><p>不仅仅是静态变量，静态方法块也和类无关。</p><h2 id="2-final"><a href="#2-final" class="headerlink" title="2 final"></a>2 final</h2><p>final 的意思是不变的，一般来说用于以下三种场景：</p><table><thead><tr><th align="center">场景</th><th>结果</th></tr></thead><tbody><tr><td align="center">被 final 修饰的类</td><td>该类是无法继承的</td></tr><tr><td align="center">被 final 修饰的方法</td><td>该方法是无法覆写的</td></tr><tr><td align="center">被 final 修饰的变量</td><td>该变量在声明的时候，就必须初始化完成，而且以后也不能修改其内存地址</td></tr></tbody></table><blockquote><p>对于被 final 修饰的变量，我们说的是无法修改其内存地址，并没有说无法修改其值。因为对于 List、Map 这些集合类来说，被 final 修饰后，是可以修改其内部值的，但却无法修改其初始化时的内存地址。</p></blockquote><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="常常看见变量和方法被-static-和-final-两个关键字修饰，为什么这么做？"><a href="#常常看见变量和方法被-static-和-final-两个关键字修饰，为什么这么做？" class="headerlink" title="常常看见变量和方法被 static 和 final 两个关键字修饰，为什么这么做？"></a>常常看见变量和方法被 static 和 final 两个关键字修饰，为什么这么做？</h4><p>答：这么做有两个目的：</p><ol><li>变量和方法于类无关，可以直接使用，使用比较方便；</li><li>强调变量内存地址不可变，方法不可继承覆写，强调了方法内部的稳定性。</li></ol><h2 id="3-volatile"><a href="#3-volatile" class="headerlink" title="3 volatile"></a>3 volatile</h2><p>volatile 的意思是可见的，常用来修饰某个共享变量，意思是当共享变量的值被修改后，会及时通知到其它线程上，其它线程就能知道当前共享变量的值已经被修改了。</p><p>在多核 CPU 下，为了提高效率，线程在拿值时，是直接和 CPU 缓存打交道的，而不是内存。主要是因为 CPU 缓存执行速度更快，比如线程要拿值 C，会直接从 CPU 缓存中拿， CPU 缓存中没有，就会从内存中拿，所以线程读的操作永远都是拿 CPU 缓存的值。</p><p>这时候会产生一个问题，CPU 缓存中的值和内存中的值可能并不是时刻都同步，导致线程计算的值可能不是最新的，共享变量的值有可能已经被其它线程所修改了，但此时修改是机器内存的值，CPU 缓存的值还是老的，导致计算会出现问题。</p><p>这时候有个机制，就是内存会主动通知 CPU 缓存。当前共享变量的值已经失效了，你需要重新来拉取一份，CPU 缓存就会重新从内存中拿取一份最新的值。</p><p>volatile 关键字就会触发这种机制，加了 volatile 关键字的变量，就会被识别成共享变量，内存中值被修改后，会通知到各个 CPU 缓存，使 CPU 缓存中的值也对应被修改，从而保证线程从 CPU 缓存中拿取出来的值是最新的。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggoadbrhuuj311q0l278u.jpg" alt=""></p><p>从图中我们可以看到，线程 1 和线程 2 一开始都读取了 C 值，CPU 1 和 CPU 2 缓存中也都有了 C 值，然后线程 1 把 C 值修改了，这时候内存的值和 CPU 2 缓存中的 C 值就不等了，内存这时发现 C 值被 volatile 关键字修饰，发现其是共享变量，就会使 CPU 2 缓存中的 C 值状态置为无效，CPU 2 会从内存中重新拉取最新的值，这时候线程 2 再来读取 C 值时，读取的已经是内存中最新的值了。</p><h2 id="4-try、catch、finally"><a href="#4-try、catch、finally" class="headerlink" title="4 try、catch、finally"></a>4 try、catch、finally</h2><p>这三个关键字常用于我们捕捉异常的一整套流程，try 用来确定代码执行的范围，<code>catch</code> 捕捉可能会发生的异常，<code>finally</code> 用来执行一定要执行的代码块，除了这些，我们还需要清楚，每个地方如果发生异常会怎么办，我们举一个例子来演示一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCatchFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"try is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"try exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"catch is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"catch exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finally is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个代码演示了在<code>try、catch</code>中都遇到了异常，代码的执行顺序为：<code>try -&gt; catch -&gt; finally，</code>输出的结果如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggoafxpbwcj3110064777.jpg" alt=""></p><p>可以看到两点：</p><ol><li><code>finally</code> 先执行后，再抛出 <code>catch</code> 的异常；</li><li>最终捕获的异常是 <code>catch</code>的异常，<code>try</code>抛出来的异常已经被 <code>catch</code>吃掉了，所以当我们遇见 catch 也有可能会抛出异常时，我们可以先打印出 <code>try</code> 的异常，这样<code>try</code> 的异常在日志中就会有所体现。</li></ol><h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><h3 id="catch-中发生了未知异常，finally-还会执行么？"><a href="#catch-中发生了未知异常，finally-还会执行么？" class="headerlink" title="catch 中发生了未知异常，finally 还会执行么？"></a>catch 中发生了未知异常，finally 还会执行么？</h3><p>答：会的，catch 发生了异常，finally 还会执行的，并且是 finally 执行完成之后，才会抛出 catch 中的异常。</p><p>不过 catch 会吃掉 try 中抛出的异常，为了避免这种情况，在一些可以预见 catch 中会发生异常的地方，先把 try 抛出的异常打印出来，这样从日志中就可以看到完整的异常了。</p><h2 id="5-transient"><a href="#5-transient" class="headerlink" title="5 transient"></a>5 transient</h2><p><code>transient</code>关键字我们常用来修饰类变量，意思是当前变量是无需进行序列化的。在序列化时，就会忽略该变量，这些在序列化工具底层，就已经对<code>transient</code>进行了支持。</p><h2 id="6-default"><a href="#6-default" class="headerlink" title="6 default"></a>6 default</h2><p><code>default</code>关键字一般会用在接口的方法上，意思是对于该接口，子类是无需强制实现的，但自己必须有默认实现，我们举个例子如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ggoal1rtx3j311c0dywjn.jpg" alt=""></p><p>default 关键字被很多源码使用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化规范</title>
      <link href="/2020/06/08/mysql-shu-ju-ku-you-hua-gui-fan/"/>
      <url>/2020/06/08/mysql-shu-ju-ku-you-hua-gui-fan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库命令规范"><a href="#一、数据库命令规范" class="headerlink" title="一、数据库命令规范"></a>一、数据库命令规范</h2><ul><li>所有数据库对象名称必须使用小写字母并用下划线分割</li><li>所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</li><li>数据库对象的命名要能做到见名识意，并且最后不要超过 32 个字符</li><li>临时库表必须以 <code>tmp_</code>为前缀并以日期为后缀，备份表必须以<code>bak_</code>为前缀并以日期 (时间戳) 为后缀</li><li>所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</li></ul><h2 id="二、数据库基本设计规范"><a href="#二、数据库基本设计规范" class="headerlink" title="二、数据库基本设计规范"></a>二、数据库基本设计规范</h2><h4 id="1-所有表使用-InnoDB-存储引擎"><a href="#1-所有表使用-InnoDB-存储引擎" class="headerlink" title="1. 所有表使用 InnoDB 存储引擎"></a>1. 所有表使用 InnoDB 存储引擎</h4><p>没有特殊要求（如列存储，存储空间数据等）的情况下，所有表必须使用 InnoDB存储引擎（MySQL5.5 之前默认使用 MyISAM，5.6 以后默认的为 InnoDB）。</p><p>InnoDB 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。</p><h4 id="2-数据库和表的字符集统一使用-UTF8"><a href="#2-数据库和表的字符集统一使用-UTF8" class="headerlink" title="2. 数据库和表的字符集统一使用 UTF8"></a>2. 数据库和表的字符集统一使用 UTF8</h4><ul><li><p>兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效。</p></li><li><p>如果数据库中有存储 emoji 表情的需要，字符集需要采用 utf8mb4 字符集。</p></li></ul><h4 id="3-所有表和字段都需要添加注释"><a href="#3-所有表和字段都需要添加注释" class="headerlink" title="3. 所有表和字段都需要添加注释"></a>3. 所有表和字段都需要添加注释</h4><p>使用 comment 从句添加表和列的备注，从一开始就进行数据字典的维护。</p><h4 id="4-尽量控制单表数据量的大小-建议控制在-500-万以内"><a href="#4-尽量控制单表数据量的大小-建议控制在-500-万以内" class="headerlink" title="4. 尽量控制单表数据量的大小,建议控制在 500 万以内"></a>4. 尽量控制单表数据量的大小,建议控制在 500 万以内</h4><ul><li><p>500 万并不是 MySQL 数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。</p></li><li><p>可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小。</p></li></ul><h4 id="5-谨慎使用-MySQL-分区表"><a href="#5-谨慎使用-MySQL-分区表" class="headerlink" title="5. 谨慎使用 MySQL 分区表"></a>5. 谨慎使用 MySQL 分区表</h4><p>分区表在物理上表现为多个文件，在逻辑上表现为一个表；谨慎选择分区键，跨分区查询效率可能更低；建议采用物理分表的方式管理大数据。</p><h4 id="6-尽量做到冷热数据分离-减小表的宽度"><a href="#6-尽量做到冷热数据分离-减小表的宽度" class="headerlink" title="6.尽量做到冷热数据分离,减小表的宽度"></a>6.尽量做到冷热数据分离,减小表的宽度</h4><p>减少磁盘 IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的 IO）；更有效的利用缓存，避免读入无用的冷数据；经常一起使用的列放到一个表中（避免更多的关联操作）。</p><blockquote><p>MySQL 限制每个表最多存储 4096 列，并且每一行数据的大小不能超过 65535 字节</p></blockquote><h4 id="7-禁止在表中建立预留字段"><a href="#7-禁止在表中建立预留字段" class="headerlink" title="7. 禁止在表中建立预留字段"></a>7. 禁止在表中建立预留字段</h4><ul><li><p>预留字段的命名很难做到见名识义。</p></li><li><p>预留字段无法确认存储的数据类型，所以无法选择合适的类型。</p></li><li><p>对预留字段类型的修改，会对表进行锁定。</p></li></ul><h4 id="8-禁止在数据库中存储图片-文件等大的二进制数据"><a href="#8-禁止在数据库中存储图片-文件等大的二进制数据" class="headerlink" title="8. 禁止在数据库中存储图片,文件等大的二进制数据"></a>8. 禁止在数据库中存储图片,文件等大的二进制数据</h4><p>通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机 IO 操作，文件很大时，IO 操作很耗时。</p><p>通常存储于文件服务器，数据库只存储文件地址信息。</p><h4 id="9、禁止在线上做数据库压力测试"><a href="#9、禁止在线上做数据库压力测试" class="headerlink" title="9、禁止在线上做数据库压力测试"></a>9、禁止在线上做数据库压力测试</h4><h4 id="10、禁止从开发环境-测试环境直接连接生产环境数据库"><a href="#10、禁止从开发环境-测试环境直接连接生产环境数据库" class="headerlink" title="10、禁止从开发环境,测试环境直接连接生产环境数据库"></a>10、禁止从开发环境,测试环境直接连接生产环境数据库</h4><h2 id="三、数据库字段设计规范"><a href="#三、数据库字段设计规范" class="headerlink" title="三、数据库字段设计规范"></a>三、数据库字段设计规范</h2><h4 id="1-优先选择符合存储需要的最小的数据类型"><a href="#1-优先选择符合存储需要的最小的数据类型" class="headerlink" title="1. 优先选择符合存储需要的最小的数据类型"></a>1. 优先选择符合存储需要的最小的数据类型</h4><p>因为列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的 IO 次数也就越多，索引的性能也就越差。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p><strong>a.将字符串转换成数字类型存储,如:将 IP 地址转换成整形数据</strong></p><p>MySQL 提供了两个方法来处理 ip 地址：</p><ul><li>inet_aton 把 ip 转为无符号整型 (4-8 位)</li><li>inet_ntoa 把整型的 ip 转为地址</li></ul><p>插入数据前，先用 inet_aton 把 ip 地址转为整型，可以节省空间，显示数据时，使用 inet_ntoa 把整型的 ip 地址转为地址显示即可。</p><p><strong>b.对于非负型的数据 (如自增 ID,整型 IP) 来说,要优先使用无符号整型来存储</strong></p><p>无符号相对于有符号可以多出一倍的存储空间</p><pre><code>SIGNED INT -2147483648~2147483647UNSIGNED INT 0~4294967295Copy to clipboardErrorCopied</code></pre><p>VARCHAR(N) 中的 N 代表的是字符数，而不是字节数，使用 UTF8 存储 255 个汉字 Varchar(255)=765 个字节。<strong>过大的长度会消耗更多的内存。</strong></p><h4 id="2-避免使用-TEXT-BLOB-数据类型，最常见的-TEXT-类型可以存储-64k-的数据"><a href="#2-避免使用-TEXT-BLOB-数据类型，最常见的-TEXT-类型可以存储-64k-的数据" class="headerlink" title="2. 避免使用 TEXT,BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据"></a>2. 避免使用 TEXT,BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据</h4><h5 id="a-建议把-BLOB-或是-TEXT-列分离到单独的扩展表中"><a href="#a-建议把-BLOB-或是-TEXT-列分离到单独的扩展表中" class="headerlink" title="a. 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中"></a>a. 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中</h5><p>MySQL 内存临时表不支持 TEXT、BLOB 这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。而且对于这种数据，MySQL 还是要进行二次查询，会使 sql 性能变得很差，但是不是说一定不能使用这样的数据类型。</p><p>如果一定要使用，建议把 BLOB 或是 TEXT 列分离到单独的扩展表中，查询时一定不要使用 select * 而只需要取出必要的列，不需要 TEXT 列的数据时不要对该列进行查询。</p><h5 id="b-TEXT-或-BLOB-类型只能使用前缀索引"><a href="#b-TEXT-或-BLOB-类型只能使用前缀索引" class="headerlink" title="b. TEXT 或 BLOB 类型只能使用前缀索引"></a>b. TEXT 或 BLOB 类型只能使用前缀索引</h5><p>因为MySQL 对索引字段长度是有限制的，所以 TEXT 类型只能使用前缀索引，并且 TEXT 列上是不能有默认值的。</p><h4 id="3-避免使用-ENUM-类型"><a href="#3-避免使用-ENUM-类型" class="headerlink" title="3. 避免使用 ENUM 类型"></a>3. 避免使用 ENUM 类型</h4><p>修改 ENUM 值需要使用 ALTER 语句；ENUM 类型的 ORDER BY 操作效率低，需要额外操作；禁止使用数值作为 ENUM 的枚举值。</p><h4 id="4-尽可能把所有列定义为-NOT-NULL"><a href="#4-尽可能把所有列定义为-NOT-NULL" class="headerlink" title="4. 尽可能把所有列定义为 NOT NULL"></a>4. 尽可能把所有列定义为 NOT NULL</h4><p>索引 NULL 列需要额外的空间来保存，所以要占用更多的空间；进行比较和计算时要对 NULL 值做特别的处理</p><h4 id="5-使用-TIMESTAMP-4-个字节-或-DATETIME-类型-8-个字节-存储时间"><a href="#5-使用-TIMESTAMP-4-个字节-或-DATETIME-类型-8-个字节-存储时间" class="headerlink" title="5. 使用 TIMESTAMP(4 个字节) 或 DATETIME 类型 (8 个字节) 存储时间"></a>5. 使用 TIMESTAMP(4 个字节) 或 DATETIME 类型 (8 个字节) 存储时间</h4><p>TIMESTAMP 占用 4 字节和 INT 相同，但比 INT 可读性高</p><p>超出 TIMESTAMP 取值范围的使用 DATETIME 类型存储</p><p>不要用字符串存储日期型的数据：无法用日期函数进行计算和比较；用字符串存储日期要占用更多的空间</p><h4 id="6-同财务相关的金额类数据必须使用-decimal-类型"><a href="#6-同财务相关的金额类数据必须使用-decimal-类型" class="headerlink" title="6. 同财务相关的金额类数据必须使用 decimal 类型"></a>6. 同财务相关的金额类数据必须使用 decimal 类型</h4><ul><li>非精准浮点：float,double</li><li>精准浮点：decimal</li></ul><p>Decimal 类型为精准浮点数，在计算时不会丢失精度</p><p>占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节；可用于存储比 bigint 更大的整型数据</p><h2 id="四、数据库索引设计规范"><a href="#四、数据库索引设计规范" class="headerlink" title="四、数据库索引设计规范"></a>四、数据库索引设计规范</h2><h4 id="1-限制每张表上的索引数量-建议单张表索引不超过-5-个"><a href="#1-限制每张表上的索引数量-建议单张表索引不超过-5-个" class="headerlink" title="1. 限制每张表上的索引数量,建议单张表索引不超过 5 个"></a>1. 限制每张表上的索引数量,建议单张表索引不超过 5 个</h4><p>索引并不是越多越好！索引可以提高效率同样可以降低效率。索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。</p><p>因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。</p><h4 id="2-禁止给表中的每一列都建立单独的索引"><a href="#2-禁止给表中的每一列都建立单独的索引" class="headerlink" title="2. 禁止给表中的每一列都建立单独的索引"></a>2. 禁止给表中的每一列都建立单独的索引</h4><p>5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。</p><h4 id="3-每个-Innodb-表必须有个主键"><a href="#3-每个-Innodb-表必须有个主键" class="headerlink" title="3. 每个 Innodb 表必须有个主键"></a>3. 每个 Innodb 表必须有个主键</h4><p>Innodb 是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种。</p><p>Innodb 是按照主键索引的顺序来组织表的</p><ul><li>不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引）</li><li>不要使用 UUID,MD5,HASH,字符串列作为主键（无法保证数据的顺序增长）</li><li>主键建议使用自增 ID 值</li></ul><h4 id="4-常见索引列建议"><a href="#4-常见索引列建议" class="headerlink" title="4. 常见索引列建议"></a>4. 常见索引列建议</h4><ul><li><p>出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列</p></li><li><p>包含在 ORDER BY、GROUP BY、DISTINCT 中的字段</p></li><li><p>并不要将符合 1 和 2 中的字段的列都建立一个索引， 通常将 1、2 中的字段建立联合索引效果更好</p></li><li><p>多表 join 的关联列</p></li></ul><h4 id="5-如何选择索引列的顺序"><a href="#5-如何选择索引列的顺序" class="headerlink" title="5.如何选择索引列的顺序"></a>5.如何选择索引列的顺序</h4><p>建立索引的目的是：希望通过索引进行数据查找，减少随机 IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。</p><ul><li><p>区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）</p></li><li><p>尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）</p></li><li><p>使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）</p></li></ul><h4 id="6-避免建立冗余索引和重复索引"><a href="#6-避免建立冗余索引和重复索引" class="headerlink" title="6.  避免建立冗余索引和重复索引"></a>6.  避免建立冗余索引和重复索引</h4><p>建立冗余索引和重复索引，增加了查询优化器生成执行计划的时间</p><p>重复索引示例：primary key(id)、index(id)、unique index(id)<br>冗余索引示例：index(a,b,c)、index(a,b)、index(a)</p><h4 id="7-对于频繁的查询优先考虑使用覆盖索引"><a href="#7-对于频繁的查询优先考虑使用覆盖索引" class="headerlink" title="7. 对于频繁的查询优先考虑使用覆盖索引"></a>7. 对于频繁的查询优先考虑使用覆盖索引</h4><h5 id="覆盖索引："><a href="#覆盖索引：" class="headerlink" title="覆盖索引："></a>覆盖索引：</h5><p>就是包含了所有查询字段 (where,select,ordery by,group by 包含的字段) 的索引</p><h5 id="覆盖索引的好处："><a href="#覆盖索引的好处：" class="headerlink" title="覆盖索引的好处："></a>覆盖索引的好处：</h5><ul><li>避免 Innodb <strong>表进行索引的二次查询</strong>: Innodb 是以聚集索引的顺序来存储的，对于 Innodb 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了 IO 操作，提升了查询效率。</li><li><strong>可以把随机 IO 变成顺序 IO 加快查询效率</strong>: 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。</li></ul><h4 id="8-索引-SET-规范"><a href="#8-索引-SET-规范" class="headerlink" title="8.索引 SET 规范"></a>8.索引 SET 规范</h4><h5 id="尽量避免使用外键约束"><a href="#尽量避免使用外键约束" class="headerlink" title="尽量避免使用外键约束"></a>尽量避免使用外键约束</h5><ul><li>不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引</li><li>外键可用于保证数据的参照完整性，但建议在业务端实现</li><li>外键会影响父表和子表的写操作从而降低性能</li></ul><h2 id="数据库-SQL-开发规范"><a href="#数据库-SQL-开发规范" class="headerlink" title="数据库 SQL 开发规范"></a>数据库 SQL 开发规范</h2><h4 id="1-建议使用预编译语句进行数据库操作"><a href="#1-建议使用预编译语句进行数据库操作" class="headerlink" title="1. 建议使用预编译语句进行数据库操作"></a>1. 建议使用预编译语句进行数据库操作</h4><ul><li><p>预编译语句可以重复使用这些计划，减少 SQL 编译所需要的时间，还可以解决动态 SQL 所带来的 SQL 注入的问题。</p></li><li><p>只传参数，比传递 SQL 语句更高效。</p></li><li><p>相同语句可以一次解析，多次使用，提高处理效率。</p></li></ul><h4 id="2-避免数据类型的隐式转换"><a href="#2-避免数据类型的隐式转换" class="headerlink" title="2. 避免数据类型的隐式转换"></a>2. 避免数据类型的隐式转换</h4><p>隐式转换会导致索引失效。</p><h4 id="3-充分利用表上已经存在的索引"><a href="#3-充分利用表上已经存在的索引" class="headerlink" title="3. 充分利用表上已经存在的索引"></a>3. 充分利用表上已经存在的索引</h4><p>避免使用双%号的查询条件。如：a like ‘%123%’，（如果无前置%,只有后置%，是可以用到列上的索引的）</p><p>一个 SQL 只能利用到复合索引中的一列进行范围查询。如：有 a,b,c 列的联合索引，在查询条件中有 a 列的范围查询，则在 b,c 列上的索引将不会被用到。</p><p>在定义联合索引时，如果 a 列要用到范围查找的话，就要把 a 列放到联合索引的右侧，使用 left join 或 not exists 来优化 not in 操作，因为 not in 也通常会使用索引失效。</p><h4 id="4-数据库设计时，应该要对以后扩展进行考虑"><a href="#4-数据库设计时，应该要对以后扩展进行考虑" class="headerlink" title="4. 数据库设计时，应该要对以后扩展进行考虑"></a>4. 数据库设计时，应该要对以后扩展进行考虑</h4><h4 id="5-程序连接不同的数据库使用不同的账号，禁止跨库查询"><a href="#5-程序连接不同的数据库使用不同的账号，禁止跨库查询" class="headerlink" title="5. 程序连接不同的数据库使用不同的账号，禁止跨库查询"></a>5. 程序连接不同的数据库使用不同的账号，禁止跨库查询</h4><ul><li>为数据库迁移和分库分表留出余地</li><li>降低业务耦合度</li><li>避免权限过大而产生的安全风险</li></ul><h4 id="6-禁止使用-SELECT-必须使用-SELECT-lt-字段列表-gt-查询"><a href="#6-禁止使用-SELECT-必须使用-SELECT-lt-字段列表-gt-查询" class="headerlink" title="6. 禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询"></a>6. 禁止使用 SELECT * 必须使用 SELECT &lt;字段列表&gt; 查询</h4><ul><li>消耗更多的 CPU 和 IO 以及网络带宽资源</li><li>无法使用覆盖索引</li><li>可减少表结构变更带来的影响</li></ul><h4 id="7-禁止使用不含字段列表的-INSERT-语句"><a href="#7-禁止使用不含字段列表的-INSERT-语句" class="headerlink" title="7. 禁止使用不含字段列表的 INSERT 语句"></a>7. 禁止使用不含字段列表的 INSERT 语句</h4><p>如：</p><pre><code>insert into values ('a','b','c');</code></pre><p>应使用：</p><pre><code>insert into t(c1,c2,c3) values ('a','b','c');</code></pre><h4 id="8-避免使用子查询，可以把子查询优化为-join-操作"><a href="#8-避免使用子查询，可以把子查询优化为-join-操作" class="headerlink" title="8. 避免使用子查询，可以把子查询优化为 join 操作"></a>8. 避免使用子查询，可以把子查询优化为 join 操作</h4><p>通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。</p><h5 id="子查询性能差的原因："><a href="#子查询性能差的原因：" class="headerlink" title="子查询性能差的原因："></a>子查询性能差的原因：</h5><p>子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p>由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><h4 id="9-避免使用-JOIN-关联太多的表"><a href="#9-避免使用-JOIN-关联太多的表" class="headerlink" title="9. 避免使用 JOIN 关联太多的表"></a>9. 避免使用 JOIN 关联太多的表</h4><p>对于 MySQL 来说，是存在关联缓存的，缓存的大小可以由 join_buffer_size 参数进行设置。</p><p>在 MySQL 中，对于同一个 SQL 多关联（join）一个表，就会多分配一个关联缓存，如果在一个 SQL 中关联的表越多，所占用的内存也就越大。</p><p>如果程序中大量的使用了多表关联的操作，同时 join_buffer_size 设置的也不合理的情况下，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。</p><p>同时对于关联操作来说，会产生临时表操作，影响查询效率，MySQL 最多允许关联 61 个表，建议不超过 5 个。</p><h4 id="10-减少同数据库的交互次数"><a href="#10-减少同数据库的交互次数" class="headerlink" title="10. 减少同数据库的交互次数"></a>10. 减少同数据库的交互次数</h4><p>数据库更适合处理批量操作，合并多个相同的操作到一起，可以提高处理效率。</p><h4 id="11-对应同一列进行-or-判断时，使用-in-代替-or"><a href="#11-对应同一列进行-or-判断时，使用-in-代替-or" class="headerlink" title="11. 对应同一列进行 or 判断时，使用 in 代替 or"></a>11. 对应同一列进行 or 判断时，使用 in 代替 or</h4><p>in 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。</p><h4 id="12-禁止使用-order-by-rand-进行随机排序"><a href="#12-禁止使用-order-by-rand-进行随机排序" class="headerlink" title="12. 禁止使用 order by rand() 进行随机排序"></a>12. 禁止使用 order by rand() 进行随机排序</h4><p>order by rand() 会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的 CPU 和 IO 及内存资源。</p><p>推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。</p><h4 id="13-WHERE-从句中禁止对列进行函数转换和计算"><a href="#13-WHERE-从句中禁止对列进行函数转换和计算" class="headerlink" title="13. WHERE 从句中禁止对列进行函数转换和计算"></a>13. WHERE 从句中禁止对列进行函数转换和计算</h4><p>对列进行函数转换或计算时会导致无法使用索引</p><p><strong>不推荐：</strong></p><pre class=" language-mysql"><code class="language-mysql">where date(create_time)='20190101'Copy to clipboardErrorCopied</code></pre><p><strong>推荐：</strong></p><pre class=" language-mysql"><code class="language-mysql">where create_time >= '20190101' and create_time < '20190102'</code></pre><h4 id="14-在明显不会有重复值时使用-UNION-ALL-而不是-UNION"><a href="#14-在明显不会有重复值时使用-UNION-ALL-而不是-UNION" class="headerlink" title="14. 在明显不会有重复值时使用 UNION ALL 而不是 UNION"></a>14. 在明显不会有重复值时使用 UNION ALL 而不是 UNION</h4><ul><li>UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作</li><li>UNION ALL 不会再对结果集进行去重操作</li></ul><h4 id="15-拆分复杂的大-SQL-为多个小-SQL"><a href="#15-拆分复杂的大-SQL-为多个小-SQL" class="headerlink" title="15. 拆分复杂的大 SQL 为多个小 SQL"></a>15. 拆分复杂的大 SQL 为多个小 SQL</h4><ul><li>大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL</li><li>MySQL 中，一个 SQL 只能使用一个 CPU 进行计算</li><li>SQL 拆分后可以通过并行执行来提高处理效率</li></ul><h2 id="五、数据库操作行为规范"><a href="#五、数据库操作行为规范" class="headerlink" title="五、数据库操作行为规范"></a>五、数据库操作行为规范</h2><h4 id="1-超-100-万行的批量写-UPDATE-DELETE-INSERT-操作-要分批多次进行操作"><a href="#1-超-100-万行的批量写-UPDATE-DELETE-INSERT-操作-要分批多次进行操作" class="headerlink" title="1. 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作"></a>1. 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作</h4><h5 id="大批量操作可能会造成严重的主从延迟"><a href="#大批量操作可能会造成严重的主从延迟" class="headerlink" title="大批量操作可能会造成严重的主从延迟"></a>大批量操作可能会造成严重的主从延迟</h5><p>主从环境中,大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间， 而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况</p><h5 id="binlog-日志为-row-格式时会产生大量的日志"><a href="#binlog-日志为-row-格式时会产生大量的日志" class="headerlink" title="binlog 日志为 row 格式时会产生大量的日志"></a>binlog 日志为 row 格式时会产生大量的日志</h5><p>大批量写操作会产生大量日志，特别是对于 row 格式二进制数据而言，由于在 row 格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因</p><h5 id="避免产生大事务操作"><a href="#避免产生大事务操作" class="headerlink" title="避免产生大事务操作"></a>避免产生大事务操作</h5><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对 MySQL 的性能产生非常大的影响。</p><p>特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批</p><h4 id="2-对于大表使用-pt-online-schema-change-修改表结构"><a href="#2-对于大表使用-pt-online-schema-change-修改表结构" class="headerlink" title="2. 对于大表使用 pt-online-schema-change 修改表结构"></a>2. 对于大表使用 pt-online-schema-change 修改表结构</h4><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。</p><ul><li>避免大表修改产生的主从延迟</li><li>避免在对表字段进行修改时进行锁表</li></ul><p>pt-online-schema-change 它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。把原来一个 DDL 操作，分解成多个小的批次进行。</p><h4 id="3-禁止为程序使用的账号赋予-super-权限"><a href="#3-禁止为程序使用的账号赋予-super-权限" class="headerlink" title="3. 禁止为程序使用的账号赋予 super 权限"></a>3. 禁止为程序使用的账号赋予 super 权限</h4><ul><li>当达到最大连接数限制时，还运行 1 个有 super 权限的用户连接</li><li>super 权限只能留给 DBA 处理问题的账号使用</li></ul><h4 id="4-对于程序连接数据库账号-遵循权限最小原则"><a href="#4-对于程序连接数据库账号-遵循权限最小原则" class="headerlink" title="4. 对于程序连接数据库账号,遵循权限最小原则"></a>4. 对于程序连接数据库账号,遵循权限最小原则</h4><ul><li>程序使用数据库账号只能在一个 DB 下使用，不准跨库</li><li>程序使用的账号原则上不准有 drop 权限</li></ul><blockquote><p>参考</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/database/MySQL高性能优化规范建议" target="_blank" rel="noopener">MySQL高性能优化规范建议</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库索引</title>
      <link href="/2020/06/05/mysql-shu-ju-ku-suo-yin/"/>
      <url>/2020/06/05/mysql-shu-ju-ku-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是索引？"><a href="#1、什么是索引？" class="headerlink" title="1、什么是索引？"></a>1、什么是索引？</h2><p><strong>定义</strong>：索引是一种用于快速查询和检索数据的数据结构。</p><p><strong>常见的索引结构</strong>: B树， B+树和Hash。</p><p><strong>作用</strong>：相当于目录，比如我们字典的目录页，我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。</p><h2 id="2、为什么要使用索引？"><a href="#2、为什么要使用索引？" class="headerlink" title="2、为什么要使用索引？"></a>2、为什么要使用索引？</h2><ol><li>可以大大加快数据的检索速度（大大减少的检索的数据量）。</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>帮助服务器避免排序和临时表。</li><li>将随机IO变为顺序IO</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li></ol><h2 id="3、为什么索引能提高查询速度？"><a href="#3、为什么索引能提高查询速度？" class="headerlink" title="3、为什么索引能提高查询速度？"></a>3、为什么索引能提高查询速度？</h2><p>MySQL的基本存储结构是页，记录都存在页里边。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfkss75ytfj30u00yvncb.jpg" alt="" style="zoom:50%;"><ul><li><p><strong>各个数据页可以组成一个双向链表</strong></p></li><li><p><strong>每个数据页中的记录又可以组成一个单向链表</strong></p><p>每个数据页都会为存储在它里边儿的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</p><p>以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录。</p></li></ul><h4 id="使用索引之前"><a href="#使用索引之前" class="headerlink" title="使用索引之前"></a>使用索引之前</h4><p>如果我们写<code>select * from user where indexname = 'xxx'</code>这样没有进行任何优化的sql语句，默认会这样做：</p><ol><li><strong>定位到记录所在的页：需要遍历双向链表，找到所在的页</strong></li><li><strong>从所在的页内中查找相应的记录：由于不是根据主键查询，只能遍历所在页的单链表了</strong></li></ol><p>很明显，在数据量很大的情况下这样查找会很慢！这样的时间复杂度为O（n）。</p><h4 id="使用索引之后"><a href="#使用索引之后" class="headerlink" title="使用索引之后"></a>使用索引之后</h4><p>底层结构就是B+树，B+树作为树的一种实现，能够让我们很快地查找出对应的记录。</p><p>如果我们要找到id为8的记录，步骤如下：</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfksw4epksj31kl0u0e81.jpg" alt="" style="zoom:50%;"><p>从上述查找过程可以看出，没有用索引时，我们是需要遍历双向链表来定位对应的页，现在通过 <strong>“目录”</strong> 就可以很快地定位到对应的页上了！（二分查找，时间复杂度近似为O(logn)）</p><h2 id="4、Mysql索引主要使用的两种数据结构"><a href="#4、Mysql索引主要使用的两种数据结构" class="headerlink" title="4、Mysql索引主要使用的两种数据结构"></a>4、Mysql索引主要使用的两种数据结构</h2><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>哈希索引底层的数据结构就是哈希（Hash）表，在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快，能够在很短的时间内，根据Hash函数定位到数据所在的位置；其余大部分场景，建议选择BTree索引。</p><h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B Tree索引"></a>B Tree索引</h3><p>数据库索引使用树结构进行存储，查询效率高，可以保持有序。</p><h4 id="数据库索引为什么不使用二叉查找树实现？"><a href="#数据库索引为什么不使用二叉查找树实现？" class="headerlink" title="数据库索引为什么不使用二叉查找树实现？"></a>数据库索引为什么不使用二叉查找树实现？</h4><p>从算法逻辑上来说，二叉查找树的查询速度和比较次数是最小的，但是需要考虑现实问题，就是磁盘IO的问题，数据库索引是存储在磁盘上的，数据量很大的时候，索引大小就很多，当利用索引查询的时候，我们不能把整个索引加载到内存，能做的只有逐一加载每一个磁盘页，这里的磁盘页对应着索引树的节点。当使用二叉树作为索引节点查询值的时候，在最坏情况下，磁盘IO次数等于索引树的高度，为了减少磁盘IO次数，就需要降低树的高度，所以就要引入B Tree。</p><h4 id="B树和B-树比较？"><a href="#B树和B-树比较？" class="headerlink" title="B树和B+树比较？"></a>B树和B+树比较？</h4><ul><li><strong>B+树单一节点存储更多的元素，使得查询的IO次数更少</strong>：B树的所有节点既存放键(key) 也存放数据(data);而B+树只有叶子节点存放 key 和 data，其他内节点只存放key。</li><li><strong>B+树所有叶子节点形成有序链表，便于范围查询</strong>：B树的叶子节点都是独立的；B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li><strong>B+树的查询性能稳定</strong>：B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li></ul><h4 id="B-树和红黑树的比较？"><a href="#B-树和红黑树的比较？" class="headerlink" title="B+树和红黑树的比较？"></a>B+树和红黑树的比较？</h4><ul><li><p><strong>B+树有更少的查找次数</strong>：因为红黑树的树高很明显比 B+ Tree 大非常多，查找的次数也就更多。</p></li><li><p><strong>B+树能够利用磁盘预读特性</strong>：为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。并且可以利用预读特性，相邻的节点也能够被预先载入。</p></li></ul><h4 id="MyISAM和InnoDB实现BTree索引方式的区别？"><a href="#MyISAM和InnoDB实现BTree索引方式的区别？" class="headerlink" title="MyISAM和InnoDB实现BTree索引方式的区别？"></a>MyISAM和InnoDB实现BTree索引方式的区别？</h4><h5 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h5><p>B+Tree叶节点的data域存放的是数据记录的地址。在索引检索的时候，首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引”。</p><h5 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h5><p>其数据文件本身就是索引文件。相比MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按B+Tree组织的一个索引结构，树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。这被称为“聚簇索引”，而其余的索引都作为辅助索引，辅助索引的data域存储相应记录主键的值而不是地址，这也是和MyISAM不同的地方。在根据主索引搜索时，直接找到key所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</p><h3 id="Hash索引和-B-Tree索引比较"><a href="#Hash索引和-B-Tree索引比较" class="headerlink" title="Hash索引和 B+ Tree索引比较"></a>Hash索引和 B+ Tree索引比较</h3><p>Hash索引存在Hash冲突的问题；不支持顺序和范围查询，而B+树支持。</p><h2 id="5、索引的缺点？"><a href="#5、索引的缺点？" class="headerlink" title="5、索引的缺点？"></a>5、索引的缺点？</h2><ol><li><strong>创建索引和维护索引需要耗费许多时间</strong>：当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低SQL执行效率。</li><li><strong>占用物理存储空间</strong> ：索引需要使用物理文件存储，也会耗费一定空间。</li></ol><h2 id="6、Mysql中如何为表字段添加索引？"><a href="#6、Mysql中如何为表字段添加索引？" class="headerlink" title="6、Mysql中如何为表字段添加索引？"></a>6、Mysql中如何为表字段添加索引？</h2><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><pre class=" language-mysql"><code class="language-mysql"># 添加PRIMARY KEYALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) </code></pre><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><pre class=" language-mysql"><code class="language-mysql"># 添加UNIQUEALTER TABLE `table_name` ADD UNIQUE ( `column` ) </code></pre><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><pre class=" language-mysql"><code class="language-mysql"># 添加INDEXALTER TABLE `table_name` ADD INDEX index_name ( `column` )</code></pre><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><pre class=" language-mysql"><code class="language-mysql"># 添加FULLTEXTALTER TABLE `table_name` ADD FULLTEXT ( `column`) </code></pre><h4 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h4><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</code></pre><blockquote><p>参考</p><p>[MySQL索引](<a href="https://snailclimb.gitee.io/javaguide/#/docs/database/MySQL" target="_blank" rel="noopener">https://snailclimb.gitee.io/javaguide/#/docs/database/MySQL</a> Index)</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位操作总结</title>
      <link href="/2020/06/04/wei-cao-zuo-zong-jie/"/>
      <url>/2020/06/04/wei-cao-zuo-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>在计算机中所有数据都是以二进制的形式储存的。位运算其实就是直接对在内存中的二进制数据进行操作，因此处理数据的速度非常快。</p><h3 id="一、二进制的表现形式"><a href="#一、二进制的表现形式" class="headerlink" title="一、二进制的表现形式"></a>一、二进制的表现形式</h3><p>计算机内部存储、计算的任何信息都是由二进制（0和1）表示，而二进制有三种不同的表示形式：<strong>原码</strong>、<strong>反码</strong>和<strong>补码。</strong>计算机内部使用<strong>补码</strong>来表示。</p><ul><li><p>原码：其二进制表示（有一位符号位）</p></li><li><p>反码：正数的反码就是原码，负数的反码是符号位不变，其余位取反</p></li><li><p>补码：正数的补码就是原码，负数的补码是反码+1</p></li></ul><p>符号位，最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p><h3 id="二、基本位操作"><a href="#二、基本位操作" class="headerlink" title="二、基本位操作"></a>二、基本位操作</h3><p>基本的位操作符有与、或、异或、取反、左移、右移这6种，如下所示：</p><table><thead><tr><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>&amp;</code></td><td align="center">按位与</td></tr><tr><td align="center"><code>｜</code></td><td align="center">按位或</td></tr><tr><td align="center"><code>^</code></td><td align="center">按位异或</td></tr><tr><td align="center"><code>~</code></td><td align="center">按位非</td></tr><tr><td align="center"><code>&lt;&lt;</code></td><td align="center">左移</td></tr><tr><td align="center"><code>&gt;&gt;</code></td><td align="center">右移</td></tr></tbody></table><h4 id="按位与-amp"><a href="#按位与-amp" class="headerlink" title="按位与&amp;"></a>按位与<code>&amp;</code></h4><p>运算规则：其中两位都为1结果为1，其他情况为0</p><p>运算符：二目运算符</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">17</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token number">00000011</span><span class="token number">17</span> <span class="token operator">=</span> <span class="token number">00010001</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">17</span> <span class="token operator">=</span> <span class="token number">00000001</span></code></pre><h4 id="按位或｜"><a href="#按位或｜" class="headerlink" title="按位或｜"></a>按位或<code>｜</code></h4><p>运算规则：两个位都为0时，结果才为0，至少有1位为1结果就为1</p><p>运算符：二目运算符</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">17</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token number">00000011</span><span class="token number">17</span> <span class="token operator">=</span> <span class="token number">00010001</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">17</span> <span class="token operator">=</span> <span class="token number">00010011</span> </code></pre><h4 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或^"></a>按位异或<code>^</code></h4><p>运算规则：两个位相同为0，相异为1</p><p>运算符：二目运算符</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token number">3</span> <span class="token operator">^</span> <span class="token number">17</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token number">00000011</span><span class="token number">17</span> <span class="token operator">=</span> <span class="token number">00010001</span><span class="token number">3</span> <span class="token operator">^</span> <span class="token number">17</span> <span class="token operator">=</span> <span class="token number">00010010</span></code></pre><blockquote><p><em>小技巧</em></p><p>异或是不进位加法，两个数做加法，把进位舍去</p></blockquote><h4 id="按位非～"><a href="#按位非～" class="headerlink" title="按位非～"></a>按位非<code>～</code></h4><p>运算规则：对操作数进行按位取反，原来为1结果为0，原来为0结果为1。</p><p>运算符：单目运算符</p><p>示例：</p><pre class=" language-java"><code class="language-java">～<span class="token number">9</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span>转二进制：<span class="token number">0</span> <span class="token number">1001</span>计算补码：<span class="token number">0</span> <span class="token number">1001</span>按位取反：<span class="token number">1</span> <span class="token number">0110</span>转为原码：按位取反：<span class="token number">1</span> <span class="token number">1001</span>  末位加一：<span class="token number">1</span> <span class="token number">1010</span>符号位为<span class="token number">1</span>是负数，即 <span class="token operator">~</span><span class="token number">9</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span></code></pre><blockquote><p><em>小技巧</em></p><p>所有正整数的按位取反是其本身+1的负数</p><p>所有负整数的按位取反是其本身+1的绝对值</p><p>零的按位取反是 -1</p></blockquote><h4 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移<<"></a>左移<code>&lt;&lt;</code></h4><p>运算规则：把操作数整体向左移动</p><p>运算符：二目运算符</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token number">33</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">00100001</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">10000100</span> <span class="token operator">=</span> <span class="token number">132</span></code></pre><blockquote><p><em>小技巧</em></p><p> $a &lt;&lt; n = a * 2^n$ (a为正数)</p></blockquote><h4 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移>>"></a>右移<code>&gt;&gt;</code></h4><p>运算规则：把操作数整体向右移动</p><p>运算符：二目运算符</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token number">33</span> <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">00100001</span> <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">00001000</span> <span class="token operator">=</span> <span class="token number">8</span></code></pre><blockquote><p><em>小技巧</em></p><p> $a &gt;&gt; n = a / 2^n$ (a为正数)</p></blockquote><p><strong>位操作只能用于整形数据，对float和double类型进行位操作会被编译器报错。</strong></p><h3 id="三、常用的位操作技巧"><a href="#三、常用的位操作技巧" class="headerlink" title="三、常用的位操作技巧"></a>三、常用的位操作技巧</h3><h4 id="1、判断奇偶数"><a href="#1、判断奇偶数" class="headerlink" title="1、判断奇偶数"></a>1、判断奇偶数</h4><p>只需要判断已知数的二进制数末尾是0还是1，如果为0就是偶数，为1就是奇数。</p><p>求0-50之间所有的偶数代码示例如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0-50之间所有的偶数："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、不用加减乘除做加法"><a href="#2、不用加减乘除做加法" class="headerlink" title="2、不用加减乘除做加法"></a>2、不用加减乘除做加法</h4><p>异或是按位相同为0不同为1，其实就是做加法的过程把进位舍去了。如果两数相加没有进位就直接可以使用异或，如果有进位，就把进位加上。</p><p>有进位的地方就是两个位都为1的地方，这就可以利用按位与运算了，把两数相与的结果左移一位就是进位的结果。</p><pre class=" language-java"><code class="language-java">a <span class="token operator">+</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>不用加减乘除做加法的代码示例如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 循环法1</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当进位为 0 时跳出</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// c = 进位</span>            a <span class="token operator">^=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a = 非进位和</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b = 进位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归法2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num1<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span>num1 <span class="token operator">^</span> num2<span class="token punctuation">,</span> <span class="token punctuation">(</span>num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3、只出现一次的数字"><a href="#3、只出现一次的数字" class="headerlink" title="3、只出现一次的数字"></a>3、只出现一次的数字</h4><p>两个相同的数异或为0，一个数和0异或结果不变，那么异或两次相当于没有异或，即<code>a ^ b ^ b = a</code></p><p>给一个数组，数组中的数字只有一个出现了一次，其他的都出现了两次，找出这个只出现一次的数字，代码示例如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">^=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4、交换两数"><a href="#4、交换两数" class="headerlink" title="4、交换两数"></a>4、交换两数</h4><blockquote><p><a href="https://blog.csdn.net/MoreWindows/article/details/7354571" target="_blank" rel="noopener">https://blog.csdn.net/MoreWindows/article/details/7354571</a></p><p><a href="https://www.cnblogs.com/wxisme/p/8858514.html" target="_blank" rel="noopener">https://www.cnblogs.com/wxisme/p/8858514.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot项目部署到服务器</title>
      <link href="/2020/05/30/spring-boot-xiang-mu-bu-shu-dao-fu-wu-qi/"/>
      <url>/2020/05/30/spring-boot-xiang-mu-bu-shu-dao-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h3><p>jar包方式启动，也就是使用spring boot内置的tomcat运行。</p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>jdk1.8及以上</p><p>mysql</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>1、首先通过maven打包成jar包，如下图所示。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfah5hl0fsj31gl0u0wtg.jpg" alt=""></p><p>2、将jar包传送到服务器某一目录下。</p><pre class=" language-cmd"><code class="language-cmd">scp pest-0.0.1-SNAPSHOT.jar root@123.57.245.4:/home</code></pre><p>3、在服务器对应的目录下执行命令</p><pre class=" language-cmd"><code class="language-cmd"># 这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。nohup java -jar pest-0.0.1-SNAPSHOT.jar >tmp.txt &</code></pre><p>查看日志：<code>cat tmp.txt</code>，项目已经成功启动</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfahca9mplj313a0n2dl1.jpg" alt=""></p><p>4、在阿里云服务器上开放项目设置的对应端口（我的项目端口是8083）</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfdxmz8n7lj32640fgjty.jpg" alt=""></p><p>5、浏览器输入对应的IP地址及端口号进行查看。</p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>在Spring 启动时，报错<code>No active profile set, falling back to default profiles default</code>这是Spring程序启动时没有找到默认的配置文件所引发的错误，默认文件<code>application.yml</code>，一般在项目中都会有多个，如有正式环境、测试环境等。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>因为我原来只有一个配置文件<code>application.yml</code>，之后又新增了一个配置文件<code>application-dev.yml</code>，然后在<code>application.yml</code>中进行配置，如下图所示。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfahgyq293j318k08idhg.jpg" alt=""></p><p>然后再次打包，重新启动，此时正常运行（如上日志文件标注）。</p><h4 id="linux-下查看进程及端口"><a href="#linux-下查看进程及端口" class="headerlink" title="linux 下查看进程及端口"></a>linux 下查看进程及端口</h4><pre class=" language-shell"><code class="language-shell">查看程序对应的进程号： ps -ef | grep 进程名字查看进程号所占用的端口号： netstat -nltp | grep  进程号ubuntu :查看进程占用端口号：netstat -anp | grep pid</code></pre><p><code>查看java进程：ps -ef|grep java</code></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfdxjndmi5j30wa03sgma.jpg" alt=""></p><p><code>查看进程号所占用的端口号： netstat -nltp | grep  进程号</code></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfdxjscjthj30wi0303yp.jpg" alt=""></p><p><code>关闭java进程：kill -9 30141(PID)</code></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfdxjx4re0j30wg03omxn.jpg" alt=""></p><p>阿里云服务器安装tensorflow</p><pre><code>pip3 install tensorflow==1.13.1pip3 install numpy==1.16.2pip3 install --upgrade tensorflow-gpu</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MNIST数字识别</title>
      <link href="/2020/05/25/mnist-shu-zi-shi-bie/"/>
      <url>/2020/05/25/mnist-shu-zi-shi-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="变量管理"><a href="#变量管理" class="headerlink" title="变量管理"></a>变量管理</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># get_variable</span><span class="token comment" spellcheck="true">#根据变量名称直接获取，如果不存在就创建一个新的</span>emb <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variab1e<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"emb"</span>，<span class="token comment" spellcheck="true">#变量名称(必填)</span>                                            shape <span class="token comment" spellcheck="true">#词向量维度</span>                                            initializer<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 词向量矩阵, 训练好的</span><span class="token comment" spellcheck="true"># Variable</span><span class="token comment" spellcheck="true">#创建一个新的变量,用具体的值初始化，变量名称可选</span>emb <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>initializer，<span class="token comment" spellcheck="true">#词向量矩阵,训练好的</span>                                    name<span class="token operator">=</span><span class="token string">"emb"</span> <span class="token comment" spellcheck="true">#变量名称(可选)</span></code></pre><p><code>tf.Variable + tf. name_ scope</code>通过组合可以简化命名参数，合理组织参数，在Tensorboard可视化展示过程中更加清晰结构逻辑<br><code>tf.get_variable + tf.variab1e_scope</code>主要用于实现参数共享</p><h4 id="Variable-name-scope"><a href="#Variable-name-scope" class="headerlink" title="Variable+name_ scope"></a>Variable+name_ scope</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在conv1命名空间下定义变量</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">'conv1'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> scope<span class="token punctuation">:</span>            weights1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> name<span class="token operator">=</span> <span class="token string">'weights'</span><span class="token punctuation">)</span>            bias1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'bias'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在conv2命名空间下定义变量</span><span class="token keyword">with</span> tf <span class="token punctuation">.</span> name_ scoрe<span class="token punctuation">(</span><span class="token string">' conv2'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> scope <span class="token punctuation">:</span>            weights2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span> <span class="token string">'weights'</span><span class="token punctuation">)</span>            bias2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.33</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'bias'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>weights1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># conv1/wei ghts</span><span class="token keyword">print</span> <span class="token punctuation">(</span>weights2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># conv2/wei ghts</span></code></pre><h4 id="get-variable-variable-scope"><a href="#get-variable-variable-scope" class="headerlink" title="get_variable +variable_scope"></a>get_variable +variable_scope</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据变量名称直接获取，如果不存在就创建一个新的</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span>“s1"<span class="token punctuation">)</span><span class="token punctuation">:</span>V <span class="token operator">=</span> get_variab1e<span class="token punctuation">(</span>“V"， shape1<span class="token punctuation">,</span> initializer1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建失败，由于变量名“V”已经存在</span>v1 <span class="token operator">=</span> get_variab1e<span class="token punctuation">(</span>“v"， shape1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果已经存在，直接返回当前变量</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>variab1e_scope<span class="token punctuation">(</span>“s1"， reuse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>v2 <span class="token operator">=</span> get_variab1e<span class="token punctuation">(</span>“V"， shape1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出True， 都是s1/v</span><span class="token keyword">print</span> <span class="token punctuation">(</span>V<span class="token operator">==</span>v2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#変量空囘s1下創建変量v</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>variab1e_scope<span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>v <span class="token operator">=</span> get_variab1e<span class="token punctuation">(</span>“v"<span class="token punctuation">,</span> shape1<span class="token punctuation">,</span> initializer1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#輸出s1/v:0</span><span class="token comment" spellcheck="true">#変量空囘s2下創建変量v</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>variab1e_scope<span class="token punctuation">(</span><span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>v <span class="token operator">=</span> get_variab1e<span class="token punctuation">(</span>“v"<span class="token punctuation">,</span> shape1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#輸出s2/v:0</span><span class="token comment" spellcheck="true">#変量空囘s2下創建変量v</span>V <span class="token operator">=</span> get_variab1e<span class="token punctuation">(</span>“s1<span class="token operator">/</span>v"<span class="token punctuation">,</span> shape1<span class="token punctuation">)</span></code></pre><h4 id="variable-scope-VS-name-scope"><a href="#variable-scope-VS-name-scope" class="headerlink" title="variable_scope VS . name_scope"></a>variable_scope VS . name_scope</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在name_scope下凋用get_variable</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span>“s1"<span class="token punctuation">)</span><span class="token punctuation">:</span>            v <span class="token operator">=</span> get_variable<span class="token punctuation">(</span>“v"， shape1<span class="token punctuation">,</span> initializer1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#輸出v:0</span><span class="token comment" spellcheck="true">#在variable_scope下凋用Variable</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>variab1e_scope<span class="token punctuation">(</span>“s2"<span class="token punctuation">)</span><span class="token punctuation">:</span>v <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variab1e<span class="token punctuation">(</span>“v"<span class="token punctuation">,</span> shape1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#輸出s2/v:0</span></code></pre><p><strong>get_variable是不受name_scope的限制</strong></p><h3 id="持久化管理"><a href="#持久化管理" class="headerlink" title="持久化管理"></a>持久化管理</h3><h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 前续TensorFlow代码</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#用于保存模型参数</span>saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>With tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">#保存模型到制定路径下</span>            saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">"path/to/model/model.ckpt"</span><span class="token punctuation">)</span></code></pre><p>生成三个文件:</p><ol><li><code>model.ckpt.meta</code> 计算图结构，模型结构</li><li><code>model.ckpt</code> 模型参数</li><li><code>checkpoint</code> 所有模型文件列表</li></ol><h4 id="部分保存"><a href="#部分保存" class="headerlink" title="部分保存"></a>部分保存</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 前续TensorFlow代码</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#用于保存模型参数，通过词典给出要保存的参数列表</span>saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"v1"</span><span class="token punctuation">:</span>v1<span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">:</span>v2<span class="token punctuation">}</span><span class="token punctuation">)</span>With tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">#保存模型到制定路径下</span>            saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">"path/to/model/model.ckpt"</span><span class="token punctuation">)</span></code></pre><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 前续TensorFlow代码</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#用于保存模型参数</span>saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>With tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">#导入指定路径下的模型</span>            saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">"path/to/model/model.ckpt"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   <span class="token comment" spellcheck="true">#直接加载计算结构图</span>saver <span class="token operator">=</span> tf<span class="token punctuation">.</span> train<span class="token punctuation">.</span> import_meta_graph<span class="token punctuation">(</span><span class="token string">"path/to/model/model.ckpt/mode1.ckpt.meta"</span><span class="token punctuation">)</span>With tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">#导入指定路径下的模型</span>            saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> <span class="token string">"path/to/model/model.ckpt"</span><span class="token punctuation">)</span></code></pre><h3 id="滑动平均模型"><a href="#滑动平均模型" class="headerlink" title="滑动平均模型"></a>滑动平均模型</h3><p>滑动平均模型可以使模型在测试数据上更健壮，适合基于梯度下降算法训练神经网络的过程。在TensorFlow中提供了该模型: <code>tf.train.ExponentialMovingAverage</code></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3e5gptfkj30v60a2ac7.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义一个变量</span>v1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variab1e<span class="token punctuation">(</span><span class="token number">0</span>， dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>f1oat32<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_updates变量更新次数</span>step <span class="token operator">=</span> tf<span class="token punctuation">.</span>variab1e<span class="token punctuation">(</span><span class="token number">0</span>， trainab1e<span class="token operator">=</span>Fa1se<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义一个滑动平均模型，给出decay和num_updates</span>ema<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Exponentia1MovingAverage<span class="token punctuation">(</span><span class="token number">0.99</span>，step<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义一个滑动平均计算操作，给出要维护的变量列表</span>maintain_averages_op <span class="token operator">=</span> ema<span class="token punctuation">.</span>app1y<span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span>With tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            sess<span class="token punctuation">.</span> run<span class="token punctuation">(</span>maintain_averages_op<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 运行滑动平均模型</span></code></pre><h3 id="学习速率衰减"><a href="#学习速率衰减" class="headerlink" title="学习速率衰减"></a>学习速率衰减</h3><p>训练前期使用较大的学习率加速，让模型快速收敛,训练过程中主键减小学习速率，到训练后期使用较小的学习率,使模型在训练后期更稳定。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3edh3v2qj30p003eaas.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TensorFlow支持的学习速率衰减策略</span>exponential_decaytf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>exponential_decay<span class="token punctuation">(</span>learning_rate<span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 初始学习率</span>                          global_step<span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 当前迭代次数</span>                          decay_steps<span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 衰减速度，在迭代到该次数时衰减</span>                          decay_rate<span class="token comment" spellcheck="true"># 学习率衰减系数，通常介于0-1之间)</span>inverse_time_decaynatural_exp_decaypiecewise_constantpolynomial_decay</code></pre><h3 id="多目标优化"><a href="#多目标优化" class="headerlink" title="多目标优化"></a>多目标优化</h3><p>有时需要同时维护多套参数。例如，使用滑动平均模型时除了模型参数，还需要维护模型参数对应的影子变量。这个时候可以通过group和control_ dependencies完成。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># group</span>tf<span class="token punctuation">.</span>group<span class="token punctuation">(</span>train_part1<span class="token punctuation">,</span> train_part2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># control_denendencies</span>With tf<span class="token punctuation">.</span>control_dependencies<span class="token punctuation">(</span><span class="token punctuation">[</span>train_p1<span class="token punctuation">,</span> train_p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>no_op <span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span></code></pre><h2 id="MNIST数字识别程序构成"><a href="#MNIST数字识别程序构成" class="headerlink" title="MNIST数字识别程序构成"></a>MNIST数字识别程序构成</h2><p><code>mnist_inference.py</code> 前馈计算，定义神经网络模型结构。<br><code>mnist_train.py</code> 模型训练，定义神经网络的训练过程。<br><code>mnist_eval.py</code> 模型评价，定义程序测试过程。</p><h3 id="前馈计算"><a href="#前馈计算" class="headerlink" title="前馈计算"></a>前馈计算</h3><ul><li>导入Mnist数据集</li><li>设置神经网络结构相关的参数</li><li>定义获取变量函数</li><li>定义神经网络的前向传播过程</li></ul><h4 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h4><p>MNIST是一个手写体数字识别数据集，它的训练数据集包含60000张图片，测试数据集包含10000张图片，其中每一-张图片都代表0~9中的一个数字。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3ejn502pj30qk0dmwhk.jpg" alt="手写数字识别数据集" style="zoom:50%;"><h4 id="1、导入Mnist数据集"><a href="#1、导入Mnist数据集" class="headerlink" title="1、导入Mnist数据集"></a>1、导入Mnist数据集</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*</span><span class="token comment" spellcheck="true"># 从Tensorflow里边加载MNIST数据集</span><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data<span class="token comment" spellcheck="true"># 载入MBNIST数据集，如果之前没有下载过，则会自动下载到相应的目录</span>mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span><span class="token string">'./path/MNIST_data'</span><span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印training_data_size: 55000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'training_data_size:'</span><span class="token punctuation">,</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>num_examples<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印Example training data</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Example training data:'</span><span class="token punctuation">,</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>输出结果</p><pre><code>training_data_size: 55000Example training data: [0.         0.         0.         ...  0.3803922  0.37647063 0.30196080.81568635 0.7803922  0.7803922  0.7803922  .... 0.         0.        ]</code></pre><blockquote><p>代码中的one hot=True ，表示将样本标签转化为one hot 编码。<br>举例来解释one_hot 编码： 假如一共10 类。0 的one_hot 为1000000000,1 的one_hot为0100000000 , 2 的one hot 为0010000000 , 3 的one hot 为0001000000 ..…·依此类推。只有一个位为1 , 1 所在的位置就代表着第几类。</p></blockquote><h4 id="2、设置神经网络结构相关的参数"><a href="#2、设置神经网络结构相关的参数" class="headerlink" title="2、设置神经网络结构相关的参数"></a>2、设置神经网络结构相关的参数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输入层的节点数。对于MNIST数据集，这个等于图片的总像素=28*28</span>INPUT_NODE <span class="token operator">=</span> <span class="token number">784</span><span class="token comment" spellcheck="true"># 输出层的节点数。在MNIST数据集中有0~9这10个数字类别</span>OUTPUT_NODE <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 神经网络隐藏节点数</span>LAYERl_NODE <span class="token operator">=</span> <span class="token number">500</span></code></pre><h4 id="3、定义获取变量函数"><a href="#3、定义获取变量函数" class="headerlink" title="3、定义获取变量函数"></a>3、定义获取变量函数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_weight_variable</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># shape是变量的大小，regularizer是正则化函数。</span>    <span class="token comment" spellcheck="true"># tf.truncated_normal_initializer是正态分布初始化函数</span>    weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">"weights"</span><span class="token punctuation">,</span> shape<span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span>stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tf.add_to_collections 将当前变量的正则化损失加入名字为1osses的集合</span>    <span class="token keyword">if</span> regularizer <span class="token operator">!=</span> None<span class="token punctuation">:</span>        tf<span class="token punctuation">.</span>add_to_col1ections<span class="token punctuation">(</span><span class="token string">'losses'</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> weights</code></pre><h4 id="4、定义神经网络的前向传播过程"><a href="#4、定义神经网络的前向传播过程" class="headerlink" title="4、定义神经网络的前向传播过程"></a>4、定义神经网络的前向传播过程</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inference</span><span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 声明第一层神经网络的名 命空间'layer1'及相关变量，并完成前向传播过程</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">"layer1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weights <span class="token operator">=</span> get_weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span>INPUT_NODE<span class="token punctuation">,</span> LAYERl_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span>        biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variab1e<span class="token punctuation">(</span><span class="token string">"biases"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>LAYERl_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> weights<span class="token punctuation">)</span> <span class="token operator">+</span> biases        <span class="token comment" spellcheck="true"># 使用relu激活函数</span>        layer1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>output1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 声明第二层神经网络的名命空间'layer2’及相关变量，并完成前向传播过程</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">'layer2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weights <span class="token operator">=</span> get_weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span>LAYERl_NODE<span class="token punctuation">,</span> OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span>        biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">'biases'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layer2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>layer1<span class="token punctuation">,</span> weights<span class="token punctuation">)</span> <span class="token operator">+</span> biases    <span class="token comment" spellcheck="true"># 返回前向传播的结果</span>    <span class="token keyword">return</span> layer2</code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><ul><li>配置训练参数</li><li>定义训练模型</li><li>进行训练</li></ul><h4 id="配置训练参数"><a href="#配置训练参数" class="headerlink" title="配置训练参数"></a>配置训练参数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一个训练batch中的训练数据个数</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">100</span><span class="token comment" spellcheck="true"># 基础学习率</span>LEARNING_RATE_BASE <span class="token operator">=</span> <span class="token number">0.8</span><span class="token comment" spellcheck="true"># 学习率的衰减率</span>LEARNING_RATE_DECAY <span class="token operator">=</span> <span class="token number">0.99</span><span class="token comment" spellcheck="true"># 正则化项在损失函数里的系数</span>REGULARAZTION_RATE <span class="token operator">=</span> <span class="token number">0.0001</span><span class="token comment" spellcheck="true"># 训练轮数</span>TRAINING_STEPS <span class="token operator">=</span> <span class="token number">30000</span><span class="token comment" spellcheck="true"># 滑动平均衰减率</span>MOVING_AVERAGE_DECAY <span class="token operator">=</span> <span class="token number">0.99</span><span class="token comment" spellcheck="true"># 配置神经网络参数</span>MODEL_SAVE_PATH <span class="token operator">=</span> <span class="token string">"/path/to/model"</span>MODEL_NAME <span class="token operator">=</span><span class="token string">"model.ckpt"</span></code></pre><h4 id="定义训练模型"><a href="#定义训练模型" class="headerlink" title="定义训练模型"></a>定义训练模型</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义训练模型</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>mnist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义输入输出的placeholder</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32<span class="token punctuation">,</span> <span class="token punctuation">[</span>NONE<span class="token punctuation">,</span> mnist_inference<span class="token punctuation">.</span>INPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'x-input'</span><span class="token punctuation">)</span>    y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32<span class="token punctuation">,</span> <span class="token punctuation">[</span>NONE<span class="token punctuation">,</span> mnist_inference<span class="token punctuation">.</span>OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'y-input'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 并定义正则化方法(tensorflow中的12正则化法)</span>    regularizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>l2_regularizer<span class="token punctuation">(</span>REGULARAZTION_RATE<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 直接调用mnist_inference.py中定义的前向传播过程</span>    y <span class="token operator">=</span> mnist_inference<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>x<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义迭代次数变量，一般会将训练轮数的变量指定为不可训练的参数</span>    global_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> trainable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 滑动平均模型定义滑动平均操作，提升模型对数据对鲁棒性</span>    variable_averages <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>ExponentialMovingAverage<span class="token punctuation">(</span>MOVING_AVERAGE_DECAY<span class="token punctuation">,</span> global_step<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用tf.trainable_variables可以获得神经网络中所有trainable=True的变量</span>    variable_averages_op <span class="token operator">=</span> variable_averages<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>trainable_variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义模型预测值与真实标签的交叉熵</span>    cross_entropy <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sparse_softmax_cross_entropy_with_logits<span class="token punctuation">(</span>logits<span class="token operator">=</span>y<span class="token punctuation">,</span> labels<span class="token operator">=</span>y_<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 求一个batch的平均交叉熵</span>    cross_entropy_mean <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>cross_entropy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义损失函数，包含预测标签与实际标签的损失和正则化损失</span>    loss <span class="token operator">=</span> cross_entropy_mean <span class="token operator">+</span> tf<span class="token punctuation">.</span>add_n<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>get_collection<span class="token punctuation">(</span><span class="token string">'losses'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义指数衰减学习率，训练前期使用较大的学习率加速，训练后期使用较小的学习率，使模型在训练后期更稳定</span>    learning_rate <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>exponential_decay<span class="token punctuation">(</span>LEARNING_RATE_BASE<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 基础学习率</span>                                               global_step<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 当前迭代轮数</span>                                               mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>num_examples<span class="token operator">/</span>BATCH_SIZE<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 所有训练数据需要迭代的轮数</span>                                               LEARNING_RATE_DECAY<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 学习率衰减速度</span>    <span class="token comment" spellcheck="true"># 定义优化函数，使用tensorflow的梯度下降优化器</span>    train_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> global_step<span class="token operator">=</span>global_step<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练时，每过一遍数据，需要更新参数以及每个参数的滑动平均值，使用tf.group()</span>    train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>group<span class="token punctuation">(</span>train_step<span class="token punctuation">,</span> variable_averages_op<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 初始化Tensorflow持久化类</span>    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化全局的变量</span>        tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>TRAINING_STEPS<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 自动获取一个batch的数据</span>            xs<span class="token punctuation">,</span> ys <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span>            _<span class="token punctuation">,</span> loss_value<span class="token punctuation">,</span> step <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>train_op<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> global_step<span class="token punctuation">]</span><span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> xs<span class="token punctuation">,</span> y<span class="token punctuation">:</span> ys<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 每1000轮保存一次模型</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 输出当前训练情况，并保存当前模型</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After %d training step(s), loss on training batch is %g"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>step<span class="token punctuation">,</span> loss_value<span class="token punctuation">)</span><span class="token punctuation">)</span>                saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>MODEL_SAVE_PATH<span class="token punctuation">,</span> MODEL_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> global_step<span class="token operator">=</span>global_step<span class="token punctuation">)</span></code></pre><h4 id="进行训练"><a href="#进行训练" class="headerlink" title="进行训练"></a>进行训练</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行训练</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mnist <span class="token operator">=</span> mnist_inference<span class="token punctuation">.</span>mnist    train<span class="token punctuation">(</span>mnist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tftest <span class="token keyword">import</span> mnist_inference<span class="token keyword">from</span> tftest <span class="token keyword">import</span> mnist_train<span class="token comment" spellcheck="true"># 每10秒加载一次最新模型。并进行一次测试</span>EVAL_INTERVAL_SEC <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>mnist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> g<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 定义输入输出格式</span>        x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> mnist_inference<span class="token punctuation">.</span>INPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'x-input'</span><span class="token punctuation">)</span>        y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> mnist_inference<span class="token punctuation">.</span>OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'y-input'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5000个验证集导入</span>        validate_feed <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> mnist<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>images<span class="token punctuation">,</span>                         y_<span class="token punctuation">:</span> mnist<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>labels<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 调用封装好的函数计算前向传播结果，测试时不关注正则化损失的值</span>        y <span class="token operator">=</span> mnist_inference<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>x<span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用tf.argmax(y, 1)得到输入样例的预测类别，判断预测和真实标签是否相等</span>        correct_prediction <span class="token operator">=</span> tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算预测的精确率</span>        accuracy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>correct_prediction<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>        variable_averages <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>ExponentialMovingAverage<span class="token punctuation">(</span>mnist_train<span class="token punctuation">.</span>MOVING_AVERAGE_DECAY<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># variables_to_restore是Tensorflow为滑动模型提供</span>        <span class="token comment" spellcheck="true"># 可以指定载入的是对应的影子变量</span>        variables_to_restore <span class="token operator">=</span> variable_averages<span class="token punctuation">.</span>variables_to_restore<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 直接用影子变量的参数赋值给inference的变量</span>        saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span>variables_to_restore<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 每隔10秒调用一次正确率的过程，观察训练过程中的正确率变化</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 通过checkpoint文件自动找到目录中最新模型的文件名</span>                ckpt <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>get_checkpoint_state<span class="token punctuation">(</span>mnist_train<span class="token punctuation">.</span>MODEL_SAVE_PATH<span class="token punctuation">)</span>                <span class="token keyword">if</span> ckpt <span class="token operator">and</span> ckpt<span class="token punctuation">.</span>model_checkpoint_path<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 加载模型</span>                    saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> ckpt<span class="token punctuation">.</span>model_checkpoint_path<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 从模型保存文件里得到模型保存时的迭代轮数</span>                    global_step <span class="token operator">=</span> ckpt<span class="token punctuation">.</span>model_checkpoint_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                    accuracy_score <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>accuracy<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span>validate_feed<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After %s training step(s), validation accuracy=%g"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>global_step<span class="token punctuation">,</span> accuracy_score<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 说明并没有保存已经训练好的模型参数存储文件</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No checkpoint file found"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># 程序休眠10秒</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>EVAL_INTERVAL_SEC<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mnist <span class="token operator">=</span> mnist_inference<span class="token punctuation">.</span>mnist    evaluate<span class="token punctuation">(</span>mnist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>1、编码问题</p><pre class=" language-python"><code class="language-python">SyntaxError<span class="token punctuation">:</span> Non<span class="token operator">-</span>ASCII character <span class="token string">'\xe4'</span> <span class="token keyword">in</span> file mnist_inference<span class="token punctuation">.</span>py on line <span class="token number">1</span><span class="token punctuation">,</span> but no encoding declared<span class="token punctuation">;</span> see http<span class="token punctuation">:</span><span class="token operator">//</span>python<span class="token punctuation">.</span>org<span class="token operator">/</span>dev<span class="token operator">/</span>peps<span class="token operator">/</span>pep<span class="token number">-0263</span><span class="token operator">/</span> <span class="token keyword">for</span> details</code></pre><p>解决方法</p><pre class=" language-python"><code class="language-python">在文件头追加：    <span class="token comment" spellcheck="true"># -*- coding: utf-8 -*</span></code></pre><p>2、没有对应的模型输出</p><pre class=" language-python"><code class="language-python">ImportError<span class="token punctuation">:</span> No module named tutorials<span class="token punctuation">.</span>mnist</code></pre><p>我的电脑在<code>(tensorflow)  cyh@chenyonghuandeMacBook-Pro  ~/tensorflow/lib/python2.7/site-packages</code>目录下有文件夹tensorflow, tensorflow_core, tensorflow_estimator等文件夹。进入tensorflow_core文件夹，里面发现一个examples文件夹，但是文件夹下只有saved_model这个文件，没有找到tutorials。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3fusge5uj30vs04kjxu.jpg" alt=""></p><p>解决方法</p><p>进入 <a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">tensorflow主页</a> 下载缺失的tutorials文件。我是直接把整个下载下来，然后在下载文件的路径<code>tensorflow-master\tensorflow\examples\</code>这里找到了tutorials，把tutorials整个文件夹拷贝到上文中提到的<code>tensorflow_core\examples\</code>文件夹下。</p><p>3、使用TensorFlow 从网上下载数据集到本地时，pycharm 没有写入权限</p><pre class=" language-python"><code class="language-python">tensorflow<span class="token punctuation">.</span>python<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>errors_impl<span class="token punctuation">.</span>PermissionDeniedError<span class="token punctuation">:</span> <span class="token operator">/</span>path<span class="token punctuation">;</span> Read<span class="token operator">-</span>only file system</code></pre><p>解决方法</p><pre class=" language-cmd"><code class="language-cmd">#使用终端 进入到编辑的项目cd /Users/cyh/doc/code/VGG16/tftest#使用命令 sudo python mnist_inference.py</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow基础知识学习</title>
      <link href="/2020/05/23/tensorflow-ji-chu-zhi-shi-xue-xi/"/>
      <url>/2020/05/23/tensorflow-ji-chu-zhi-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy介绍"><a href="#Numpy介绍" class="headerlink" title="Numpy介绍"></a>Numpy介绍</h1><blockquote><p>TensorFlow是python语言框架。<br>Numpy是TensorFlow用到的核心库。</p></blockquote><h2 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h2><p><code>ndarray(n-dimensional array object)</code>指储存单一数据类型的多维数组。可以是一维数组，二维矩阵，也可以是高维的数组。</p><h4 id="创建ndarray对象"><a href="#创建ndarray对象" class="headerlink" title="创建ndarray对象"></a>创建<code>ndarray</code>对象</h4><p>通过<code>array</code>函数创建一个<code>ndarray</code>对象，输入形式灵活多变，可以创建不同数据类型的<code>ndarray</code>对象。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> carray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>shape  <span class="token comment" spellcheck="true">#改变原来数据结构</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> c<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c  <span class="token comment" spellcheck="true">#创建新的数组，保留原来数组，但是共享存储</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#arange(开始，结束，步长)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">0.1</span><span class="token punctuation">,</span>  <span class="token number">0.2</span><span class="token punctuation">,</span>  <span class="token number">0.3</span><span class="token punctuation">,</span>  <span class="token number">0.4</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">0.6</span><span class="token punctuation">,</span>  <span class="token number">0.7</span><span class="token punctuation">,</span>  <span class="token number">0.8</span><span class="token punctuation">,</span>  <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#(开始，结束，元素个数)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">.</span>        <span class="token punctuation">,</span>  <span class="token number">0.11111111</span><span class="token punctuation">,</span>  <span class="token number">0.22222222</span><span class="token punctuation">,</span>  <span class="token number">0.33333333</span><span class="token punctuation">,</span>  <span class="token number">0.44444444</span><span class="token punctuation">,</span>        <span class="token number">0.55555556</span><span class="token punctuation">,</span>  <span class="token number">0.66666667</span><span class="token punctuation">,</span>  <span class="token number">0.77777778</span><span class="token punctuation">,</span>  <span class="token number">0.88888889</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="ndarray切片"><a href="#ndarray切片" class="headerlink" title="ndarray切片"></a><code>ndarray</code>切片</h4><p>切片：[开始位置：结束位置：步长]</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于np.arange(0,10,1)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#通过切片产生新的数组，共享存储空间</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span>   <span class="token number">7</span><span class="token punctuation">,</span>   <span class="token number">8</span><span class="token punctuation">,</span>   <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#通过列表切片产生新的数组，不共享存储空间</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>   <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>多维数组的切片是在每个维度切片的组合，用逗号隔开即可，示例如下图所示。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2d3hbgwvj30q60f8jue.jpg" alt="多维数组的切片"></p><p>通过整数元组，列表，整数数组，布尔数组进行切片得到的数组不与原始数组共享存储空间。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2d8kbwstj30u00d2jur.jpg" alt=""></p><h2 id="ufunc运算"><a href="#ufunc运算" class="headerlink" title="ufunc运算"></a>ufunc运算</h2><p><code>ufunc( universal function )</code>指一-种能对数组每个元素进行运算的函数。NumPy的许多ufunc函数都是用C语言实现的，因此它们的运算速度非常快。</p><h4 id="ufunc四则运算"><a href="#ufunc四则运算" class="headerlink" title="ufunc四则运算"></a>ufunc四则运算</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a+b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a-b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a*b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a/b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a**b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="ufunc布尔运算"><a href="#ufunc布尔运算" class="headerlink" title="ufunc布尔运算"></a>ufunc布尔运算</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>less<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a&lt;b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a==b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>not_equal<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a!=b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>less_equal<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a&lt;=b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>greater<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a>b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>greater_equal<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#等价于a>=b</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="ufunc广播运算"><a href="#ufunc广播运算" class="headerlink" title="ufunc广播运算"></a>ufunc广播运算</h4><p>广播简而言之，就是向两个数组每一维度上的最大值靠齐。当参与运算的两个数组形状不同时，会自动进行广播,保证形状一致后再计算。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2dzqfukuj30ne0ein0w.jpg" alt=""></p><p>具体的广播处理:<br>1.让所有输入数组都向其中维度最多的数组看齐，shape属性中不足的部分通过前面加1补齐。<br>2.输出数组的shape属性是输入数组的shape属性在各个轴上的最大值。<br>3.如果输入数组的某个轴长度为1或与输出数组对应轴上的长度相同，这个数组就能够用来计算,否则出错。<br>4.当输入数组的某个轴长度为1时，沿着此轴运算时都用此轴上的第一-组值(复制)</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2e3tj042j30s60hudm0.jpg" alt=""></p><h1 id="Tensorflow框架"><a href="#Tensorflow框架" class="headerlink" title="Tensorflow框架"></a>Tensorflow框架</h1><h2 id="计算框架介绍"><a href="#计算框架介绍" class="headerlink" title="计算框架介绍"></a>计算框架介绍</h2><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2e8yze5dj30wk0jqtou.jpg" alt="深度学习计算框架"></p><h3 id="theanO"><a href="#theanO" class="headerlink" title="theanO"></a>theanO</h3><p>第一个深度学习框架，2008年诞生于加拿大蒙特利尔理工学院的bengio团队。被认为是深度学习研究和发展的行业标准。</p><h3 id="keras"><a href="#keras" class="headerlink" title="keras"></a>keras</h3><p>以TensorFlow、theano、CNTKE为后端的高级框架，是初学者快速入门的首选。已被TensorFlow收编。</p><h3 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h3><p>是众多深度学习框架中较灵活的，有Facebook公司做技术支持。它的灵活性满足了科研人员对模型深入理解和多角度探索的需求。</p><h3 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h3><p>是当前最流行的深度学习框架，由Google公司做技术支持。官方文档完整，社区活跃，更新快速。以上优势让TensorFlow成为工业界首选框架。</p><h2 id="计算图结构"><a href="#计算图结构" class="headerlink" title="计算图结构"></a>计算图结构</h2><h3 id="Tensorflow概念"><a href="#Tensorflow概念" class="headerlink" title="Tensorflow概念"></a>Tensorflow概念</h3><p>TensorFlow是一个采用数据流图， 用于数值计算的开源软件库。图中节点在图中表示数学操作，线则表示在节点间相互联系的多维数据数组，即张量。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2efwxn4dj30wc0e6gr6.jpg" alt="数据流图"></p><p><strong>相关性</strong>指用于计算一个节点需要的节点。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2ehhjcdgj30wm0gs0zg.jpg" alt=""></p><h2 id="基本运行流程"><a href="#基本运行流程" class="headerlink" title="基本运行流程"></a>基本运行流程</h2><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2ej8r7r8j30z80f0k2j.jpg" alt="ensorflow运行机制"></p><h4 id="定义计算图"><a href="#定义计算图" class="headerlink" title="定义计算图"></a>定义计算图</h4><p><code>Graph = Operation + Tensor</code><br>Operation: Graph中的节点，表示计算<br>Tensor: Graph中的边， 表示数据</p><h4 id="张量（Tensor）"><a href="#张量（Tensor）" class="headerlink" title="张量（Tensor）"></a>张量（Tensor）</h4><h5 id="多维数据"><a href="#多维数据" class="headerlink" title="多维数据"></a>多维数据</h5><p>零阶张量表示标量（scalar）、一阶张量表示向量（vector）、…、N阶张量表示N维数组</p><h5 id="三个属性"><a href="#三个属性" class="headerlink" title="三个属性"></a>三个属性</h5><p>名称（name）、维度（shape）、类型（type）</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> add <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>Tensor<span class="token punctuation">(</span><span class="token string">"add:0"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span></code></pre><p>张量只是计算结果的引用，并不存储数据。通过张量引用，可以方便地获取中间结果。</p><p><strong>如何输出计算结果?</strong></p><h4 id="会话（Session）"><a href="#会话（Session）" class="headerlink" title="会话（Session）"></a>会话（Session）</h4><p>会话(session) 用于执行定义好的运算，会话拥有TensorFlow程序运行时所有的资源，因此计算完之后要回收资源。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2ez27g0mj30vk0a042e.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfa <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>add <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>add<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果 3.0</span></code></pre><h4 id="变量（Variable）"><a href="#变量（Variable）" class="headerlink" title="变量（Variable）"></a>变量（Variable）</h4><p>变量(Variable) 用于保存神经网络模型中要训练的参数。Variable定义中包含变量数值类型和变量维度，使用前需要初始化。</p><h5 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h5><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"weights"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[1]表示维度</span><span class="token operator">&lt;</span>tf<span class="token punctuation">.</span>Variable <span class="token string">'weights:0'</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> dtype<span class="token operator">=</span>float32_ref<span class="token operator">></span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2fcdcsb0j30v00bk0xn.jpg" alt="Tensorflow随机数生成器"></p><h5 id="常数"><a href="#常数" class="headerlink" title="常数"></a>常数</h5><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"bias"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[1]表示维度</span><span class="token operator">&lt;</span>tf<span class="token punctuation">.</span>Variable <span class="token string">'bias:0'</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> dtype<span class="token operator">=</span>float32_ref<span class="token operator">></span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2fke328vj30us0aejus.jpg" alt="Tensorflow常数生成器"></p><h5 id="线性回归示例"><a href="#线性回归示例" class="headerlink" title="线性回归示例"></a>线性回归示例</h5><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3d37npi4j30vs0fm77v.jpg" alt="线性回归"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment" spellcheck="true">#输入数据</span>x_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span>y_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型结构+变量初始化操作</span>w <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"weights"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"bias"</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x_train <span class="token operator">*</span> w <span class="token operator">+</span> binit_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型运行</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果：[-0.41663885 -0.8332777  -1.2499166 ]</span></code></pre><p><strong>如何实现批处理？如何避免生成大量常量？</strong></p><h4 id="placeholder-feed-dict"><a href="#placeholder-feed-dict" class="headerlink" title="placeholder+feed_dict"></a>placeholder+feed_dict</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2g5lqus0j30vg0g478q.jpg" alt=""></p><p>placeholder的使用避免的将输入数据声明成大量的常量，而是通过placeholder在程序运行时实时传入数据。数据类型必须指定，数据维度可以不给出。</p><pre class=" language-python"><code class="language-python">X <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeho1der<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32， name<span class="token operator">=</span>'i nput’<span class="token punctuation">)</span></code></pre><p>feed_ dict是一个字典，表示placeholder和对应取值的键值对，在程序运行的时候，通过给出每个placeholder对应的真实取值，输入到Placeholder对应的位置。</p><pre class=" language-python"><code class="language-python">feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">0.3</span><span class="token punctuation">}</span></code></pre><p>上边的线性回归代码改进示例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#输入数据</span>x_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span>y_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型结构+变量初始化操作</span>w <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"weights"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"bias"</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x_train <span class="token operator">*</span> w <span class="token operator">+</span> binit_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型运行</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x_train<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果：[[0.2872567][0.5745134]]</span></code></pre><h4 id="经典损失函数"><a href="#经典损失函数" class="headerlink" title="经典损失函数"></a>经典损失函数</h4><h5 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h5><p>交叉熵损失函数(cross entropy)</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2gfp187aj30ls01w3z0.jpg" alt=""></p><pre class=" language-python"><code class="language-python">cross_entropy <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>label<span class="token operator">=</span>y_label<span class="token punctuation">,</span> logits<span class="token operator">=</span>y_out<span class="token punctuation">)</span></code></pre><h5 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h5><p>均方误差损失函数(MSE, mean squared error)</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2giimkpxj30dy02smxf.jpg" alt=""></p><pre class=" language-python"><code class="language-python">mse <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_label<span class="token operator">-</span>y_out<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h4><h5 id="梯度下降方法"><a href="#梯度下降方法" class="headerlink" title="梯度下降方法"></a>梯度下降方法</h5><pre class=" language-python"><code class="language-python">train <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cost<span class="token punctuation">)</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2gnoj1icj30km0dwwfr.jpg" alt=""></p><h4 id="整合示例代码"><a href="#整合示例代码" class="headerlink" title="整合示例代码"></a>整合示例代码</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输入数据</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span>y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型结构+变量初始化操作</span>w <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"weights"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"bias"</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> w <span class="token operator">+</span> binit_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型优化</span>mse <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_ <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 损失函数</span>opt <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 优化方法</span>train <span class="token operator">=</span> opt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>mse<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 优化操作</span><span class="token comment" spellcheck="true"># 模型运行</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化</span>    x_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 真实训练集数据</span>    y_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 真实训练集标签</span>    steps <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token comment" spellcheck="true"># 训练次数</span>    batch_size <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># 批大小</span>    dataset_size <span class="token operator">=</span> <span class="token number">52</span>  <span class="token comment" spellcheck="true"># 训练集大小</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> batch_size<span class="token punctuation">)</span> <span class="token operator">%</span> dataset_size        end <span class="token operator">=</span> min<span class="token punctuation">(</span>start <span class="token operator">+</span> batch_size<span class="token punctuation">,</span> dataset_size<span class="token punctuation">)</span>        sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型预测</span>x_test <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 真实的测试集数据</span>steps <span class="token operator">=</span> <span class="token number">1000</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> batch_size<span class="token punctuation">)</span> <span class="token operator">%</span> dataset_size    end <span class="token operator">=</span> min<span class="token punctuation">(</span>start <span class="token operator">+</span> batch_size<span class="token punctuation">,</span> dataset_size<span class="token punctuation">)</span>    Predicts <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span>x_test<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="输入表示"><a href="#输入表示" class="headerlink" title="输入表示"></a>输入表示</h2><h3 id="图片输入表示"><a href="#图片输入表示" class="headerlink" title="图片输入表示"></a>图片输入表示</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#输入数据，二维图片</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#数据类型</span>                                    <span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#批大小</span>                                    img_width， <span class="token comment" spellcheck="true">#图片宽度</span>                                    img_height， <span class="token comment" spellcheck="true">#图片长度</span>                                    img_channe1s<span class="token punctuation">]</span>，<span class="token comment" spellcheck="true">#图片深度，RGB为3，灰度图为0</span>                                    name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输入数据，二维图片</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32，<span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span>y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32，<span class="token comment" spellcheck="true">#数据类型</span>                                    <span class="token punctuation">[</span>batch_size，<span class="token comment" spellcheck="true"># 批大小</span>                                    class_size<span class="token punctuation">]</span>，<span class="token comment" spellcheck="true">#目标类别数目</span>                                    name<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span>y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None，<span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf2i1z800rj30rm08gjtd.jpg" alt=""></p><h3 id="文本输入表示"><a href="#文本输入表示" class="headerlink" title="文本输入表示"></a>文本输入表示</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#输入数据，文本序列</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>p1aceho1der<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#数据类型</span>                                    <span class="token punctuation">[</span>batch_ size<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#批大小</span>                                    seq_1en<span class="token punctuation">]</span>，<span class="token comment" spellcheck="true">#词序列长度</span>                                    name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#示例</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">,</span><span class="token punctuation">[</span>None，<span class="token number">30</span><span class="token punctuation">]</span>，name<span class="token operator">=</span>’input‘<span class="token punctuation">)</span>y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span> placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span> f1oat32，<span class="token comment" spellcheck="true">#数据类型</span>                                    <span class="token punctuation">[</span>batch_size，<span class="token comment" spellcheck="true"># 批大小</span>                                    class_size<span class="token punctuation">]</span>，<span class="token comment" spellcheck="true">#目标类别数目</span>                                    name<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#示例</span>y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>f1oat32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None，<span class="token number">2</span><span class="token punctuation">]</span>，name<span class="token operator">=</span> <span class="token string">'output'</span><span class="token punctuation">)</span>emb <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variab1e<span class="token punctuation">(</span>“emb”<span class="token punctuation">,</span>                                        <span class="token punctuation">[</span>vocab_size， <span class="token comment" spellcheck="true">#词汇表大小</span>                                        emb_size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#词向量维度</span><span class="token comment" spellcheck="true">#示例</span>emb <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>“emb”，<span class="token punctuation">[</span><span class="token number">8</span>， <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#词向量维度</span>inputs <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>embedding_1ookup<span class="token punctuation">(</span>emb，x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#向量映射</span><span class="token comment" spellcheck="true"># get_variable</span><span class="token comment" spellcheck="true"># 根据变量名称直接获取，如果不存在就创建一个新的</span>emb <span class="token operator">=</span> tf<span class="token punctuation">.</span> get_variable<span class="token punctuation">(</span>name<span class="token operator">=</span>“emb”，<span class="token comment" spellcheck="true">#变量名称(必填)</span>                                            <span class="token punctuation">[</span>vocab_size， <span class="token comment" spellcheck="true">#词汇表大小</span>                                            emb_ size <span class="token punctuation">]</span>，<span class="token comment" spellcheck="true">#词向量维度</span>                                            initializer<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#词向量矩阵，训练好的</span><span class="token comment" spellcheck="true"># Variable</span><span class="token comment" spellcheck="true">#创建一个新的变量，用具体的值初始化，变量名称可选</span>emb <span class="token operator">=</span> tf <span class="token punctuation">.</span> Variable<span class="token punctuation">(</span>initializer，<span class="token comment" spellcheck="true">#词向量矩阵，训练好的</span>                                        name<span class="token operator">=</span>“emb”<span class="token comment" spellcheck="true">#变量名称(可选)</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3ashqevxj310i0heq7u.jpg" alt=""></p><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3awt6t29j30v80jcgu7.jpg" alt="多层感知机"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment" spellcheck="true"># 输入表示，一维向量</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> in_dim<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化模块参数</span>w1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>in_dim<span class="token punctuation">,</span> h1_dim<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>w2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>h1_dim<span class="token punctuation">,</span> h2_dim<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>w3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>h2_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型结构，忽略偏置项</span>h1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w1<span class="token punctuation">)</span><span class="token punctuation">)</span>h2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>h1<span class="token punctuation">,</span> w2<span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>h2<span class="token punctuation">,</span> w3<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3bbiqpfkj30xy0iu77t.jpg" alt="激活函数"></p><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><h3 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h3><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3bchwc4tj30u80i0gr3.jpg" alt="卷积神经网络-2d" style="zoom:50%;"><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3bnl6ns0j30z40mqn3w.jpg" alt=""></p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3boamb5xj30xc0j0wq2.jpg" alt="卷积操作" style="zoom:50%;"><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3bq8ar9sj30py0i6n1o.jpg" alt="池化操作" style="zoom:50%;"><h4 id="卷积神经网络的两种写法"><a href="#卷积神经网络的两种写法" class="headerlink" title="卷积神经网络的两种写法"></a>卷积神经网络的两种写法</h4><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> 第一种<span class="token comment" spellcheck="true"># 输入表示，图片</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> channels<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型参数</span>filter <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">"weight"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>filter_w<span class="token punctuation">,</span> filter_h<span class="token punctuation">,</span> filter_c<span class="token punctuation">,</span> filter_num<span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>random_normal_initializer<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 卷积操作</span>conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> stride_w<span class="token punctuation">,</span> stride_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 池化操作</span>pool <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>conv<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> pool_w<span class="token punctuation">,</span> pool_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> stride_w<span class="token punctuation">,</span> stride_h<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>第二种conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> filters<span class="token operator">=</span>filter_num<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span>filter_w<span class="token punctuation">,</span> filter_h<span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span>stride_w<span class="token punctuation">,</span> stride_h<span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span>pool <span class="token operator">=</span> tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>max_pooling2d<span class="token punctuation">(</span>conv<span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token punctuation">(</span>pool_w<span class="token punctuation">,</span> pool_h<span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span>stride_w<span class="token punctuation">,</span> stride_h<span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span></code></pre><h3 id="一维卷积"><a href="#一维卷积" class="headerlink" title="一维卷积"></a>一维卷积</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf3crd5148j30wi0cqq6f.jpg" alt="卷积神经网络-1d"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#输入数据，文本序列</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>p1aceho1der<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">,</span><span class="token punctuation">[</span>batch_ size<span class="token punctuation">,</span>seq_1en<span class="token punctuation">]</span>，name<span class="token operator">=</span><span class="token string">'input'</span><span class="token punctuation">)</span>emb <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variab1e<span class="token punctuation">(</span>“emb”<span class="token punctuation">,</span><span class="token punctuation">[</span>vocab_size<span class="token punctuation">,</span> emb_size<span class="token punctuation">]</span><span class="token punctuation">)</span> input <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>embedding_1ookup<span class="token punctuation">(</span>emb，x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 卷积操作</span>conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>conv1d<span class="token punctuation">(</span>input<span class="token punctuation">,</span> filter_num<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'valid'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'conv1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 池化操作</span>pool <span class="token operator">=</span> tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>max_pooling1d<span class="token punctuation">(</span>conv<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'SAME'</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String源码分析</title>
      <link href="/2020/05/22/string-yuan-ma-fen-xi/"/>
      <url>/2020/05/22/string-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p><code>Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings.Because String objects are immutable they can be shared.</code></p><p>String 字符串是常量，其值在实例创建后就不能被修改，但字符串缓冲区（StringBuffer）支持可变的字符串，由于String对象是不可变的，因此可以共享它们。</p><h2 id="String-的结构"><a href="#String-的结构" class="headerlink" title="String    的结构"></a><code>String</code>    的结构</h2><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gf1214ef3pj30uc07awes.jpg" alt=""></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3><p><code>package java.lang</code></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>我们常常听人说，HashMap 的 key 建议使用不可变类，比如说 String 这种不可变类。这里说的不可变指的是类值一旦被初始化，就不能再被改变了，如果被修改，将会是新的类，比如有这样的例子： <code>String s = “hello”; s = “world”</code>，看到这里也许会有人疑惑，String 初始化以后好像可以被修改。其实这里的赋值并不是对 <code>s</code>内容的修改，而是将<code>s</code>指向了新的字符串。从 debug 的日志来看，其实已经把 s 的引用指向了新的 String，如下图所示：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfxsd1q3y9j311g080gow.jpg" alt="image-20200619184230724"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看出 String 是 final 类型的，表示该类不能被其他类继承，同时该类实现了三个接口<code>Serializable, Comparable, CharSequence</code>。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** The value is used for character storage. */</span>      <span class="token comment" spellcheck="true">// 字符存储的值</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Cache the hash code for the string */</span>      <span class="token comment" spellcheck="true">// 缓存字符串的哈希码</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Default to 0</span>    <span class="token comment" spellcheck="true">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>        <span class="token comment" spellcheck="true">// 序列化 serialVersionUID</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>6849794470754667710L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * Class String is special cased within the Serialization Stream Protocol.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ObjectStreamField<span class="token punctuation">[</span><span class="token punctuation">]</span> serialPersistentFields <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ObjectStreamField</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>String 是基于字符数组 char[] 实现的。</strong></p></blockquote><p>String 中保存数据的是一个 char 的数组 value。我们发现 value 也是被 final 修饰的，也就是说 value 一旦被赋值，内存地址是绝对无法修改的，而且 value 的权限是 private 的，外部绝对访问不到，String 也没有开放出可以对 value 进行赋值的方法，所以说 value 一旦产生，内存地址就根本无法被修改。</p><p>因为 String 实现了 Serializable 接口，所以支持序列化和反序列化支持。Java 的序列化机制是通过在运行时判断类的 serialVersionUID 来验证版本一致性的。在进行反序列化时，JVM 会把传来的字节流中的 serialVersionUID 与本地相应实体（类）的 serialVersionUID 进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常 (InvalidCastException)。</p><p>因为 String 具有不变性，所以 String 的大多数操作方法，都会返回新的 String，如下面这种写法是不对的：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span><span class="token string">"hello world !!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种写法是替换不掉的，必须接受 replace 方法返回的参数才行，这样才行：str = str.replace("l","dd");</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="1、无参构造器"><a href="#1、无参构造器" class="headerlink" title="1、无参构造器"></a>1、无参构造器</h4><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//初始化一个新创建的{@code String}对象，使其代表空字符序列。 请注意，使用此构造函数是不必要，因为字符串是不可变的。</span>    <span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>因此不建议像如下方式创建<code>String</code>对象，会产生不必要的对象。</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span></code></pre><h4 id="2、带参构造器"><a href="#2、带参构造器" class="headerlink" title="2、带参构造器"></a>2、带参构造器</h4><h5 id="字符串构造"><a href="#字符串构造" class="headerlink" title="字符串构造"></a>字符串构造</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 新创建的字符串是参数字符串的副本。此构造函数的使用是不必要，因为字符串是不可变的。</span>    <span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span>String original<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="字符数组构造"><a href="#字符数组构造" class="headerlink" title="字符数组构造"></a>字符数组构造</h5><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Note: offset or count might be near -1>>>1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">></span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offset<span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用字符数组创建 String 的时候，会用到<code>Arrays.copyOf</code>方法<code>Arrays.copyOfRange</code>方法。这两个方法是将原有的字符数组中的内容逐一的复制到 String 中的字符数组中。这将会创建一个新的字符串对象，随后修改的字符数组不影响新创建的字符串。</p><h5 id="字节数组构造"><a href="#字节数组构造" class="headerlink" title="字节数组构造"></a>字节数组构造</h5><p>byte 是网络传输或存储的序列化形式，所以在很多传输和存储的过程中需要将 byte[] 数组和 String 进行相互转化。所以 String 提供了一系列重载的构造方法来将一个字节数组转化成 String，提到 byte[] 和 String 之间的相互转换就不得不关注编码问题。</p><p>使用字节数组来构造 String 有很多种形式，按照是否指定解码方式分的话可以分为两种：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">checkBounds</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> StringCoding<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果我们在使用 <code>byte[]</code> 构造 <code>String</code> 的时候，使用的构造方法中带有 <code>charsetName</code> 或者 <code>charset</code>参数的话，那么就会使用 <code>StringCoding.decode</code> 方法进行解码，使用的解码的字符集就是我们指定的 <code>charsetName</code>或者 <code>charset</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Charset charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> String charsetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> charsetName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Charset charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charset <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"charset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkBounds</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span>  StringCoding<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> String charsetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charsetName <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"charsetName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkBounds</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> StringCoding<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>charsetName<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在使用 byte[] 构造 String 的时候，如果没有指明解码使用的字符集的话，那么 StringCoding 的 decode 方法首先调用系统的默认编码格式，如果没有指定编码格式则默认使用 ISO-8859-1 编码格式进行编码操作。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ba<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String csn <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// use charset name decode() variant which provides caching.</span>            <span class="token keyword">return</span> <span class="token function">decode</span><span class="token punctuation">(</span>csn<span class="token punctuation">,</span> ba<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warnUnsupportedCharset</span><span class="token punctuation">(</span>csn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">,</span> ba<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If this code is hit during VM initialization, MessageUtils is</span>            <span class="token comment" spellcheck="true">// the only way we will be able to get any kind of error message.</span>            MessageUtils<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1 charset not available: "</span>                             <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// If we can not find ISO-8859-1 (a required encoding) then things</span>            <span class="token comment" spellcheck="true">// are seriously wrong with the installation.</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="使用-StringBuffer-和-StringBuilder-构造"><a href="#使用-StringBuffer-和-StringBuilder-构造" class="headerlink" title="使用 StringBuffer 和 StringBuilder 构造"></a>使用 StringBuffer 和 StringBuilder 构造</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span>StringBuffer buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span>StringBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这两个构造方法是很少用到的，因为当我们有了 StringBuffer 或者 StringBuilfer 对象之后可以直接使用他们的 toString 方法来得到 String。</p><blockquote><p>关于效率问题，使用StringBuilder 的 toString 方法会更快一些，原因是 StringBuffer 的 toString 方法是 synchronized 的，在牺牲了效率的情况下保证了线程安全。</p></blockquote><h5 id="一个特殊的保护类型的构造方法"><a href="#一个特殊的保护类型的构造方法" class="headerlink" title="一个特殊的保护类型的构造方法"></a>一个特殊的保护类型的构造方法</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    * Package private constructor which shares value array for speed.    * this constructor is always expected to be called with share==true.    * a separate constructor is needed because we already have a public    * String(char[]) constructor that makes a copy of the given char[].    */</span>        <span class="token comment" spellcheck="true">// 封装私有构造函数，该结构共享值数组以提高速度。 始终希望使用share == true调用此构造方法。 需要一个单独的构造函数，因为我们已经有一个公共String（char []）构造函数，该构造函数复制给定char []</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> share<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert share : "unshared not supported";</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>该方法和 <code>String(char[] value)</code>有两点区别：</p><ul><li><p>该方法多了一个参数。其实这个参数在方法体中根本没被使用。加入这个 share 的只是为了区分于<code>String(char[] value)</code>方法，不加这个参数就没办法定义这个函数，只有参数是不同才能进行重载。</p></li><li><p>具体的方法实现不同。 <code>String(char[] value)</code>方法在创建 String 的时候会用到 <code>Arrays.copyOf</code>方法将 value 中的内容逐一复制到 String 当中，而这个 <code>String(char[] value, boolean share)</code>方法则是直接将 value 的引用赋值给 String 的 value。也就是说，这个方法构造出来的 String 和参数传过来的 char[] value 共享同一个数组。</p></li></ul><p><strong>为什么 Java 会提供这样一个方法呢？</strong></p><ul><li><p><strong>性能好：</strong>这个很简单，一个是直接给数组赋值（相当于直接将 String 的 value 的指针指向char[]数组），一个是逐一拷贝，当然是直接赋值快了。</p></li><li><p><strong>节约内存：</strong>该方法之所以设置为 protected，是因为一旦该方法设置为公有，在外面可以访问的话，如果构造方法没有对 arr 进行拷贝，那么其他人就可以在字符串外部修改该数组，由于它们引用的是同一个数组，因此对 arr 的修改就相当于修改了字符串，那就破坏了字符串的不可变性。</p></li><li><p><strong>安全的：</strong>对于调用他的方法来说，由于无论是原字符串还是新字符串，其 value 数组本身都是 String 对象的私有属性，从外部是无法访问的，因此对两个字符串来说都很安全。</p><blockquote><p>参考链接：<a href="https://www.jianshu.com/p/799c4459b808" target="_blank" rel="noopener">https://www.jianshu.com/p/799c4459b808</a></p></blockquote></li></ul><p>在 Java 7 之前有很多 String 里面的方法都使用上面说的那种“性能好的、节约内存的、安全”的构造函数。比如：<code>substring</code> <code>replace</code> <code>concat</code> <code>valueOf</code> 等方法，<strong>但是在 Java 7 中，substring 已经不再使用这种“优秀”的方法了</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> subLen <span class="token operator">=</span> endIndex <span class="token operator">-</span> beginIndex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subLen <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beginIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>endIndex <span class="token operator">==</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span>                <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>虽然这种方法有很多优点，但是他有一个致命的缺点，那就是很有可能造成<strong>内存泄露</strong>。</p><p>看一个例子，假设一个方法从某个地方（文件、数据库或网络）取得了一个很长的字符串，然后对其进行解析并提取其中的一小段内容，这种情况经常发生在网页抓取或进行日志分析的时候。</p><pre class=" language-java"><code class="language-java">String aLongString <span class="token operator">=</span> <span class="token string">"...averylongstring..."</span><span class="token punctuation">;</span>String aPart <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> aPart<span class="token punctuation">;</span></code></pre><p>在这里 aLongString 只是临时的，真正有用的是 aPart，其长度只有 20 个字符，但是它的内部数组却是从 aLongString 那里共享的，因此虽然 aLongString 本身可以被回收，但它的内部数组却不能释放。这就导致了内存泄漏。如果一个程序中这种情况经常发生有可能会导致严重的后果，如内存溢出，或性能下降。新的实现虽然损失了性能，而且浪费了一些存储空间，但却保证了字符串的内部数组可以和字符串对象一起被回收，从而防止发生内存泄漏，因此新的 substring 比原来的更健壮。</p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h5 id="常用的简单方法"><a href="#常用的简单方法" class="headerlink" title="常用的简单方法"></a>常用的简单方法</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 返回字符串长度</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回字符串是否为空</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回字符串中第index个字符（数组索引）</span> <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 转换为字符数组</span><span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Cannot use Arrays.copyOf because of class initialization order issues</span>        <span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>value<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 去掉两端空格</span><span class="token keyword">public</span> String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* avoid getfield opcode */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">substring</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 转化为大写</span><span class="token keyword">public</span> String <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 转化为小写</span><span class="token keyword">public</span> String <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果我们的项目被 <strong>Spring 托管</strong>的话，有时候我们会通过 <code>applicationContext.getBean(className);</code> 这种方式得到 SpringBean，这时 className 必须是要满足首字母小写的，除了该场景，在<strong>反射场景</strong>下面，我们也经常要使类属性的首字母小写，这时候我们一般都会这么做：</p><p><code>name.substring(0, 1).toLowerCase() + name.substring(1);</code>，使用 substring 方法，该方法主要是为了截取字符串连续的一部分，substring 有两个方法：</p><ol><li><code>public String substring(int beginIndex, int endIndex)</code> beginIndex：开始位置，endIndex：结束位置；</li><li><code>public String substring(int beginIndex)</code>beginIndex：开始位置，结束位置为文本末尾。</li></ol><p>substring 方法的底层使用的是字符数组范围截取的方法 ：<code>Arrays.copyOfRange(字符数组, 开始位置, 结束位置);</code> 从字符数组中进行一段范围的拷贝。</p><p>相反的，如果要修改成首字母大写，只需要修改成 <code>name.substring(0, 1).toUpperCase() + name.substring(1)</code> 即可。</p><h5 id="拼接替换字符串方法"><a href="#拼接替换字符串方法" class="headerlink" title="拼接替换字符串方法"></a>拼接替换字符串方法</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 拼接字符串</span><span class="token keyword">public</span> String <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> otherLen <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>otherLen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> len <span class="token operator">+</span> otherLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将字符串中的oldChar 字符换成 newChar 字符</span><span class="token keyword">public</span> String <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChar <span class="token operator">!=</span> newChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* avoid getfield opcode */</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> oldChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    buf<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">char</span> c <span class="token operator">=</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> oldChar<span class="token punctuation">)</span> <span class="token operator">?</span> newChar <span class="token operator">:</span> c<span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>以上两个方法都使用了 <code>String(char[] value, boolean share)</code> 方法，他们不会导致元数组中有大量空间不被使用，因为他们一个是拼接字符串，一个是替换字符串内容，不会将字符数组的长度变得很短，所以使用了共享的 char[] 字符数组来优化。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">replaceFirst</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">replaceAll</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">replace</span><span class="token punctuation">(</span>CharSequence target<span class="token punctuation">,</span> CharSequence replacement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Pattern<span class="token punctuation">.</span>LITERAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>Matcher<span class="token punctuation">.</span><span class="token function">quoteReplacement</span><span class="token punctuation">(</span>replacement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>replace 的参数是 char 和 CharSequence，即可以支持字符的替换, 也支持字符串的替换，需要注意的是， replace 并不只是替换一个，是替换所有匹配到的字符或字符串哦。</p><p>replaceAll 和 replaceFirst 的参数是 regex，即基于规则表达式的替换。</p><p>当然我们想要删除某些字符，也可以使用 replace 方法，把想删除的字符替换成 “” 即可。</p><h5 id="正则表达匹配方法"><a href="#正则表达匹配方法" class="headerlink" title="正则表达匹配方法"></a>正则表达匹配方法</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断字符串是否匹配给定的regex正则表达式</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断字符串是否包含字符序列 s</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 按照字符 regex将字符串分成 limit 份</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* fastpath if the regex is a         (1)one-char String and this character is not one of the            RegEx's meta characters ".$|()[{^?*+\\", or         (2)two-char String and the first char is the backslash and            the second is not the ascii digit or ascii letter.         */</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>             <span class="token string">".$|()[{^?*+\\"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>             <span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>              regex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token operator">-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token operator">-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token operator">-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> Character<span class="token punctuation">.</span>MIN_HIGH_SURROGATE <span class="token operator">||</span>             ch <span class="token operator">></span> Character<span class="token punctuation">.</span>MAX_LOW_SURROGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> limited <span class="token operator">=</span> limit <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>            ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> off<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>limited <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    off <span class="token operator">=</span> next <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// last one</span>                    <span class="token comment" spellcheck="true">//assert (list.size() == limit - 1);</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    off <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// If no match was found, return this</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Add remaining segment</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>limited <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Construct result</span>            <span class="token keyword">int</span> resultSize <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSize <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    resultSize<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>resultSize<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> resultSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 按照字符 regex 将字符串分段</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上边源码所示，拆分使用 split 方法，该方法有两个入参数。第一个参数是我们拆分的标准字符，第二个参数是一个 int 值，叫 limit，来限制我们需要拆分成几个元素。如果 limit 比实际能拆分的个数小，按照 limit 的个数进行拆分，我们演示一个 demo：</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span><span class="token string">"boo:and:foo"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我们对 s 进行了各种拆分，演示的代码和结果是：</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and:foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">":and:f"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"o:and:foo"</span><span class="token punctuation">]</span></code></pre><p>从演示的结果来看，limit 对拆分的结果，是具有限制作用的，还有就是拆分结果里面不会出现被拆分的字段。</p><p>那如果字符串里面有一些空值呢，拆分的结果如下：</p><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span><span class="token string">",a,,b,"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span></code></pre><p>从拆分结果中，我们可以看到，空值是拆分不掉的，仍然成为结果数组的一员，如果我们想删除空值，只能自己拿到结果后再做操作，但 Guava（Google 开源的技术工具） 提供了一些可靠的工具类，可以帮助我们快速去掉空值，如下：</p><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span><span class="token string">",a, ,  b  c ,"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Splitter 是 Guava 提供的 API </span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 去掉空格</span>    <span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 去掉空值</span>    <span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Guava 去掉空格的分割方法：{}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出的结果为：</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b  c"</span><span class="token punctuation">]</span></code></pre><p>从打印的结果中，可以看到去掉了空格和空值，这正是我们工作中常常期望的结果，所以推荐使用 Guava 的 API 对字符串进行分割。</p><p>合并我们使用 join 方法，此方法是静态的，我们可以直接使用。方法有两个入参，参数一是合并的分隔符，参数二是合并的数据源，数据源支持数组和 List，在使用的时候，我们发现有两个不太方便的地方：</p><ol><li>不支持依次 join 多个字符串，比如我们想依次 join 字符串 s 和 s1，如果你这么写的话 <code>String.join(",",s).join(",",s1)</code> 最后得到的是 s1 的值，第一次 join 的值被第二次 join 覆盖了；</li><li>如果 join 的是一个 List，无法自动过滤掉 null 值。</li></ol><p>而 Guava 正好提供了 API，解决上述问题，我们来演示一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 依次 join 多个字符串，Joiner 是 Guava 提供的 API</span>Joiner joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String result <span class="token operator">=</span> joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"依次 join 多个字符串:{}"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"china"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"自动删除 list 中空值:{}"</span><span class="token punctuation">,</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出的结果为；</span>依次 join 多个字符串<span class="token operator">:</span>hello<span class="token punctuation">,</span>china自动删除 list 中空值<span class="token operator">:</span>hello<span class="token punctuation">,</span>china</code></pre><p>从结果中，我们可以看到 Guava 不仅仅支持多个字符串的合并，还帮助我们去掉了 List 中的空值，这就是我们在工作中常常需要得到的结果。</p><h5 id="字符串转换成字节数组"><a href="#字符串转换成字节数组" class="headerlink" title="字符串转换成字节数组"></a>字符串转换成字节数组</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span>Charset charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charset <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StringCoding<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StringCoding<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在生活中，我们经常碰到这样的场景，进行二进制转化操作时，本地测试的都没有问题，到其它环境机器上时，有时会出现字符串乱码的情况，这个主要是因为在二进制转化操作时，并没有强制规定文件编码，而不同的环境默认的文件编码不一致导致的。</p><p>我们通过一个 demo 来模仿一下字符串乱码：</p><pre class=" language-java"><code class="language-java">String str  <span class="token operator">=</span><span class="token string">"nihao 你好 喬亂"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串转化成 byte 数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte 数组转化成字符串</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果打印为：</span>nihao <span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">?</span><span class="token operator">?</span></code></pre><p>打印的结果为？？，这就是常见的乱码表现形式。这时候有同学说，是不是我把代码修改成 <code>String s2 = new String(bytes,"ISO-8859-1");</code> 就可以了？这是不行的。主要是因为 ISO-8859-1 这种编码对中文的支持有限，导致中文会显示乱码。唯一的解决办法，就是在所有需要用到编码的地方，都统一使用 UTF-8，对于 String 来说，getBytes 和 new String 两个方法都会使用到编码，我们把这两处的编码替换成 UTF-8 后，打印出的结果就正常了。</p><h5 id="比较方法"><a href="#比较方法" class="headerlink" title="比较方法"></a>比较方法</h5><p>我们判断相等有两种办法，equals 和 equalsIgnoreCase。后者判断相等时，会忽略大小写，如果让你写判断两个 String 相等的逻辑，应该如何写，我们来一起看下 equals 的源码，整理一下思路：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 比较对象</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 判断内存地址是否相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 待比较的对象是否是 String，如果不是 String，直接返回不相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 两个字符串的长度是否相等，不等则直接返回不相等</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 依次比较每个字符是否相等，若有一个不等，直接返回不相等</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  忽略大小写比较字符串</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> CASE_INSENSITIVE_ORDER<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>从 equals 的源码可以看出，逻辑非常清晰，完全是根据 String 底层的结构来编写出相等的代码。这也提供了一种思路给我们：如果有人问如何判断两者是否相等时，我们可以从两者的底层结构出发，这样可以迅速想到一种贴合实际的思路和方法，就像 String 底层的数据结构是 char 的数组一样，判断相等时，就挨个比较 char 数组中的字符是否相等即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 与StringBuffer对象比较</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span>StringBuffer sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CharSequence<span class="token punctuation">)</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 与CharSequence对象比较</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span>CharSequence cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Argument is a StringBuffer, StringBuilder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token keyword">instanceof</span> <span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token keyword">instanceof</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token function">nonSyncContentEquals</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractStringBuilder<span class="token punctuation">)</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">nonSyncContentEquals</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractStringBuilder<span class="token punctuation">)</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">nonSyncContentEquals</span><span class="token punctuation">(</span>AbstractStringBuilder sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> v1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Argument is a String</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Argument is a generic CharSequence</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> v1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> cs<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 忽略大小写比较字符串对象</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anotherString<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span>                <span class="token operator">:</span> <span class="token punctuation">(</span>anotherString <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">==</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> anotherString<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 比较字符串</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> len2 <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> lim <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a><code>hashCode</code>方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            hash <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>hashCode 可以保证相同的字符串的 hash 值肯定相同，但是 hash 值相同并不一定是 value 值就相同。</p><h5 id="valueOf-的多种形式的重载方法"><a href="#valueOf-的多种形式的重载方法" class="headerlink" title="valueOf()的多种形式的重载方法"></a><code>valueOf()</code>的多种形式的重载方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Float<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>上述代码为将六种基本数据类型的变量转换成 String 类型。</p><h5 id="intern-方法"><a href="#intern-方法" class="headerlink" title="intern()方法"></a>intern()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> String <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 该方法返回一个字符串对象的内部化引用。 String 类维护一个初始为空的字符串的对象池，当 intern 方法被调用时，如果对象池中已经包含这一个相等的字符串对象则返回对象池中的实例，否则添加字符串到对象池并返回该字符串的引用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>一旦 String 对象在内存(堆)中被创建出来，就无法被修改。（String 类的所有方法都没有改变字符串本身的值，都是返回了一个新的对象）</p></li><li><p>如果你需要一个可修改的字符串，应该使用 StringBuffer 或者 StringBuilder。（否则会有大量时间浪费在垃圾回收上，因为每次试图修改都有新的String 对象被创建出来）</p></li><li><p>如果你只需要创建一个字符串，你可以使用双引号的方式，如果你需要在堆中创建一个新的对象，你可以选择构造函数的方式。</p></li></ul><h2 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h2><p>Long 最被我们关注的就是 Long 的缓存问题，Long 自己实现了一种缓存机制，缓存了从 -128 到 127 内的所有 Long 值，如果是这个范围内的 Long 值，就不会初始化，而是从缓存中拿，缓存初始化源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LongCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LongCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 缓存，范围从 -128 到 127，+1 是因为有个 0</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Long cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 容器初始化时，进行加载</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 缓存 Long 值，注意这里是 i - 128 ，所以再拿的时候就需要 + 128</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="为什么使用-Long-时，大家推荐多使用-valueOf-方法，少使用-parseLong-方法"><a href="#为什么使用-Long-时，大家推荐多使用-valueOf-方法，少使用-parseLong-方法" class="headerlink" title="为什么使用 Long 时，大家推荐多使用 valueOf 方法，少使用 parseLong 方法"></a>为什么使用 Long 时，大家推荐多使用 valueOf 方法，少使用 parseLong 方法</h3><p>答：因为 Long 本身有缓存机制，缓存了 -128 到 127 范围内的 Long，valueOf 方法会从缓存中去拿值，如果命中缓存，会减少资源的开销，parseLong 方法就没有这个机制。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// valueOf源码</span><span class="token keyword">public</span> <span class="token keyword">static</span> Long <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// will cache</span>            <span class="token keyword">return</span> LongCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android基础知识学习</title>
      <link href="/2020/05/10/android-ji-chu-zhi-shi-xue-xi/"/>
      <url>/2020/05/10/android-ji-chu-zhi-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="Android-概述"><a href="#Android-概述" class="headerlink" title="Android 概述"></a>Android 概述</h2><h3 id="什么是Android？"><a href="#什么是Android？" class="headerlink" title="什么是Android？"></a>什么是Android？</h3><p>Android 是一个开源的，基于 Linux 的移动设备操作系统，如智能手机和平板电脑。Android 是由谷歌及其他公司带领的开放手机联盟开发的。</p><h3 id="Android-架构"><a href="#Android-架构" class="headerlink" title="Android 架构"></a>Android 架构</h3><p>Android 操作系统是一个软件组件的栈，在架构图中它大致可以分为五个部分和四个主要层。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/06/android_architecture.jpg" alt="Android 架构"></p><h3 id="Android-应用程序组件"><a href="#Android-应用程序组件" class="headerlink" title="Android 应用程序组件"></a>Android 应用程序组件</h3><p>应用程序组件是一个Android应用程序的基本构建块。这些组件由应用清单文件松耦合的组织。<code>AndroidManifest.xml</code>描述了应用程序的每个组件，以及他们如何交互。</p><table><thead><tr><th align="left">组件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Activities</td><td align="left">描述UI，并且处理用户与机器屏幕的交互</td></tr><tr><td align="left">Services</td><td align="left">处理与应用程序关联的后台操作</td></tr><tr><td align="left">Broadcast Receivers</td><td align="left">处理Android操作系统和应用程序之间的通信</td></tr><tr><td align="left">Content Providers</td><td align="left">处理数据和数据库管理方面的问题</td></tr></tbody></table><h2 id="项目问题"><a href="#项目问题" class="headerlink" title="项目问题"></a>项目问题</h2><p>1、Android P联网报错 </p><pre class=" language-java"><code class="language-java">W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token operator">:</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token operator">:</span> Cleartext HTTP traffic to <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> not permitted</code></pre><p>解决方法：更改网络安全配置</p><p>1.在<code>res</code>文件夹下创建一个<code>xml</code>文件夹，然后创建一个<code>network_security_config.xml</code>文件，文件内容如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span></code></pre><p>2.接着，在<code>AndroidManifest.xml</code>文件下的<code>application</code>标签增加以下属性</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token attr-name">...</span> <span class="token attr-name"><span class="token namespace">android:</span>networkSecurityConfig</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@xml/network_security_config<span class="token punctuation">"</span></span><span class="token attr-name">...</span>    <span class="token punctuation">/></span></span></code></pre><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/gengkui9897/article/details/82863966" target="_blank" rel="noopener">Android高版本联网失败报错:Cleartext HTTP traffic to xxx not permitted解决方法</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac电脑可以联网但是浏览器打不开网页</title>
      <link href="/2020/05/09/mac-dian-nao-ke-yi-lian-wang-dan-shi-liu-lan-qi-da-bu-kai-wang-ye/"/>
      <url>/2020/05/09/mac-dian-nao-ke-yi-lian-wang-dan-shi-liu-lan-qi-da-bu-kai-wang-ye/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨天晚上电脑使用正常，今天电脑一开机发现浏览器打不开，一开始以为是VPN的问题，所以就关了代理继续尝试，发现仍然打不开，但是微信可以发送消息，然后我就又重新连了手机的热点进行尝试，也是正常的，只有连家里边的无线时是打不开网页，后来上网查询得知，如果网络没有问题，网页打不开，说明是DNS问题，很大可能性是当前DNS解析服务器无法正常解析网页，浏览器就不能打开网页，所以我修改了DNS服务器地址。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、首先打开<code>系统偏好设置</code>，然后点击<code>网络</code>，如下图。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gelxb8yki5j30u50u0ank.jpg" alt=""></p><p>2、进入<code>网络</code>对话框之后，点击右下角的<code>高级</code>按钮。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gelxd866d4j30zl0u00z0.jpg" alt=""></p><p>3、切换到<code>DNS</code>，然后点击左下方的<code>+</code>，并输入114DNS的IP地址：<code>114.114.114.114</code>，然后点击<code>好</code>按钮。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gelxfzjiqzj31060s4x2x.jpg" alt=""></p><p>4、完成之后，点击窗口底部的<code>应用</code>按钮，然后关闭系统设置，设置会立即生效，此时再打开浏览器会发现网页可以打开了。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gelxi9dxmpj30zl0u0teu.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis bitmaps实现点赞功能</title>
      <link href="/2020/05/08/yong-hu-id-wei-shu-zi-de-qing-kuang-xia-yong-redis-bitmaps-shi-xian-dian-zan-gong-neng/"/>
      <url>/2020/05/08/yong-hu-id-wei-shu-zi-de-qing-kuang-xia-yong-redis-bitmaps-shi-xian-dian-zan-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="作业：redis-bitmaps实现点赞功能"><a href="#作业：redis-bitmaps实现点赞功能" class="headerlink" title="作业：redis bitmaps实现点赞功能"></a>作业：redis bitmaps实现点赞功能</h1><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>用户ID为数字的情况下用redis bitmaps实现点赞功能 （要求：不能保存数据）</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><ol><li>点赞</li><li>取消点赞</li><li>查看是否点赞</li><li>统计有多少点赞</li></ol><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>假设用户ID为123L，对contentId为001的文章点赞。</p><p><strong>点赞</strong>：首先根据contentId生成赞数据存储的Redis key，比如生成策略为like_{contentId}，userId为123L的用户点赞，点赞的value值设置为ture。</p><p><strong>取消点赞</strong>：思路同上，value值设置为false。</p><p><strong>是否点赞</strong>：根据key和偏移量的值来查询对应的值是true还是false。</p><p><strong>统计有多少点赞</strong>：就是利用位图计数的原理来实现。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>1、在<code>pox.xml</code>中导入jedis依赖，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、编写功能代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> jedis<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Date: 2020-05-08 * @Description: 用户ID为数字的情况下用redis bitmaps实现点赞功能 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeOfRedisBitMap</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接redis     */</span>    <span class="token keyword">public</span> <span class="token function">LikeOfRedisBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 点赞     * @param contentId     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">like</span><span class="token punctuation">(</span>String contentId<span class="token punctuation">,</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span><span class="token string">"like_"</span> <span class="token operator">+</span> contentId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID为"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">"的用户给ID为"</span><span class="token operator">+</span> contentId <span class="token operator">+</span> <span class="token string">"的文章点赞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 取消点赞     * @param contentId     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unLike</span><span class="token punctuation">(</span>String contentId<span class="token punctuation">,</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span><span class="token string">"like_"</span> <span class="token operator">+</span> contentId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID为"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">"的用户取消了给ID为"</span><span class="token operator">+</span> contentId <span class="token operator">+</span> <span class="token string">"的文章点赞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否点赞     * @param contentId     * @param userId     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLike</span><span class="token punctuation">(</span>String contentId<span class="token punctuation">,</span> Long userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        Boolean flag <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">getbit</span><span class="token punctuation">(</span><span class="token string">"like_"</span> <span class="token operator">+</span> contentId<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID为"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">"的用户给ID为"</span><span class="token operator">+</span> contentId <span class="token operator">+</span> <span class="token string">"的文章点赞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID为"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">"的用户没有给ID为"</span><span class="token operator">+</span> contentId <span class="token operator">+</span> <span class="token string">"的文章点赞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 统计有多少点赞     * @param contentId     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">likeCount</span><span class="token punctuation">(</span>String contentId<span class="token punctuation">)</span><span class="token punctuation">{</span>        Long count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"like_"</span> <span class="token operator">+</span> contentId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID为"</span> <span class="token operator">+</span> contentId <span class="token operator">+</span> <span class="token string">"的文章点赞数为"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LikeOfRedisBitMap likeDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LikeOfRedisBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 点赞</span>        likeDemo<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span>123L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取消点赞</span>        likeDemo<span class="token punctuation">.</span><span class="token function">unLike</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span>123L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否点赞</span>        likeDemo<span class="token punctuation">.</span><span class="token function">isLike</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span>123L<span class="token punctuation">)</span><span class="token punctuation">;</span>        likeDemo<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> 234L<span class="token punctuation">)</span><span class="token punctuation">;</span>        likeDemo<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> 235L<span class="token punctuation">)</span><span class="token punctuation">;</span>        likeDemo<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> 236L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 统计有多少点赞</span>        likeDemo<span class="token punctuation">.</span><span class="token function">likeCount</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Mybatis原理</title>
      <link href="/2020/05/07/spring-zheng-he-mybatis-yuan-li/"/>
      <url>/2020/05/07/spring-zheng-he-mybatis-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring整合Mybatis原理实现步骤"><a href="#Spring整合Mybatis原理实现步骤" class="headerlink" title="Spring整合Mybatis原理实现步骤"></a>Spring整合Mybatis原理实现步骤</h1><p>实际开发过程中spring帮我们简化了Mybatis的配置。Springboot更是简化了xml配置，更多地使用注解来配置spring容器。首先分析一下mybatis的基本原理。</p><h2 id="Mybatis的基本工作原理"><a href="#Mybatis的基本工作原理" class="headerlink" title="Mybatis的基本工作原理"></a>Mybatis的基本工作原理</h2><p>在Mybatis中，我们可以使用一个接口去定义要执行sql，这里以<code>UserMapper</code>为例，示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>  User <span class="token function">selectById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Mybatis通过SqlSession对象调用mybatis封装的Api的步骤"><a href="#Mybatis通过SqlSession对象调用mybatis封装的Api的步骤" class="headerlink" title="Mybatis通过SqlSession对象调用mybatis封装的Api的步骤"></a>Mybatis通过SqlSession对象调用mybatis封装的Api的步骤</h4><ol><li>创建SqlSessionFactoryBuilder对象</li><li>通过SqlSessionFactoryBuilder对象的build方法解析xml配置文件，创建SqlSessionFactory对象</li><li>通过SqlSessionFactory对象的OpenSession方法，返回SqlSession</li><li>调用SqlSession的相应Api</li></ol><pre class=" language-java"><code class="language-java">InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Mybatis的目的是</strong>：使得程序员能够以调用方法的方式执行某个指定的sql，将执行sql的底层逻辑进行了封装。</p><p>当调用SqlSession的getMapper方法时，会对传入的接口生成一个<strong>代理对象</strong>，而程序要真正用到的就是这个代理对象，在调用代理对象的方法时，Mybatis会取出该方法所对应的sql语句，然后利用JDBC去执行sql语句，最终得到结果。</p><h2 id="Spring整合Mybatis原理"><a href="#Spring整合Mybatis原理" class="headerlink" title="Spring整合Mybatis原理"></a>Spring整合Mybatis原理</h2><p><strong>Spring和Mybatis整合的目的是</strong>：把某个Mapper的代理对象作为一个bean放入Spring容器中，使得能够像使用一个普通bean一样去使用这个代理对象，比如能被@Autowire自动注入。</p><p>比如当Spring和Mybatis整合之后，我们就可以使用如下的代码来使用Mybatis中的代理对象了：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserService中的userMapper属性就会被自动注入为Mybatis中的代理对象。那么现在我们要解决的问题的就是：如何能够把Mybatis的代理对象作为一个bean放入Spring容器中，要解决这个，我们需要对Spring的bean生成过程有一个了解。</p><h3 id="1、Spring中Bean的产生过程"><a href="#1、Spring中Bean的产生过程" class="headerlink" title="1、Spring中Bean的产生过程"></a>1、Spring中Bean的产生过程</h3><p>Spring是个Bean大工厂，负责Bean的创建和注入。Spring启动过程中，大致会经过如下步骤去生成bean：</p><ol><li>扫描指定的包路径下的class文件</li><li>根据class信息生成对应的BeanDefinition（在此处，我们可以利用某些机制去修改BeanDefinition）</li><li>根据BeanDefinition生成bean实例</li><li>把生成的bean实例放入Spring容器中</li></ol><p>假设现在有一个A类，示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>还有一个B类，不存在@Component注解，示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>执行如下代码：</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为：<code>com.luban.util.A@6acdbdf5</code></p><p>A类对应的bean对象类型仍然为A类。但是这个结论是不确定的，我们可以利用BeanFactory后置处理器来修改BeanDefinition，我们添加一个BeanFactory后置处理器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LubanBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        BeanDefinition beanDefinition <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样就会导致原本的A类对应的BeanDefiniton被修改了，被修改成了B类，那么后续正常生成的bean对象的类型就是B类。此时，调用代码<code>context.getBean(A.class);</code>会报错，但是调用代码<code>context.getBean(B.class);</code>不会报错，尽管B类上没有@Component注解。并且，再次执行下面代码：</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>返回的结果是：<code>com.luban.util.B@4b1c1ea0</code></p><blockquote><p>⚠️注意：在Spring中，bean对象跟class没有直接关系，跟BeanDefinition才有直接关系。</p></blockquote><h3 id="2、把Mybatis的代理对象作为一个bean放入Spring容器"><a href="#2、把Mybatis的代理对象作为一个bean放入Spring容器" class="headerlink" title="2、把Mybatis的代理对象作为一个bean放入Spring容器"></a>2、把Mybatis的代理对象作为一个bean放入Spring容器</h3><p>在Spring中，如果你想生成一个bean，那么需要先生成一个BeanDefinition，就像你想new一个对象实例，得先有一个class一样。只要有了BeanDefinition，通过在BeanDefinition中设置bean对象的类型，然后把BeanDefinition添加给Spring，Spring就会根据BeanDefinition自动帮我们生成一个类型对应的bean对象。</p><p>所以，现在我们要解决两个问题：</p><ol><li><strong>Mybatis的代理对象的类型是什么？因为我们要设置给BeanDefinition</strong></li><li><strong>我们怎么把BeanDefinition添加给Spring容器？</strong></li></ol><blockquote><p>⚠️注意：上文中我们使用的BeanFactory后置处理器，他只能修改BeanDefinition，并不能新增一个BeanDefinition。我们应该使用Import技术来添加一个BeanDefinition。</p></blockquote><p>假设：我们有一个UserMapper接口，他的代理对象的类型为UserMapperProxy。那么我们的思路就是这样的，伪代码如下：</p><pre class=" language-java"><code class="language-java">BeanDefinitoin bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bd<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>UserMapperProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SpringContainer<span class="token punctuation">.</span><span class="token function">addBd</span><span class="token punctuation">(</span>bd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，这里有一个严重的问题，就是上文中的UserMapperProxy是我们假设的，他表示一个代理类的类型，然而Mybatis中的代理对象是利用的JDK的动态代理技术实现的，也就是代理对象的代理类是动态生成的，我们根本无法确定代理对象的代理类到底是什么。所以回到我们的问题：<strong>Mybatis的代理对象的类型是什么？</strong>本来有两种方式：1、代理对象对应的代理类；2、代理对象对应的接口。因为代理类是动态生成的，所以方式1不可以，那么我们来看方式2。思路如下：</p><pre class=" language-java"><code class="language-java">BeanDefinition bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bd<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SpringContainer<span class="token punctuation">.</span><span class="token function">addBd</span><span class="token punctuation">(</span>bd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，实际上给BeanDefinition对应的类型设置为一个接口是行不通的，因为Spring没有办法根据这个BeanDefinition去new出对应类型的实例，接口是没法直接new出实例的。</p><p>那么现在问题来了，要解决的问题：<strong>Mybatis的代理对象的类型是什么？</strong>两种方式都被我们否定了，所以这个问题是无解的，所以我们不能再沿着这个思路去思考了，只能回到最开始的问题：如何能够把Mybatis的代理对象作为一个bean放入Spring容器中？</p><p>总结上面的推理：<strong>我们想通过设置BeanDefinition的class类型，然后由Spring自动的帮助我们去生成对应的bean，但是这条路是行不通的。</strong></p><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p>那么还有没有其他办法，可以去生成bean呢？并且<strong>生成bean的逻辑不能由Spring来帮我们做</strong>，得由我们自己来做。此时就需要使用到Spring中的FactoryBean。我们可以利用FactoryBean去自定义我们要生成的bean对象，比如我们定义了一个LubanFactoryBean，它实现了FactoryBean，getObject方法就是用来自定义生成bean对象逻辑的。示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LubanFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object proxyInstance <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>LubanFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 执行代理逻辑</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxyInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行如下测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lubanFactoryBean: "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"lubanFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&amp;lubanFactoryBean: "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"&amp;lubanFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lubanFactoryBean-class: "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"lubanFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-java"><code class="language-java">lubanFactoryBean<span class="token operator">:</span> com<span class="token punctuation">.</span>luban<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LubanFactoryBean$<span class="token number">1</span><span class="token annotation punctuation">@4d41cee</span><span class="token operator">&amp;</span>lubanFactoryBean<span class="token operator">:</span> com<span class="token punctuation">.</span>luban<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LubanFactoryBean<span class="token annotation punctuation">@3712b94</span>lubanFactoryBean<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>$Proxy20</code></pre><p>从结果我们可以看到，从Spring容器中拿到的名字为”lubanFactoryBean”的bean对象，就是我们所自定义的jdk动态代理所生成的代理对象。所以，我们可以通过FactoryBean来向Spring容器中添加一个自定义的bean对象。上文中所定义的LubanFactoryBean对应的就是UserMapper，表示我们定义了一个LubanFactoryBean，相当于把UserMapper对应的代理对象作为一个bean放入到了容器中。但是作为程序员，我们不可能每定义了一个Mapper，还得去定义一个LubanFactoryBean，这是很麻烦的事情，我们改造一下LubanFactoryBean，让他变得更通用，比如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LubanFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意这里</span>    <span class="token keyword">private</span> Class <span class="token class-name">mapperInterface</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LubanFactoryBean</span><span class="token punctuation">(</span>Class <span class="token class-name">mapperInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object proxyInstance <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>LubanFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>mapperInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 执行代理逻辑</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxyInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mapperInterface<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>改造LubanFactoryBean之后，LubanFactoryBean变得灵活了，可以在构造LubanFactoryBean时，通过构造传入不同的Mapper接口。实际上LubanFactoryBean也是一个Bean，我们也可以通过生成一个BeanDefinition来生成一个LubanFactoryBean，并给构造方法的参数设置不同的值，比如伪代码如下：</p><pre class=" language-java"><code class="language-java">BeanDefinition bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意一：设置的是LubanFactoryBean</span>bd<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>LubanFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意二：表示当前BeanDefinition在生成bean对象时，会通过调用LubanFactoryBean的构造方法来生成，并传入UserMapper</span>bd<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>SpringContainer<span class="token punctuation">.</span><span class="token function">addBd</span><span class="token punctuation">(</span>bd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>特别说一下注意二，表示表示当前BeanDefinition在生成bean对象时，会通过调用LubanFactoryBean的构造方法来生成，并传入UserMapper的Class对象。那么在生成LubanFactoryBean时就会生成一个UserMapper接口对应的代理对象作为bean了。</p><p>到此为止，其实就完成了我们要解决的问题：<strong>把Mybatis中的代理对象作为一个bean放入Spring容器中</strong>。只是我们这里是用简单的JDK代理对象模拟的Mybatis中的代理对象，除此之外，我们也可以调用Mybatis中提供的方法区生成一个代理对象。</p><h4 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h4><p>到这里，我们还有一个事情没有做，就是怎么真正的定义一个BeanDefinition，并把它添加到Spring中，此时我们要利用Import技术，比如可以通过以下方式实现。首先定义如下类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LubanImportBeanDefinitionRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinitionBuilder builder <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>LubanFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加beanDefinition</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"luban"</span><span class="token operator">+</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>并且在AppConfig上添加@Import注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>LubanImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这样在启动Spring时就会新增一个BeanDefinition，该BeanDefinition会生成一个LubanFactoryBean对象，并且在生成LubanFactoryBean对象时会传入UserMapper.class对象，通过LubanFactoryBean内部的逻辑，相当于会自动生产一个UserMapper接口的代理对象作为一个bean。</p><h3 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h3><p>通过上诉分析，我们要整合Spring和Mybatis，需要我们做的事情如下：</p><ol><li>定义一个LubanFactoryBean</li><li>定义一个LubanImportBeanDefinitionRegistrar</li><li>在AppConfig上添加一个注解@Import(LubanImportBeanDefinitionRegistrar.class)</li></ol><h3 id="4、优化"><a href="#4、优化" class="headerlink" title="4、优化"></a>4、优化</h3><p>这样就可以基本完成整合的需求了，当然还有两个点是可以优化的。</p><p>第一，单独再定义一个@LubanScan的注解，这样在AppConfig上直接使用@LubanScan即可，示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>LubanImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">LubanScan</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>第二，在LubanImportBeanDefinitionRegistrar中，我们可以去扫描Mapper，在LubanImportBeanDefinitionRegistrar我们可以通过AnnotationMetadata获取到对应的@LubanScan注解，所以我们可以在@LubanScan上设置一个value，用来指定待扫描的包路径。然后在LubanImportBeanDefinitionRegistrar中获取所设置的包路径，然后扫描该路径下的所有Mapper，生成BeanDefinition，放入Spring容器中。</p><p>到此为止，Spring整合Mybatis的核心原理就结束了，再次总结一下：</p><ol><li>定义一个LubanFactoryBean，用来将Mybatis的代理对象生成一个bean对象</li><li>定义一个LubanImportBeanDefinitionRegistrar，用来生成不同Mapper对象的LubanFactoryBean</li><li>定义一个@LubanScan，用来在启动Spring时执行LubanImportBeanDefinitionRegistrar的逻辑，并指定包路径</li></ol><p>以上这个三个要素分别对应org.mybatis.spring中的：</p><ol><li>MapperFactoryBean</li><li>MapperScannerRegistrar</li><li>@MapperScan</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 底层原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器购买及搭建配置</title>
      <link href="/2020/05/05/a-li-yun-fu-wu-qi-gou-mai-ji-da-jian-pei-zhi/"/>
      <url>/2020/05/05/a-li-yun-fu-wu-qi-gou-mai-ji-da-jian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、阿里云服务器购买及配置"><a href="#一、阿里云服务器购买及配置" class="headerlink" title="一、阿里云服务器购买及配置"></a>一、阿里云服务器购买及配置</h2><h3 id="1、实名认证"><a href="#1、实名认证" class="headerlink" title="1、实名认证"></a>1、实名认证</h3><blockquote><p>云翼计划传送门：<a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">https://promotion.aliyun.com/ntms/act/campus2018.html</a></p></blockquote><p>学生可以使用阿里云云翼计划只需9.5/月就可以购买阿里云服务器，但是在购买之前需要进行个人认证和学生认证，使用淘宝账号登录阿里云官网，点击账号下的实名认证跳转到账号管理页面，然后进行实名认证和学生认证。认证完成之后就可以进行购买了。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehaxh3lqwj309y0o6aay.jpg" alt="认证" style="zoom:50%;"><h3 id="2、购买云服务器ECS"><a href="#2、购买云服务器ECS" class="headerlink" title="2、购买云服务器ECS"></a>2、购买云服务器ECS</h3><p>认证完成后，进入首页进行购买云服务器，我选择购买的是云服务器ECS，当然轻量应用服务器也可以购买，看个人情况。</p><blockquote><h4 id="云服务器ECS和轻量应用服务器区别："><a href="#云服务器ECS和轻量应用服务器区别：" class="headerlink" title="云服务器ECS和轻量应用服务器区别："></a><strong>云服务器ECS和轻量应用服务器区别：</strong></h4><p>1、云服务器ECS带宽是1M，而轻量应用服务器带宽是5M峰值，每月限1000G流量，超出后按照0.8元/G收费。如果光从这一点来说，绝对是选择轻量应用服务器了，因为同等硬件配置下，更高的带宽，意味着访问网站更快，能支持的并发数也更多。而每月1000G的流量，绝大多数的同学们都用不完的。所以不必担心超出的问题。</p><p>2、云服务器ECS可以配合阿里云的云数据库RDS使用，也可以使用阿里云的负载均衡。而轻量应用服务器不支持使用这些产品。换句话说，轻量应用服务器，天生是为那些只需要一台服务器的人准备的，所以没有太考虑扩展性，但即便如此，也已经基本满足了同学们的需求。毕竟大家的用途可能是以学习、测试、运行个人网站等小规模的应用为主的。</p><p>总之，云服务器ECS和轻量应用服务器各有优势，具体可参考<a href="https://help.aliyun.com/?source=5176.11533457&amp;userCode=kzp4uq6k&amp;type=copy" target="_blank" rel="noopener">阿里云官方文档</a>进行深入的学习和了解。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehb12r9y0j325g0sa46j.jpg" alt=""></p><p>点击<code>立即购买</code>,然后弹出下图页面，选择地域和操作系统，然后点击购买，确认下单，操作系统选择看个人喜好，我这里选择的是Ubuntn（因为我是买完之后又重新进入截图，费用有变化，但一开始是9.5/月）。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehb9bgurxj31l50u0dsc.jpg" alt="购买服务器"></p><p>支付完成之后就可以去云服务ECS控制台查看自己购买的云服务器实例，可以看到服务器的IP地址，点击实例ID可以进入查看实例详情。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehbho0mn4j31pi0u0aky.jpg" alt="控制台查看"></p><p>进入实例详情，可以编辑自己的实例名称，编辑实例属性，可以重置服务器密码，方便之后通过ssh远程连接服务器。密码重置后需要重新启动服务器才能生效，启动成功后，就可以进行远程连接。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehbkweyp4j31is0u0dqp.jpg" alt="实例详情"></p><p>也可以通过本地的远程连接工具连接服务器，因为我是mac系统，并且之前已经安装了item2，我就直接使用item2进行远程连接。用户名默认为root，使用<code>ssh root@你的ip地址</code>进行连接，然后输入之前设置的密码，登录成功，就出现下图界面。（当你购买成功之后阿里云也会发送信息到你手机上，可以自行查看）</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehbtuykwxj30vo0nqwob.jpg" alt="image-20200505094109476"></p><h2 id="二、阿里云服务器-Ubuntu16-04安装软件"><a href="#二、阿里云服务器-Ubuntu16-04安装软件" class="headerlink" title="二、阿里云服务器 Ubuntu16.04安装软件"></a>二、阿里云服务器 Ubuntu16.04安装软件</h2><h3 id="1、在阿里云Ubuntu服务器上配置Java开发环境"><a href="#1、在阿里云Ubuntu服务器上配置Java开发环境" class="headerlink" title="1、在阿里云Ubuntu服务器上配置Java开发环境"></a>1、在阿里云Ubuntu服务器上配置Java开发环境</h3><h5 id="下载jdk-linux版"><a href="#下载jdk-linux版" class="headerlink" title="下载jdk linux版"></a>下载jdk linux版</h5><p>首先需要注册Oracle账号，登录，查找你需要的jdk版本进行下载。</p><blockquote><p>传送门：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p></blockquote><p>下载完成后，通过如下命令把下载的文件传到服务器上。</p><pre class=" language-shell"><code class="language-shell"># root为用户名，/home为服务器对应的文件夹，可以自定义scp jdk-8u251-linux-i586.tar.gz root@ip地址:/home</code></pre><p>在服务器上的/home目录下新建一个文件夹jvm，然后解压jdk到jvm文件夹下</p><pre class=" language-shell"><code class="language-shell">tar zxvf jdk-8u251-linux-i586.tar.gz -C /home/jvm/</code></pre><p>然后编辑根目录下的bashrc文件，<code>root@host:~# vim ~/.bashrc</code>进行环境变量配置：</p><pre><code>#set Java environment export JAVA_HOME=/home/jvm/jdk1.8.0_251 export JRE_HOME=${JAVA_HOME}/jre  export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  export  PATH=${JAVA_HOME}/bin:$PATH</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gehkbrp8i9j30vo0p0wjn.jpg" alt=""></p><p>配置完成后，输入<code>:wq</code>保存退出。</p><p>使用<code>source ~/.bashrc</code>命令让环境变量配置生效。然后输入<code>java -version</code>检查是否成功安装。如果出现如下图所示的信息，则安装配置成功。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehkgf847nj30vq04caaw.jpg" alt=""></p><h3 id="2、在阿里云Ubuntu服务器上安装MySQL"><a href="#2、在阿里云Ubuntu服务器上安装MySQL" class="headerlink" title="2、在阿里云Ubuntu服务器上安装MySQL"></a>2、在阿里云Ubuntu服务器上安装MySQL</h3><p>执行命令：</p><pre><code>root@host:~# apt-get install mysql-server-5.7</code></pre><p>安装期间会弹出y/n确认,输入y，然后会弹出设置密码，输入自己要设置的数据库密码后按enter，再重新输入一遍后enter，然后安装完成。可以通过如下命令来查看是否安装成功，如果mysql的socket处于listen状态说明安装成功。</p><pre><code>netstat -tap | grep mysql</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehl715wjfj30ve032dgx.jpg" alt=""></p><p>然后可以登录数据库：<code>mysql -u root -p</code>，然后输入密码进入。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehlj913tpj30va0dejxa.jpg" alt=""></p><h4 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h4><p>1、mysql默认是只允许本地主机访问127.0.0.1，并关闭了远程连接，所以安装之后打开远程连接，并修改配置允许其他ip访问。</p><p>首先输入以下命令：<code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code>，然后注释<code>bind-address = 127.0.0.1</code>。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gehlqqioa3j30vi0m8thr.jpg" alt=""></p><p>2、然后通过命令    <code>/etc/init.d/mysql restart</code>或者<code>service mysql restart</code>重启mysql。然后通过以下命令配置远程连接。</p><pre class=" language-shell"><code class="language-shell">mysql -u root -p;show databases;use mysql;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '密码' WITH GRANT OPTION;# update user set host='%' where user='root' and host='localhost'; #将host设置为%表示任何ip都能连接mysql，当然您也可以将host指定为某个ipflush privileges; #刷新权限表，使配置生效</code></pre><p>3、阿里云的服务器设置了安全组规则来限制ecs服务器的ip,端口访问策略。因此需要修改。登录阿里云-&gt;控制台-&gt;云服务器ECS-&gt;网络和安全-&gt;安全组，点击安全组列表右侧的配置规则如下图。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehmaa8n7gj324t0u0qa9.jpg" alt=""></p><p>3306端口是访问服务器mysql的，没有的话就添加规则，端口范围选择 3306mysql,授权对象设置为0.0.0.0/0 允许所有ip访问。（80端口是访问web的，22端口是远程连接服务器的）</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehm78axedj31sg0u0ahb.jpg" alt=""></p><p>然后本地就可以进行远程连接数据库了，主机名为服务器IP地址。用户名root，密码输入上面允许远程访问连接所设的密码即可。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gehnn4ybsjj30zv0u0gs3.jpg" alt=""></p><h3 id="2、在阿里云Ubuntu服务器上安装neo4j"><a href="#2、在阿里云Ubuntu服务器上安装neo4j" class="headerlink" title="2、在阿里云Ubuntu服务器上安装neo4j"></a>2、在阿里云Ubuntu服务器上安装neo4j</h3><p>登录网页下载neo4j的linux版。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1geilxhv56vj31se0u0wkr.jpg" alt="image-20200506121612250"></p><blockquote><p>传送门：<a href="https://neo4j.com/download-center/#enterprise" target="_blank" rel="noopener">https://neo4j.com/download-center/#enterprise</a></p></blockquote><p>下载完成后，通过如下命令把下载的文件传到服务器上。</p><pre class=" language-shell"><code class="language-shell"># root为用户名，/home为服务器对应的文件夹，可以自定义scp neo4j-community-3.5.17-unix.tar.gz root@123.57.245.4:/home</code></pre><p>在服务器上的/home目录下新建一个文件夹neo4j，然后解压jdk到jvm文件夹下</p><pre class=" language-shell"><code class="language-shell">tar zxvf neo4j-community-3.5.17-unix.tar.gz -C /home/neo4j</code></pre><p>然后编辑<code>/home/neo4j/neo4j-community-3.5.17/conf</code>目录下的<code>neo4j.conf</code>文件，进行环境变量配置：</p><pre class=" language-shell"><code class="language-shell"># 去掉以下注释，并配置：dbms.connectors.default_listen_address=0.0.0.0              # 允许远程访问dbms.connector.bolt.enabled=true             # 开启bolt服务，默认端口7687dbms.connector.bolt.listen_address=:7687dbms.connector.http.enabled=true            # 开启http服务，默认端口7474dbms.connector.http.listen_address=:7474dbms.connector.https.enabled=true            # 开启https服务，默认端口7473dbms.connector.https.listen_address=:7473</code></pre><p>然后就可以输入以下命令启动和停止neo4j。</p><pre class=" language-shell"><code class="language-shell"># 进入neo4j-community-3.5.17/bin目录下执行./neo4j start   # 启动./neo4j stop    # 停止./neo4j status  # 查看数据库状态</code></pre><p>如果要建立远程连接，通过ip地址访问neo4j，还需要同上边mysql的设置一样，在安全组规则的入方向中添加规则，加入<code>7474</code>端口，授权对象设置为0.0.0.0/0 允许所有ip访问。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1geio0gte28j31tw0eugne.jpg" alt=""></p><p>然后在浏览器访问，输入地址：<a href="http://123.57.245.4:7474/，出现如下页面，首次登录的账号密码均为`neo4j`：" target="_blank" rel="noopener">http://123.57.245.4:7474/，出现如下页面，首次登录的账号密码均为`neo4j`：</a></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1geio2da6x7j31s90u0af1.jpg" alt="image-20200506133005334"></p><p>但是此时会报错：<code>ServiceUnavailable: WebSocket connection failure. Due to security constraints in your web browser, the reason for the failure is not available to this Neo4j Driver. Please use your browsers development console to deter...</code></p><p>通过查阅资料了解到，造成的原因可能是因为我们只能访问7474端口，不能访问7687端口，因此需要在安全组规则中添加这个端口。同上，加入<code>7687</code>端口，授权对象设置为0.0.0.0/0 允许所有ip访问。</p><p>然后再次访问，输入账号密码，然后连接成功，会让你重置密码，如下图，输入你要设置的密码，然后进行连接。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1geip2youvtj326s0t6jva.jpg" alt=""></p><p>连接成功之后，会出现如下页面，然后就可以进行图数据库操作了😊。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1geip48ollij31nl0u04aa.jpg" alt=""></p><p>导入csv文件到neo4j数据库中：</p><pre class=" language-shell"><code class="language-shell">scp *.csv root@123.57.245.4:/home/neo4j/neo4j-community-3.5.17/import</code></pre><p>然后加载csv文件，执行cypher语句，把节点及关系导入neo4j数据库中：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1geipvp6pxaj31lc0u0npa.jpg" alt="image-20200506143252664"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/2020/04/25/xiao-xi-dui-lie/"/>
      <url>/2020/04/25/xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>消息是人与计算机进行信息传递的有效载体，消息从发送者到接收者的典型传递方式有两种：</p><ul><li><p>即时消息：即消息从一端发出后（消息发送者）立即就可以达到另一端（消息接收者），这种方式的具体实现就是平时最常见的IM聊天消息；</p></li><li><p>延迟消息：即消息从一端发出后，首先进入消息队列进行临时存储，然后再由消息队列发送给另一端。</p></li></ul><h2 id="一、消息队列的两种消息模式"><a href="#一、消息队列的两种消息模式" class="headerlink" title="一、消息队列的两种消息模式"></a>一、消息队列的两种消息模式</h2><p>Java消息服务（JavaMessage Service，JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。它使得分布式通信耦合度更低，消息服务更加可靠。在JMS规范中，支持两种消息模型：点对点模式（point to point， queue）和发布/订阅模式（publish/subscribe，topic）。</p><h4 id="点对点模式（P2P）"><a href="#点对点模式（P2P）" class="headerlink" title="点对点模式（P2P）"></a>点对点模式（P2P）</h4><p>消息生产者生产消息发送到<code>Queue</code>中，然后消息消费者从<code>Queue</code>中取出并且消费消息。 消息被消费以后，<code>Queue</code>中不再有存储，所以消息只能被一个消费者消费一次。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge70si329pj30qg08s3zj.jpg" alt="点对点模式" style="zoom:50%;"><h4 id="发布-订阅模式（Pub-Sub）"><a href="#发布-订阅模式（Pub-Sub）" class="headerlink" title="发布/订阅模式（Pub/Sub）"></a>发布/订阅模式（Pub/Sub）</h4><p>消息生产者发布消息到<code>Topic</code>中，多个消费者可以从该<code>Topic</code>中订阅到这条消息并消费。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge70t1sc7oj30q2096wfm.jpg" alt="发布/订阅模式" style="zoom:50%;"><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>这两种模式主要区别是：点对模式生产者发送到队列的消息只能被一个消费者消费一次，实现了一个可靠的负载均衡。而发布/订阅模式生产者发布消息到主题中，多个消费者可以订阅该消息，可以重复消费。</p><h2 id="二、什么是消息队列？"><a href="#二、什么是消息队列？" class="headerlink" title="二、什么是消息队列？"></a>二、什么是消息队列？</h2><p>消息队列（Message Queue），是一种进程间通信或同一进程的不同线程间的通信方式，把数据放到消息队列的叫做生产者，从消息队列里边取数据叫做消费者。通俗的讲就是把要传输的数据放到队列中，需要消费的系统从队列中取需要的数据。</p><p>消息队列是分布式系统中重要的组件，主要用来解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。在生产环境中，使用较多的消息队列有Kafka、ActiveMQ、RabbitMQ、RocketMQ 等。已被广泛用于电商、即时通讯、社交等各种中大型分布式应用系统。</p><h2 id="三、为什么要使用消息队列？"><a href="#三、为什么要使用消息队列？" class="headerlink" title="三、为什么要使用消息队列？"></a>三、为什么要使用消息队列？</h2><p>消息队列在实际生产应用中包含的场景主要有：<strong>解耦、异步、削峰、消息通讯、日志</strong>等。</p><h3 id="场景1-应用解耦"><a href="#场景1-应用解耦" class="headerlink" title="场景1 应用解耦"></a>场景1 应用解耦</h3><blockquote><p>场景说明：一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护很麻烦。</p></blockquote><h4 id="不使用MQ之前"><a href="#不使用MQ之前" class="headerlink" title="不使用MQ之前"></a>不使用MQ之前</h4><p>比如我有一个系统A，它会产生一些数据，然后系统B和系统C需要调用系统A的接口来使用这些数据去做相应的操作，过了一段时间，又新增了系统D，系统D也需要调用系统A接口获取数据完成相应的操作，此时系统A就要修改代码，为系统D开放一个接口供其使用，又过了一段时间，系统B不需要调用系统A的接口获取数据了，此时系统A又要继续修改代码，把之前给系统B提供的接口去掉，除此之外，系统A还要考虑系统B、C、D挂了怎么办，系统超时怎么办，要不要重新发送消息等等一系列问题，就这样系统A需要不断进行很多操作，跟其他系统有严重的耦合。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge77zrsuhaj30pe0ge0u0.jpg" alt="解耦前" style="zoom:50%;"><h4 id="使用MQ以后"><a href="#使用MQ以后" class="headerlink" title="使用MQ以后"></a>使用MQ以后</h4><p>在系统中加入MQ以后，系统A就只负责把需要发送的数据写到MQ中，至于谁需要数据、谁不需要数据，系统A不需要关心。接下来系统B、系统C如果需要系统A的数据进行操作只需要从MQ中去消费；如果又新增一个系统D也需要系统A的数据，它也直接去MQ中消费即可；如果系统B又不需要这个数据了，那它只需要取消对MQ的消费即可；如果其中某一系统挂了或者出现请求超时等问题，都只跟MQ有关，跟系统A没有关系，这样下来，系统A与其他系统都解耦了。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6hqp040nj30p80l0jt6.jpg" alt="解耦后" style="zoom:50%;"><h4 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h4><p>1、用户下单后，订单系统需要通知库存系统。</p><p><strong>不使用MQ前：</strong>用户下单以后，如果出现库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。</p><p><strong>使用MQ后</strong>：对于订单系统，用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。对于库存系统，订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作。如果在下单时库存系统不能正常访问。也不会影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</p><p>2、用户在某一系统上传一张图片，人脸识别系统会对该图片进行人脸识别。</p><p><strong>不使用MQ前</strong>：用户上传照片，服务器接收到图片后，图片上传系统立即调用人脸识别系统，需要人脸识别系统处理完成后，再返回给客户端，这样的方式延迟高，如果人脸识别系统被调失败，则导致图片上传失败，即使用户并不需要立即知道结果。因为图片上传系统与人脸识别系统之间的互相调用存在耦合。</p><p><strong>使用MQ后</strong>：客户端上传图片后，图片上传系统将图片信息、批次写入消息队列，直接返回成功；而人脸识别系统则定时从消息队列中取数据，完成对新增图片的识别。此时图片上传系统并不需要关心人脸识别系统是否对这些图片信息的处理、以及何时对这些图片信息进行处理。事实上，由于用户并不需要立即知道人脸识别结果，人脸识别系统可以选择不同的调度策略，按照闲时、忙时、正常时间，对队列中的图片信息进行处理。</p><h3 id="场景2-异步处理"><a href="#场景2-异步处理" class="headerlink" title="场景2 异步处理"></a>场景2 异步处理</h3><blockquote><p>场景说明：用户对某系统发送一个请求，如果系统从接受用户请求操作到响应给用户能够在 200 ms 以内完成，那用户几乎是无感知的，如果请求耗时很长，比如等到将近1s，这几乎不可接受的，用户体验很差。</p></blockquote><h4 id="不使用MQ之前-1"><a href="#不使用MQ之前-1" class="headerlink" title="不使用MQ之前"></a>不使用MQ之前</h4><p>比如有一个用户，对A系统发送一个请求，A系统接收用户请求后，需要在自己本地写库耗时50ms，同时需要调用系统B、系统C和系统D分别写库，耗时200ms、300ms和300ms，那么通过计算可以知道这次请求总延时需要850ms，耗时很长，对于用户体验是极差的。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6e2ju517j30q00dewfc.jpg" alt="异步前" style="zoom:50%;"><h4 id="使用MQ以后-1"><a href="#使用MQ以后-1" class="headerlink" title="使用MQ以后"></a>使用MQ以后</h4><p>在系统中加入MQ以后，用户发送请求到系统A，系统A写入本地耗时50ms，然后系统A把消息写入MQ队列中，耗时50ms，然后系统A就直接返回响应给用户，通过将调用其他接口异步化，总延时只需要需要100ms，对于用户来说是几乎是无感知的，提高了用户体验和吞吐量。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6hrbnkinj30r20ki0uq.jpg" alt="异步后" style="zoom:50%;"><h4 id="具体场景-1"><a href="#具体场景-1" class="headerlink" title="具体场景"></a>具体场景</h4><p>用户注册某一网站后，网站系统需要发送注册邮件和注册短信给用户。</p><p><strong>不使用MQ之前</strong>：在串行方式下，用户发送注册请求后，系统需要将注册信息写入数据库成功后，再发送注册邮件，然后发送注册短信，等所有任务执行完成后，返回信息给客户端；在并行方式下，系统将注册信息写入数据库成功后，同时进行发送注册邮件和发送注册短信的操作，等所有任务执行完成后，返回信息给客户端，同串行方式相比，并行方式可以提高执行效率，减少执行时间，但耗时还是比较长的。</p><p><strong>使用MQ以后</strong>：用户发送注册请求，系统将注册信息写入数据库成功后，发送注册邮件、注册短信的消息到消息队列，即可返回执行结果，写入消息队列的时间很快，几乎可以忽略，用户的响应时间基本相当于将用户数据写入数据库的时间。</p><h3 id="场景3-限流削峰"><a href="#场景3-限流削峰" class="headerlink" title="场景3 限流削峰"></a>场景3 限流削峰</h3><blockquote><p>场景说明：在某一段时间内，系统的每秒并发请求突然暴增，比如达到3000个请求，而处理请求的机器最多只能处理2000个请求，此时将会导致系统崩溃。</p></blockquote><h4 id="不使用MQ之前-2"><a href="#不使用MQ之前-2" class="headerlink" title="不使用MQ之前"></a>不使用MQ之前</h4><p>比如有一系统A是电商平台，在往常用户并发请求数量只有1000个，但是一到促销活动的时候，并发请求数量就会暴增，比如每秒发送3000个请求，但是该用于处理请求的机器最多能处理2000个请求，这就会导致系统崩溃，但是促销活动一结束，就到了低峰期，每秒的并发请求也就只有1000个，对于系统没有压力。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6g0xl2ocj30ma07ut98.jpg" alt="削峰前" style="zoom:50%;"><h4 id="使用MQ以后-2"><a href="#使用MQ以后-2" class="headerlink" title="使用MQ以后"></a>使用MQ以后</h4><p>在系统加入MQ以后，服务器在接收到大量的用户请求后，先把并发请求写入到MQ，处理请求的机器就会根据自己每秒能处理的最大请求数从MQ中拉取请求，通过这样的方式，即使在高峰期，系统就不会崩溃，这样虽然会将过多的请求积压到MQ中，但是高峰期过后，并发请求数量就会下降，处理请求的机器很快可以把积压在MQ中的请求解决掉。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge70pn1nddj30xg07cwfb.jpg" alt="削峰后" style="zoom:50%;"><h4 id="具体场景-2"><a href="#具体场景-2" class="headerlink" title="具体场景"></a>具体场景</h4><p>在某一段时间秒杀或团抢活动中，大量用户购买商品。</p><p><strong>不使用MQ之前</strong>：在某一段时间秒杀活动开始，大量的用户参与抢购，并发请求数量过多，导致系统挂掉。</p><p><strong>使用MQ以后</strong>：在某一段时间秒杀活动开始后，用户并发请求暴增，服务器接收到用户请求后，先将其写入消息队列，处理请求的机器根据能处理的最大请求数从消息队列中拉取请求，进行后续处理，可以缓解系统压力，避免系统崩溃。</p><h3 id="场景4-日志处理"><a href="#场景4-日志处理" class="headerlink" title="场景4 日志处理"></a>场景4 日志处理</h3><p>日志处理是指将消息队列用在日志处理中，比如Linkedin这种大型职业社交应用架构中Kafka的应用（Kafka就是Linkedin开发并开源的），解决大量日志传输的问题。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6iiosecgj30u0052t96.jpg" alt="日志处理" style="zoom:50%;"><ul><li>日志采集客户端：负责日志数据采集，定时写受写入Kafka队列；</li><li>Kafka消息队列：负责日志数据的接收，存储和转发；</li><li>日志处理应用：订阅并消费kafka队列中的日志数据；</li></ul><h3 id="场景5-消息通讯"><a href="#场景5-消息通讯" class="headerlink" title="场景5 消息通讯"></a>场景5 消息通讯</h3><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在线的消息通讯。比如实现点对点消息队列、聊天室等。</p><h4 id="点对点通讯"><a href="#点对点通讯" class="headerlink" title="点对点通讯"></a>点对点通讯</h4><p>在点对点通讯架构设计中，客户端A和客户端B共用一个消息队列，即可实现消息通讯功能。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6i04mhi8j30sc0683yx.jpg" alt="点对点通讯" style="zoom:50%;"><h4 id="聊天室通讯"><a href="#聊天室通讯" class="headerlink" title="聊天室通讯"></a>聊天室通讯</h4><p>客户端A、客户端B、客户端C直至客户端N订阅同一消息队列，进行消息的发布与接收。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6i9pqssuj30rg0awmy1.jpg" alt="聊天室通讯" style="zoom:50%;"><h2 id="四、使用消息队列会存在什么问题？"><a href="#四、使用消息队列会存在什么问题？" class="headerlink" title="四、使用消息队列会存在什么问题？"></a>四、使用消息队列会存在什么问题？</h2><p>通过上诉介绍，我们知道，在特定场景下，使用消息队列会带来很多好处，但是有优点必然也会存在缺点，接下来就介绍一下使用消息队列以后会存在的一些问题。</p><h4 id="系统可用性降低"><a href="#系统可用性降低" class="headerlink" title="系统可用性降低"></a>系统可用性降低</h4><p>当我们在系统中加入MQ以后，导致系统引入的外部依赖增加，系统可用性降低，越容易出现问题，如果我们使用单机的消息队列，如果MQ挂掉以后，那我们的整个系统就崩掉了，不能用了，因此我们就需要考虑MQ的高可用问题。</p><h4 id="系统复杂度提高"><a href="#系统复杂度提高" class="headerlink" title="系统复杂度提高"></a>系统复杂度提高</h4><p>当我们在系统中加入MQ以后，导致系统需要考虑的问题增多，比如由于系统A与MQ协调问题，系统A可能会把同一条消息发送给系统B两次，这就需要考虑消息被重复消费问题；或者系统A像MQ中发送了一条消息，而MQ把消息丢失了，其他系统去MQ中消费消息时找不到，这就需要考虑消息丢失问题；或者系统A向MQ中连续发送了3条消息，它们是有顺序的，而到了MQ以后消息顺序乱了，导致其他系统拿到的数据顺序也是乱的，这就需要考虑消息队列的顺序性问题；或者系统A在MQ中不断发送消息，而其他系统挂掉了，导致大量的消息在MQ中积压，这也是需要我们考虑的问题。因此MQ会导致系统的复杂性提高。</p><h4 id="系统一致性问题"><a href="#系统一致性问题" class="headerlink" title="系统一致性问题"></a>系统一致性问题</h4><p>假如用户发送请求给系统A，系统A处理请求并把请求写入MQ，系统B、C需要到MQ中消费，等所有的系统都执行完成后才能返回，然而，在此过程中会出现系统A、B执行成功返回，而系统C执行失败，这就会导致数据不一致，这就需要我们考虑一致性问题。</p><h2 id="五、如何解决消息队列存在的问题？"><a href="#五、如何解决消息队列存在的问题？" class="headerlink" title="五、如何解决消息队列存在的问题？"></a>五、如何解决消息队列存在的问题？</h2><p>通过上诉分析，我们可以发现，使用消息队列以后也会存在很多问题，接下来就出现的问题给出解决方案。</p><h3 id="如何保证消息队列的高可用？"><a href="#如何保证消息队列的高可用？" class="headerlink" title="如何保证消息队列的高可用？"></a>如何保证消息队列的高可用？</h3><h4 id="1、RabbitMQ-的高可用性"><a href="#1、RabbitMQ-的高可用性" class="headerlink" title="1、RabbitMQ 的高可用性"></a>1、RabbitMQ 的高可用性</h4><p>RabbitMQ 是比较有代表性的，因为是<strong>基于主从</strong>（非分布式）做高可用性的。RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><h5 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h5><p>本地启动使用单机模式，不适合实际生产环境中。</p><h5 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h5><p>在多台机器上启动多个 RabbitMQ 实例，每个机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。消费者消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge76fj44arj30wq0iatav.jpg" alt="普通集群模式" style="zoom:50%;"><p>这种集群模式没做到所谓的分布式，就是个普通集群。没有什么所谓的高可用性，主要是<strong>提高吞吐量</strong>的，让集群中多个节点来服务某个 queue 的读写操作。</p><p>这种方式有两种情况：一是消费者每次随机连接一个实例然后拉取数据，增加数据拉取的开销，MQ集群内部会产生大量的数据传输；二是固定连接那个 queue 所在实例消费数据，导致单实例性能瓶颈，如果 queue 所在节点宕机了，会导致接下来其他实例就无法从那个实例拉取，数据丢失，如果你<strong>开启了消息持久化</strong>，让 RabbitMQ 落地存储消息的话，<strong>消息不一定会丢</strong>，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。</p><h5 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h5><p>在镜像集群模式下，创建的 queue，无论元数据还是 queue 里的实际消息数据都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据。然后每次写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge76endurzj30x40j0ac2.jpg" alt="镜像集群模式" style="zoom:50%;"><p>通过这样的集群方式，当任何一个机器宕机了，其它机器（节点）还包含了这个 queue 的完整数据，别的消费者都可以到其它节点上去消费数据。</p><p><strong>缺点</strong>：第一，性能开销太大，消息需要同步到所有机器上，导致网络带宽压力和消耗很重。第二，不是分布式的，就<strong>没有扩展性可言</strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>你的 queue。如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p><h4 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h4><p><strong>基本概念</strong>：Kafka由多个 broker 组成，每个 broker 是一个节点；创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。</p><p>这就是<strong>天然的分布式消息队列</strong>，就是说一个 topic 的数据，是<strong>分散放在多个机器上的，每个机器就放一部分数据</strong>。</p><p>实际上 RabbmitMQ 之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Availability, 高可用性) 的机制而已，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。</p><p><strong>Kafka 0.8 以前，</strong>是没有 HA 机制的，就是任何一个 broker 宕机了，那个 broker 上的 partition 就废了，没法写也没法读，没有什么高可用性可言。比如说，我们假设创建了一个 topic，指定其 partition 数量是 3 个，分别在三台机器上。但是，如果第二台机器宕机了，会导致这个 topic 的 1/3 的数据就丢了，因此这个是做不到高可用的。</p><p><strong>Kafka 0.8 以后，</strong>提供了 HA 机制，就是 replica（复制品） 副本机制。每个 partition 的数据都会同步到其它机器上，形成自己的多个 replica 副本。所有 replica 会选举一个 leader 出来，那么生产和消费都跟这个 leader 打交道，然后其他 replica 就是 follower。写的时候，leader 会负责把数据同步到所有 follower 上去，读的时候就直接读 leader 上的数据即可。为什么只能读写 leader呢，<strong>要是你可以随意读写每个 follower，那么就要关心数据一致性的问题</strong>，系统复杂度太高，很容易出问题。Kafka 会均匀地将一个 partition 的所有 replica 分布在不同的机器上，这样才可以提高容错性。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge77uldrbzj31140r076o.jpg" alt="kafka集群高可用" style="zoom:50%;"><p>这就是所谓的<strong>高可用性</strong>，因为如果某个 broker 宕机了，那个 broker上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面有某个 partition 的 leader，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，然后消费者继续读写那个新的 leader 即可。</p><p><strong>写数据</strong>的时候，生产者就写入 leader，然后 leader 将数据落地写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据了，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功的消息给生产者。（当然，这只是其中一种模式，还可以适当调整这个行为）</p><p><strong>消费</strong>的时候，只会从 leader 去读，但是只有当一个消息已经被所有 follower 都同步成功返回 ack 的时候，这个消息才会被消费者读到。</p><h3 id="如何保证消息消费的幂等性（处理重复数据）？"><a href="#如何保证消息消费的幂等性（处理重复数据）？" class="headerlink" title="如何保证消息消费的幂等性（处理重复数据）？"></a>如何保证消息消费的幂等性（处理重复数据）？</h3><p>在开发生产环境中，消息队列都有可能会出现消费重复消费的问题，这问题通常不是MQ自己保证的，是开发保证的。现在主要说明一下kafka是怎么重复消费的并且怎么保证消息的幂等性。</p><p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后 consumer 消费了数据之后，<strong>每隔一段时间</strong>（定时定期），会把自己消费过的消息的 offset 提交一下，表示“我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。但是凡事总有意外，在实际生产环境中，如果碰到着急事情需要重启系统，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset。重启之后，少数消息会再次消费一次。这就会出现重复消费问题。</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>假如数据 1、2、3 依次进入 kafka，kafka 会给这三条数据每条分配一个 offset，代表这条数据的序号，我们就假设分配的 offset 依次是 152、153、154。消费者从 kafka 去消费的时候，也是按照这个顺序去消费。假如当消费者消费了 <code>offset=153</code> 的这条数据，刚准备去提交 offset 到 zookeeper，此时消费者进程被重启了。那么此时消费过的数据 1、2 的 offset 并没有提交，kafka 也就不知道你已经消费了 <code>offset=153</code> 这条数据。那么重启之后，消费者会找 kafka 说，嘿，哥儿们，你给我接着把上次我消费到的那个地方后面的数据继续给我传递过来。由于之前的 offset 没有提交成功，那么数据 1、2 会再次传过来，如果此时消费者没有去重的话，那么就会导致重复消费。如果消费者的任务是拿一条数据就往数据库里写一条，会导致你可能就把数据 1、2 在数据库里插入了 2 次，那么数据就错啦。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge862z801kj30n40lcwgv.jpg" alt="消息重复" style="zoom:50%;"><h4 id="那怎么保证幂等性呢？"><a href="#那怎么保证幂等性呢？" class="headerlink" title="那怎么保证幂等性呢？"></a>那怎么保证幂等性呢？</h4><p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p><p>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，<strong>不能出错</strong>。</p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge86caxq93j30cm0h8wff.jpg" alt="幂等性" style="zoom:50%;"><p>保证消息队列消费的幂等性还是得结合业务来思考，这里给几个思路：</p><ul><li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下。</li><li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li><li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如去 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li><li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li></ul><h3 id="如何保证消息的可靠性传输（处理消息丢失）？"><a href="#如何保证消息的可靠性传输（处理消息丢失）？" class="headerlink" title="如何保证消息的可靠性传输（处理消息丢失）？"></a>如何保证消息的可靠性传输（处理消息丢失）？</h3><p>数据的丢失问题，可能出现在生产者、MQ、消费者中，接下来从从 RabbitMQ 和 Kafka 分别来分析一下。</p><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h5 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h5><p><strong>场景</strong>：生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题等情况都有可能发生。</p><p><strong>解决方案</strong>1：此时可以选择用 RabbitMQ 提供的事务功能，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ 事务<code>channel.txSelect</code>，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务<code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，那么可以提交事务<code>channel.txCommit</code>。但是问题是，RabbitMQ 事务机制（同步）一搞，基本上<strong>吞吐量会下来，因为太耗性能</strong>。</p><p><strong>解决方案2</strong>：所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p><strong>区别</strong>：事务机制和 <code>confirm</code> 机制最大的不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>在那儿，但是 <code>confirm</code> 机制是<strong>异步</strong>的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。所以一般在生产者这块<strong>避免数据丢失</strong>，都是用 <code>confirm</code> 机制的。</p><h5 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h5><p>就是 RabbitMQ 自己弄丢了数据，你必须<strong>开启 RabbitMQ 的持久化</strong>，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，<strong>恢复之后会自动读取之前存储的数据</strong>，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，<strong>可能导致少量数据丢失</strong>，但是这个概率较小。</p><p>设置持久化有<strong>两个步骤</strong>：</p><ul><li>创建 queue 的时候将其设置为持久化，这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2，就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p><p>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code>，你也是可以自己重发的。</p><h5 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h5><p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，<strong>刚消费到，还没处理，结果进程挂了</strong>，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p><p>这个时候得用 RabbitMQ 提供的 <code>ack</code> 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 <code>ack</code>，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code> 一把。这样的话，如果你还没处理完，不就没有 <code>ack</code> 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p><h2 id="六、常用的消息队列及比较"><a href="#六、常用的消息队列及比较" class="headerlink" title="六、常用的消息队列及比较"></a>六、常用的消息队列及比较</h2><p>本部分主要介绍几种常用的消息队列，包括<code>ActiveMQ</code>、<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>Kafka</code>。</p><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p><a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ</a>是由Apache出品的一款开源消息中间件，旨在为应用程序提供高效、可扩展、稳定、安全的企业级消息通信。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。它非常快速，支持多种语言的客户端和协议，而且可以非常容易的嵌入到企业的应用环境中，并有许多高级功能。</p><h4 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h4><ol><li>服从 JMS 规范：JMS 规范提供了良好的标准和保证，包括：同步或异步的消息分发，一次和仅一次的消息分发，消息接收和订阅等等。遵从 JMS 规范的好处在于，不论使用什么 JMS 实现提供者，这些基础特性都是可用的；</li><li>连接性：ActiveMQ 提供了广泛的连接选项，支持的协议有：HTTP/S，IP 多播，SSL，STOMP，TCP，UDP，XMPP等等。对众多协议的支持让 ActiveMQ 拥有了很好的灵活性。</li><li>支持的协议种类多：OpenWire、STOMP、REST、XMPP、AMQP ；</li><li>持久化插件和安全插件：ActiveMQ 提供了多种持久化选择。而且，ActiveMQ 的安全性也可以完全依据用户需求进行自定义鉴权和授权；</li><li>支持的客户端语言种类多：除了 Java 之外，还有：C/C++，.NET，Perl，PHP，Python，Ruby；</li><li>代理集群：多个 ActiveMQ 代理可以组成一个集群来提供服务；</li><li>异常简单的管理：ActiveMQ 是以开发者思维被设计的。所以，它并不需要专门的管理员，因为它提供了简单又使用的管理特性。有很多中方法可以监控 ActiveMQ 不同层面的数据，包括使用在 JConsole 或者 ActiveMQ 的Web Console 中使用 JMX，通过处理 JMX 的告警消息，通过使用命令行脚本，甚至可以通过监控各种类型的日志。</li></ol><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>跨平台(JAVA编写与平台无关有，ActiveMQ几乎可以运行在任何的JVM上)</li><li>可以用JDBC：可以将数据持久化到数据库。虽然使用JDBC会降低ActiveMQ的性能，但是数据库一直都是开发人员最熟悉的存储介质。将消息存到数据库，看得见摸得着。而且公司有专门的DBA去对数据库进行调优，主从分离；</li><li>支持JMS ：支持JMS的统一接口;</li><li>支持自动重连；</li><li>有安全机制：支持基于shiro，jaas等多种安全配置机制，可以对Queue/Topic进行认证和授权。</li><li>监控完善：拥有完善的监控，包括Web Console，JMX，Shell命令行，Jolokia的REST API；</li><li>界面友善：提供的Web Console可以满足大部分情况，还有很多第三方的组件可以使用，如hawtio；</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>社区活跃度不及RabbitMQ高；</li><li>根据其他用户反馈，会出莫名其妙的问题，会丢失消息；</li><li>目前重心放到activemq6.0产品-apollo，对5.x的维护较少；</li><li>不适合用于上千个队列的应用场景；</li></ol><h3 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> 2007年发布，是一个在<a href="http://www.amqp.org/" target="_blank" rel="noopener">AMQP</a>(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><h4 id="主要特性-1"><a href="#主要特性-1" class="headerlink" title="主要特性"></a>主要特性</h4><ol><li>可靠性: 提供了多种技术可以让你在性能和可靠性之间进行权衡。这些技术包括持久性机制、投递确认、发布者证实和高可用性机制；</li><li>灵活的路由： 消息在到达队列前是通过交换机进行路由的。RabbitMQ为典型的路由逻辑提供了多种内置交换机类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做RabbitMQ的插件来使用；</li><li>消息集群：在相同局域网中的多个RabbitMQ服务器可以聚合在一起，作为一个独立的逻辑代理来使用；</li><li>队列高可用：队列可以在集群中的机器上进行镜像，以确保在硬件问题下还保证消息安全；</li><li>多种协议的支持：支持多种消息队列协议；</li><li>服务器端用Erlang语言编写，支持只要是你能想到的所有编程语言；</li><li>管理界面: RabbitMQ有一个易用的用户界面，使得用户可以监控和管理消息Broker的许多方面；</li><li>跟踪机制：如果消息异常，RabbitMQ提供消息跟踪机制，使用者可以找出发生了什么；</li><li>插件机制：提供了许多插件，来从多方面进行扩展，也可以编写自己的插件；</li></ol><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>由于erlang语言的特性，mq 性能较好，高并发；</li><li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</li><li>有消息确认机制和持久化机制，可靠性高；</li><li>高度可定制的路由；</li><li>管理界面较丰富，在互联网公司也有较大规模的应用；</li><li>社区活跃度高；</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>尽管结合erlang语言本身的并发优势，性能较好，但是不利于做二次开发和维护；</li><li>实现了代理架构，意味着消息在发送到客户端之前可以在中央节点上排队。此特性使得RabbitMQ易于使用和部署，但是使得其运行速度较慢，因为中央节点增加了延迟，消息封装后也比较大；</li><li>需要学习比较复杂的接口和协议，学习和维护成本较高；</li></ol><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p><a href="https://github.com/alibaba/RocketMQ" target="_blank" rel="noopener">RocketMQ</a>出自 阿里公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进，消息可靠性上比 Kafka 更好。RocketMQ在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等场景。</p><h4 id="主要特性-2"><a href="#主要特性-2" class="headerlink" title="主要特性"></a>主要特性</h4><ol><li>是一个队列模型的消息中间件，具有高性能、高可靠、高实时、分布式特点；</li><li>Producer、Consumer、队列都可以分布式；</li><li>Producer向一些队列轮流发送消息，队列集合称为Topic，Consumer如果做广播消费，则一个consumer实例消费这个Topic对应的所有队列，如果做集群消费，则多个Consumer实例平均消费这个topic对应的队列集合；</li><li>能够保证严格的消息顺序；</li><li>提供丰富的消息拉取模式；</li><li>高效的订阅者水平扩展能力；</li><li>实时的消息订阅机制；</li><li>亿级消息堆积能力；</li><li>较少的依赖；</li></ol><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li><p>单机支持 1 万以上持久化队列</p></li><li><p>RocketMQ 的所有消息都是持久化的，先写入系统 PAGECACHE，然后刷盘，可以保证内存与磁盘都有一份数据， 访问时，直接从内存读取。</p></li><li><p>模型简单，接口易用（JMS 的接口很多场合并不太实用）；</p></li><li><p>性能非常好，可以大量堆积消息在broker中；</p></li><li><p>支持多种消费，包括集群消费、广播消费等。</p></li><li><p>各个环节分布式扩展设计，主从HA；</p></li><li><p>开发度较活跃，版本更新很快。</p></li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>支持的客户端语言不多，目前是java及c++，其中c++不成熟；</p><p>RocketMQ社区关注度及成熟度也不及前两者；</p><p>没有web管理界面，提供了一个CLI(命令行界面)管理工具带来查询、管理和诊断各种问题；</p><p>没有在 mq 核心中去实现JMS等接口；</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a>是一个分布式消息发布订阅系统。它最初由LinkedIn公司基于独特的设计实现为一个分布式的提交日志系统( a distributed commit log)，之后成为Apache项目的一部分。Kafka系统快速、可扩展并且可持久化。它的分区特性，可复制和可容错都是其不错的特性。</p><h4 id="主要特性-3"><a href="#主要特性-3" class="headerlink" title="主要特性"></a>主要特性</h4><ol><li>快速持久化，可以在O(1)的系统开销下进行消息持久化；</li><li>高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率； </li><li>.完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现<a href="https://cloud.tencent.com/product/clb?from=10680" target="_blank" rel="noopener">负载均衡</a>；</li><li>支持同步和异步复制两种HA；</li><li>支持数据批量发送和拉取；</li><li>zero-copy：减少IO操作步骤；</li><li>数据迁移、扩容对用户透明；</li><li>无需停机即可扩展机器；</li><li>其他特性：严格的消息顺序、丰富的消息拉取模型、高效订阅者水平扩展、实时的消息订阅、亿级的消息堆积能力、定期删除机制；</li></ol><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li>客户端语言丰富，支持java、.net、php、ruby、python、go等多种语言；</li><li>性能卓越，单机写入TPS约在百万条/秒，消息大小10个字节；</li><li>提供完全分布式架构, 并有replica机制, 拥有较高的可用性和可靠性, 理论上支持消息无限堆积；</li><li>支持批量操作；</li><li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</li><li>有优秀的第三方Kafka Web管理界面Kafka-Manager；</li><li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li></ol><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol><li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li><li>使用短轮询方式，实时性取决于轮询间隔时间；</li><li>消费失败不支持重试；</li><li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li><li>社区更新较慢；</li></ol><h3 id="ActiveMQ、RabbitMQ、RocketMQ、Kafka比较"><a href="#ActiveMQ、RabbitMQ、RocketMQ、Kafka比较" class="headerlink" title="ActiveMQ、RabbitMQ、RocketMQ、Kafka比较"></a>ActiveMQ、RabbitMQ、RocketMQ、Kafka比较</h3><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>对于<strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择。</p><p>对于<strong>大型公司</strong>，基础架构研发实力较强，用 RocketMQ 是很好的选择。</p><p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p><blockquote><p>参考资料：</p><p>中华石杉–互联网Java进阶面试训练营：<a href="https://github.com/cyh756085049/Java-Interview-Advanced" target="_blank" rel="noopener">https://github.com/cyh756085049/Java-Interview-Advanced</a></p><p>分布式消息队列：<a href="https://github.com/cyh756085049/Java-Interview-Advanced" target="_blank" rel="noopener">https://github.com/cyh756085049/Java-Interview-Advanced</a></p><p>什么是消息队列？：<a href="https://juejin.im/post/5cb025fb5188251b0351ef48" target="_blank" rel="noopener">https://juejin.im/post/5cb025fb5188251b0351ef48</a></p><p>消息队列技术介绍：<a href="https://www.jianshu.com/p/689ce4205021" target="_blank" rel="noopener">https://www.jianshu.com/p/689ce4205021</a></p><p>消息队列及常见消息队列介绍：<a href="https://cloud.tencent.com/developer/article/1006035" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1006035</a></p><p>通俗易懂，正确理解并用好MQ消息队列：<a href="https://cloud.tencent.com/developer/article/1346912" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1346912</a></p><p>消息队列之 ActiveMQ：<a href="https://juejin.im/post/5ad46f34518825651d08265c" target="_blank" rel="noopener">https://juejin.im/post/5ad46f34518825651d08265c</a></p><p>消息队列两种模式：<a href="https://cloud.tencent.com/developer/article/1116301" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1116301</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用工具记录</title>
      <link href="/2020/04/24/shi-yong-gong-ju-ji-lu/"/>
      <url>/2020/04/24/shi-yong-gong-ju-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="项目版本管理工具Sourcetree的安装与使用"><a href="#项目版本管理工具Sourcetree的安装与使用" class="headerlink" title="项目版本管理工具Sourcetree的安装与使用"></a>项目版本管理工具Sourcetree的安装与使用</h3><blockquote><p>参考：<a href="https://juejin.im/post/5a54e1976fb9a01ca32527fd" target="_blank" rel="noopener">https://juejin.im/post/5a54e1976fb9a01ca32527fd</a></p></blockquote><h3 id="mac下面iterm2自动连接远程服务器"><a href="#mac下面iterm2自动连接远程服务器" class="headerlink" title="mac下面iterm2自动连接远程服务器"></a>mac下面iterm2自动连接远程服务器</h3><h4 id="先填写item2的配置文件"><a href="#先填写item2的配置文件" class="headerlink" title="先填写item2的配置文件"></a>先填写item2的配置文件</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge5vqhynpuj31li0u0kjl.jpg" alt=""></p><h4 id="在-ssh下添加并配置文件"><a href="#在-ssh下添加并配置文件" class="headerlink" title="在~/.ssh下添加并配置文件"></a>在<code>~/.ssh</code>下添加并配置文件</h4><p>新建配置文件:</p><pre class=" language-shell"><code class="language-shell">touch plant</code></pre><p>配置文件内容：</p><pre class=" language-shell"><code class="language-shell">#!/usr/bin/expect -fset host xxx.xxx.xxx.xxx(服务器ip地址)set user xxx(登录服务器的用户名)set password xxx(登录服务器的密码)#set timeout -1spawn ssh $user@$hostexpect "*assword:*"send "$password\r"interactexpect eof</code></pre><p>配置完成，保存退出。</p><h4 id="此时可以自动连接啦"><a href="#此时可以自动连接啦" class="headerlink" title="此时可以自动连接啦"></a>此时可以自动连接啦</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge5vwngc49j31qq0f8h3c.jpg" alt="image-20200425120901455"></p><h3 id="DataGrip通过ssh连接远程主机mysql"><a href="#DataGrip通过ssh连接远程主机mysql" class="headerlink" title="DataGrip通过ssh连接远程主机mysql"></a>DataGrip通过ssh连接远程主机mysql</h3><h4 id="首先建立SSH连接，切入到SSH-SSL页面，使用SSH连接远程主机"><a href="#首先建立SSH连接，切入到SSH-SSL页面，使用SSH连接远程主机" class="headerlink" title="首先建立SSH连接，切入到SSH/SSL页面，使用SSH连接远程主机"></a>首先建立SSH连接，切入到<code>SSH/SSL</code>页面，使用SSH连接远程主机</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge61w9n0zdj30zn0u0ah4.jpg" alt="image-20200425153612902"></p><h4 id="然后切回到General页面，输入数据库相应信息，该信息是基于远程主机的，所以Host是localhost而不是远程主机ip"><a href="#然后切回到General页面，输入数据库相应信息，该信息是基于远程主机的，所以Host是localhost而不是远程主机ip" class="headerlink" title="然后切回到General页面，输入数据库相应信息，该信息是基于远程主机的，所以Host是localhost而不是远程主机ip."></a>然后切回到<code>General</code>页面，输入数据库相应信息，该信息是基于远程主机的，所以<code>Host</code>是<code>localhost</code>而不是远程主机ip.</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge61zo9ldbj30zw0u0wkl.jpg" alt="image-20200425153932690"></p><h3 id="Datagrip导入导出为一个sql文件"><a href="#Datagrip导入导出为一个sql文件" class="headerlink" title="Datagrip导入导出为一个sql文件"></a>Datagrip导入导出为一个sql文件</h3><h4 id="首先选择要导出的数据库，右键点击，出现如下菜单，然后点击如下红框Dump-with-39-mysqldump-39-打开对话框。"><a href="#首先选择要导出的数据库，右键点击，出现如下菜单，然后点击如下红框Dump-with-39-mysqldump-39-打开对话框。" class="headerlink" title="首先选择要导出的数据库，右键点击，出现如下菜单，然后点击如下红框Dump with 'mysqldump'打开对话框。"></a>首先选择要导出的数据库，右键点击，出现如下菜单，然后点击如下红框<code>Dump with 'mysqldump'</code>打开对话框。</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge62uz5n4ij30ly0rcjxj.jpg" alt="image-20200425160937256"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge62xt0giij30yo0kwtcf.jpg" alt="image-20200425161220070"></p><p>把<code>mysql</code>文件导入到数据中。选择要导入的数据库点击右键，出现如下菜单，然后选择<code>Restore with 'mysql'</code>,进入对话框。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge62z8t60yj30l00reafk.jpg" alt="image-20200425161343305"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1ge6312r8h0j30yo0kwacg.jpg" alt="image-20200425161529702"></p><p>或者可以手动在控制台执行<code>sql</code>语句，创建。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣每日三题打卡</title>
      <link href="/2020/04/21/li-kou-mei-ri-san-ti-da-qia/"/>
      <url>/2020/04/21/li-kou-mei-ri-san-ti-da-qia/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1 两数相加"></a>1 两数相加</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre></blockquote><h3 id="解法1-初等数学"><a href="#解法1-初等数学" class="headerlink" title="解法1 初等数学"></a>解法1 初等数学</h3><p>新创建一个链表<code>head</code>，遍历两个非空链表，设置一个进位值<code>carry</code>，初始值为0，把链表值与进位值相加取余，即为新链表的值，同时更新进位值。</p><p>实现代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> l1<span class="token punctuation">,</span> q <span class="token operator">=</span> l2<span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">||</span> q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> q<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(max(m,n))</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">O(max(m,n))</td></tr></tbody></table><h2 id="146-LRU缓存机制"><a href="#146-LRU缓存机制" class="headerlink" title="146. LRU缓存机制"></a><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">146. LRU缓存机制</a></h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</p><pre><code>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );cache.put(1, 1);cache.put(2, 2);cache.get(1);       // 返回  1cache.put(3, 3);    // 该操作会使得关键字 2 作废cache.get(2);       // 返回 -1 (未找到)cache.put(4, 4);    // 该操作会使得关键字 1 作废cache.get(1);       // 返回 -1 (未找到)cache.get(3);       // 返回  3cache.get(4);       // 返回  4</code></pre></blockquote><h3 id="解法1-双向链表-哈希表"><a href="#解法1-双向链表-哈希表" class="headerlink" title="解法1 双向链表+哈希表"></a>解法1 双向链表+哈希表</h3><h4 id="一、-LRU-算法"><a href="#一、-LRU-算法" class="headerlink" title="一、 LRU 算法"></a>一、 LRU 算法</h4><p>是一种缓存淘汰策略。计算机的缓存容量有限，如果缓存满了就要删除一些内容，给新内容腾位置。LRU 缓存淘汰算法就是一种常用策略。LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是有用的，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。</p><p>就比如手机允许同时开启3个应用程序，当我想要开启第四个的时候，就必须关闭一个腾出位置，此时就优先关闭最久未使用的应用程序。</p><p>LRU 算法实际上是设计数据结构：首先要接收一个 capacity 参数作为缓存的最大容量，然后实现两个 API，一个是 put(key, val) 方法存入键值对，另一个是 get(key) 方法获取 key 对应的 val，如果 key 不存在则返回 -1。</p><p>要让 put 和 get 方法的时间复杂度为 O(1)<em>O</em>(1)，我们可以总结出 cache 这个数据结构必要的条件：查找快，插入快，删除快，有顺序之分。</p><p>那么，什么数据结构同时符合上述条件呢？哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表。</p><p>LRU 缓存算法的核心数据结构就是哈希链表，双向链表和哈希表的结合体。</p><p>实现代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Node<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> DoubleList cache<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Node<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 关键字不存在，返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取关键字的值</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把该数据提前</span>        <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先创建x节点</span>        Node x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键点已经存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 删除旧节点</span>            cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把新节点插入头部</span>            cache<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新map中对应的数据</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 缓存容量达到上限</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cap <span class="token operator">==</span> cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除链表中最后一个节点</span>                Node last <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// map删除数据</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将新节点加入链表头部</span>            cache<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新map中的值</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义双向链表节点（存放键值对）</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node next<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链表节点构造器</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 双向链表</span><span class="token keyword">class</span> <span class="token class-name">DoubleList</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义头节点和尾节点</span>    <span class="token keyword">private</span> Node head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链表长度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无参构造器，初始化创建头节点、尾节点及链表长度</span>    <span class="token keyword">public</span> <span class="token function">DoubleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除链表中的节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在链表头部插入节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> x<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除链表中最后一个节点，并返回该节点</span>    <span class="token keyword">public</span> Node <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail<span class="token punctuation">.</span>prev <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node last <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 链表长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(1）</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">O(1)</td></tr></tbody></table><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3 无重复字符的最长子串"></a>3 无重复字符的最长子串</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>输入: "abcabcbb"输出: 3 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。输入: "pwwkew"输出: 3解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</code></pre></blockquote><h3 id="解法1-滑动窗口"><a href="#解法1-滑动窗口" class="headerlink" title="解法1 滑动窗口"></a>解法1 滑动窗口</h3><p>定义一个 map 数据结构存储 (k, v)，其中 key 值为字符，value 值为字符位置 +1，加 1 表示从字符位置后一个才开始不重复。我们定义不重复子串的开始位置为 start，结束位置为 end。随着 end 不断遍历向后，会遇到与 [start, end] 区间内字符相同的情况，此时将字符作为 key 值，获取其 value 值，并更新 start，此时 [start, end] 区间内不存在重复字符无论是否更新 start，都会更新其 map 数据结构和结果 ans。<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-jie-suan-fa-3-wu-zhong-fu-zi-fu-de-zui-chang-z/" target="_blank" rel="noopener">题解</a></p><p>实现代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> end <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> key <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">O(min(m,n))</td></tr></tbody></table><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>输入: "()[]{}"输出: true输入: "([)]"输出: false</code></pre></blockquote><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>string<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Date: 2020-04-30 12:40 * @Description: 有效的括号 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IsValid</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不用map     * 复杂度：时间复杂度 o(n) 空间复杂度 o(n)     * @param s     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">!=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 辅助栈（先通过HashMap存储括号）     * 复杂度：时间复杂度 o(n) 空间复杂度 o(n)     * @param s     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidMap</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">,</span> <span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> topElement <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'#'</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>topElement <span class="token operator">!=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"({})"</span><span class="token punctuation">;</span>        IsValid demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">isValidMap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26 删除排序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26 删除排序数组中的重复项</a></h2><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><pre><code>给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</code></pre></blockquote><h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> q <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                p<span class="token operator">++</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">O(1)</td></tr></tbody></table><h1 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h1><h2 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136 只出现一次的数字</a></h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><pre><code>输入: [2,2,1]输出: 1</code></pre></blockquote><h3 id="解法1-异或"><a href="#解法1-异或" class="headerlink" title="解法1 异或"></a>解法1 异或</h3><p>异或解法：异或运算满足交换律，<code>a^b^a=a^a^b=b</code>,因此ans相当于<code>nums[0]^nums[1]^nums[2]^nums[3]^nums[4].....</code>然后再根据交换律把相等的合并到一块儿进行异或（结果为0），然后再与只出现过一次的元素进行异或，这样最后的结果就是，只出现过一次的元素（0^任意值=任意值）</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans <span class="token operator">=</span> ans <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">O(1)</td></tr></tbody></table><h3 id="解法2-列表"><a href="#解法2-列表" class="headerlink" title="解法2 列表"></a>解法2 列表</h3><p>遍历数组，如果数组中的元素不存在在列表中，则把该元素添加到列表中，如果列表中存在该元素，则删除该列表元素。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n^2)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(n)$</td></tr></tbody></table><h3 id="解法3-哈希表"><a href="#解法3-哈希表" class="headerlink" title="解法3 哈希表"></a>解法3 哈希表</h3><p>遍历数组，如果数组中的元素不存在在哈希表中，则把该元素添加到哈希表中，如果哈希表中存在该元素，则删除该哈希表元素。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(n)$</td></tr></tbody></table><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote><p>90% 的字符串问题都可以⽤动态规划解决，并且90%是采⽤⼆维数组。</p></blockquote><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><pre><code>输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1.  1 阶 + 1 阶 + 1 阶2.  1 阶 + 2 阶3.  2 阶 + 1 阶</code></pre></blockquote><h3 id="解法1-动态规划"><a href="#解法1-动态规划" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><p>这个问题可以被分解为一些包含最优子结构的子问题，即它的最优解可以从其子问题的最优解来有效地构建，我们可以使用动态规划来解决这一问题。</p><p>第 i 阶可以由以下两种方法得到：</p><p>在第 (i-1)阶后向上爬一阶。</p><p>在第 (i-2) 阶后向上爬 2 阶。</p><p>所以到达第 i 阶的方法总数就是到第 (i-1) 阶和第 (i-2) 阶的方法数之和。</p><p>令 dp[i] 表示能到达第 i 阶的方法总数：<code>dp[i]=dp[i-1]+dp[i-2]</code></p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-7"><a href="#复杂度分析-7" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(n)$</td></tr></tbody></table><h3 id="解法2-斐波那契数（优化）"><a href="#解法2-斐波那契数（优化）" class="headerlink" title="解法2 斐波那契数（优化）"></a>解法2 斐波那契数（优化）</h3><p>在上述方法中，我们使用 dp数组，其中 dp[i]=dp[i-1]+dp[i-2]。可以很容易通过分析得出 dp[i]其实就是第 i 个斐波那契数。</p><p><code>Fib(n)=Fib(n-1)+Fib(n-2)</code></p><p>现在我们必须找出以 1 和 2 作为第一项和第二项的斐波那契数列中的第 n 个数，也就是说 Fib(1)=1且 Fib(2)=2。</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>            first <span class="token operator">=</span> second<span class="token punctuation">;</span>            second <span class="token operator">=</span> third<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-8"><a href="#复杂度分析-8" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(1)$</td></tr></tbody></table><h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。问总共有多少条不同的路径？</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gegovkpr0uj30b4053gll.jpg" alt=""></p><pre><code>输入: m = 3, n = 2输出: 3解释:从左上角开始，总共有 3 条路径可以到达右下角。1. 向右 -&gt; 向右 -&gt; 向下2. 向右 -&gt; 向下 -&gt; 向右3. 向下 -&gt; 向右 -&gt; 向右</code></pre></blockquote><h3 id="解法1-动态规划-1"><a href="#解法1-动态规划-1" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><p>步骤⼀、定义数组元素的含义</p><p>当机器⼈从左上⻆⾛到<strong>(i, j)</strong> 这个位置时，⼀共有 <strong>dp[i] [j]</strong> 种路径。这个⽹格相当于⼀个⼆维数组，数组是从下标为 0 开始算起的，所以 右下⻆的位置是 (m-1, n - 1)，所以<code>dp[m-1] [n-1]</code>就是我们要找的答案。</p><p>步骤⼆：找出关系数组元素间的关系式</p><p>由于机器⼈可以向下⾛或者向右⾛，所以有两种⽅式到达(i,j)这个位置，⼀种是从 (i-1, j) 这个位置⾛⼀步到达，⼀种是从(i, j - 1) 这个位置⾛⼀步到达，因为是计算所有可能的步骤，所以是把所有可能⾛的路径都加起来，所以关系式是<code>dp[i] [j] = dp[i-1] [j] + dp[i] [j-1]</code>。</p><p>步骤三、找出初始值</p><p>显然，当 dp[i] [j] 中，如果 i 或者 j 有⼀个为 0，就不能用关系式了，因为这个时候把i - 1 或者 j - 1，就变成负数了，数组就会出问题了，所以我们的初始值是计算出所有的 dp[0] [0….n-1]和所有的 dp[0….m-1] [0]。这个还是⾮常容易计算的，相当于计算机图中的最上⾯⼀⾏和左边⼀列。因此初始值如下：</p><p>dp[0] [0….n-1] = 1; // 相当于最上⾯⼀⾏，机器⼈只能⼀直往左⾛</p><p>dp[0…m-1] [0] = 1; // 相当于最左⾯⼀列，机器⼈只能⼀直往下⾛</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 动态规划 时间复杂度o(m*n) 空间复杂度o(min(m,n))</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 最优子结构</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-9"><a href="#复杂度分析-9" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$o(m*n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$o(min(m,n))$</td></tr></tbody></table><h2 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">64. 最小路径和</a></h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个包含非负整数的 <em>m</em> x <em>n</em> 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p><pre><code>输入:[  [1,3,1],  [1,5,1],  [4,2,1]]输出: 7解释: 因为路径 1→3→1→1→1 的总和最小。</code></pre></blockquote><h3 id="解法1-动态规划-2"><a href="#解法1-动态规划-2" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><p>步骤⼀、定义数组元素的含义</p><p>当从左上⻆⾛到<strong>(i, j)</strong> 这个位置时，⼀共有 <strong>dp[i] [j]</strong> 种路径。这个⽹格相当于⼀个⼆维数组，数组是从下标为 0 开始算起的，所以 右下⻆的位置是 (m-1, n - 1)，所以<code>dp[m-1] [n-1]</code>就是我们要找的答案。</p><p>步骤⼆：找出关系数组元素间的关系式</p><p>由于可以向下⾛或者向右⾛，所以有两种⽅式到达(i,j)这个位置，⼀种是从 (i-1, j) 这个位置⾛⼀步到达，⼀种是从(i, j - 1) 这个位置⾛⼀步到达，因为是计算所有可能的最小路径和，所以要选择一种到达方式值最小的，所以关系式是<code>dp[i] [j] = min(dp[i-1][j]，dp[i][j-1]) + grid[i][j]</code>。</p><p>步骤三、找出初始值</p><p>显然，当 dp[i] [j] 中，如果 i 或者 j 有⼀个为 0，就不能用关系式了，因为这个时候把i - 1 或者 j - 1，就变成负数了，数组就会出问题了，所以我们的初始值是计算出所有的 dp[0] [0….n-1]和所有的 dp[0….m-1] [0]。因此初始值如下：</p><p>dp[0] [j] = grid[0] [j] + dp[0] [j-1]; // 相当于最上⾯⼀⾏</p><p>dp[i] [0] = grid[i] [0] + dp[i] [0]; // 相当于最左⾯⼀列</p><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 动态规划</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 临界值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关系式</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-10"><a href="#复杂度分析-10" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$o(m*n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$o(min(m,n))$</td></tr></tbody></table><h2 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">72. 编辑距离</a></h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：插入一个字符  删除一个字符  替换一个字符</p><pre><code>输入：word1 = "horse", word2 = "ros"输出：3解释：horse -&gt; rorse (将 'h' 替换为 'r')rorse -&gt; rose (删除 'r')rose -&gt; ros (删除 'e')</code></pre></blockquote><h3 id="解法1-动态规划-3"><a href="#解法1-动态规划-3" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><p>步骤⼀、定义数组元素的含义</p><p>由于我们的⽬的求将 word1 转换成 word2 所使⽤的最少操作数 。那我们就定义 dp[i] [j]的含义为：当字符串 <strong>word1</strong> 的⻓度为 <strong>i</strong>，字符串 <strong>word2</strong> 的⻓度为 <strong>j</strong> 时，将 <strong>word1</strong> 转化为 <strong>word2</strong> 所使⽤的最少操作次数为 <strong>dp[i] [j]</strong></p><p>步骤⼆：找出关系数组元素间的关系式</p><p>由于我们是要让操作的次数最⼩，所以我们要寻找最佳操作。那么有如下关系式：</p><p>⼀、如果我们 word1[i] 与 word2 [j] 相等，这个时候不需要进⾏任何操作，显然有 dp[i] [j] = dp[i-1] [j-1]。</p><p>⼆、如果我们 word1[i] 与 word2 [j] 不相等，这个时候我们就必须进⾏调整，⽽调整的操作有 3 种，我</p><p>们要选择⼀种。三种操作对应的关系试如下（注意字符串与字符的区别）：</p><p>（1）、如果把字符 word1[i] 替换成与 word2[j] 相等，则有 dp[i] [j] = dp[i-1] [j-1] + 1;</p><p>（2）、如果在字符串 word1末尾插⼊⼀个与 word2[j] 相等的字符，则有 dp[i] [j] = dp[i] [j-1] + 1;</p><p>（3）、如果把字符 word1[i] 删除，则有 dp[i] [j] = dp[i-1] [j] + 1;</p><p>那么我们应该选择⼀种操作，使得 dp[i] [j] 的值最⼩，显然有</p><p><strong>dp[i] [j] = min(dp[i-1] [j-1]</strong>，<strong>dp[i] [j-1]</strong>，<strong>dp[[i-1] [j]]) + 1;</strong></p><p>步骤三、找出初始值</p><p>显然，当 dp[i] [j] 中，如果 i 或者 j 有⼀个为 0，就不能用关系式了，因为这个时候把i - 1 或者 j - 1，就变成负数了，数组就会出问题了，所以我们的初始值是计算出所有的 dp[0] [0….n-1]和所有的 dp[0….m-1] [0]。当有⼀个字符串的⻓度为 0 时，转化为另外⼀个字符串，那就只能⼀直进⾏插⼊或者删除操作了。</p><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span>  dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-11"><a href="#复杂度分析-11" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$o(m*n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$o(min(m,n))$</td></tr></tbody></table><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><pre><code>输入: [1,2,3,1]输出: 4解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。     偷窃到的最高金额 = 1 + 3 = 4 </code></pre></blockquote><h3 id="解法1-动态规划-4"><a href="#解法1-动态规划-4" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><p>1、如果只有两个房间，谁大选谁</p><p>2、如果有三个房间，要考虑两种情况：偷第三个房间的话，则偷盗的金额为第一个房间的金额加第三个房间的金额；如果不偷第三个房间的话，则偷盗的金额为前两个房间中金额最大的</p><p>初始状态：</p><pre class=" language-java"><code class="language-java">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>状态转移方程：</p><pre class=" language-java"><code class="language-java">i<span class="token operator">></span><span class="token number">2</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 动态规划</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-12"><a href="#复杂度分析-12" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$o(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$o(1)$</td></tr></tbody></table><h2 id="53-最大子序和✨"><a href="#53-最大子序和✨" class="headerlink" title="53. 最大子序和✨"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和✨</a></h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><pre><code>输入: [-2,1,-3,4,-1,2,1,-5,4],输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</code></pre></blockquote><h3 id="解法1-动态规划-5"><a href="#解法1-动态规划-5" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><p>1、如果只考虑第一个元素，则最大子序和为本身<code>dp[0]=nums[0]</code></p><p>2、如果考虑前两个元素，则最大子序和为<code>dp[1]=max(nums[0],nums[1],nums[0]+nums[1])</code></p><p>3、如果考虑前三个元素，则最大子序和为<code>max(dp[1]+nums[2],nums[2])</code></p><p>初始状态：</p><pre class=" language-java"><code class="language-java">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>状态转移方程：</p><pre class=" language-java"><code class="language-java">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>       dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> max <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>               max <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> max<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-13"><a href="#复杂度分析-13" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$o(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$o(1)$</td></tr></tbody></table><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. 对称二叉树</a></h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p><pre><code> 1   / \  2   2 / \ / \3  4 4  3</code></pre></blockquote><h3 id="解法1-递归"><a href="#解法1-递归" class="headerlink" title="解法1 递归"></a>解法1 递归</h3><p>递归结束条件：都为空指针则返回 true；只有一个为空则返回 false<br>递归过程：判断两个指针当前节点值是否相等；判断 A 的右子树与 B 的左子树是否对称；判断 A 的左子树与 B 的右子树是否对称</p><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>val <span class="token operator">==</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-14"><a href="#复杂度分析-14" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(n)$</td></tr></tbody></table><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. 买卖股票的最佳时机</a></h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票</p><pre><code>输入: [7,1,5,3,6,4]输出: 5解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</code></pre></blockquote><h3 id="解法1-贪心算法"><a href="#解法1-贪心算法" class="headerlink" title="解法1 贪心算法"></a>解法1 贪心算法</h3><p>从左向右，维护一个最小值low，与每一天的股票价格做差，差最大的为答案。</p><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 贪心法 时间复杂度o(n) 空间复杂度o(1)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> low<span class="token punctuation">)</span>                low <span class="token operator">=</span> p<span class="token punctuation">;</span>            maxProfit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxProfit<span class="token punctuation">,</span> p <span class="token operator">-</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-15"><a href="#复杂度分析-15" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(1)$</td></tr></tbody></table><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">169. 多数元素</a></h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><pre><code>输入: [2,2,1,1,1,2,2]输出: 2</code></pre></blockquote><h3 id="解法1-排序✨"><a href="#解法1-排序✨" class="headerlink" title="解法1 排序✨"></a>解法1 排序✨</h3><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-16"><a href="#复杂度分析-16" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(nlogn)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(logn)$</td></tr></tbody></table><h3 id="解法2-哈希表"><a href="#解法2-哈希表" class="headerlink" title="解法2 哈希表"></a>解法2 哈希表</h3><p>在哈希映射的键值对中，键表示元素，值表示出现的次数，遍历数组中的元素，如果map中存在，就让这个元素对应的值加1。最后再返回map中的最大值。</p><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> maxMap <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxMap <span class="token operator">==</span> null <span class="token operator">||</span> value<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxMap<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxMap <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxMap<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-17"><a href="#复杂度分析-17" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(n)$</td></tr></tbody></table><h3 id="解法3-计数法"><a href="#解法3-计数法" class="headerlink" title="解法3 计数法"></a>解法3 计数法</h3><p>扫描一次数组，扫描的过程中记录 “当前数”curNum 和 “当前数的个数”count 。如果遇到不相同的数，则count减1，count减到0时，curNum换成扫描到的新数。扫描完一遍数组，最后的curNum就是结果。</p><h4 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> curNum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                curNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNum <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> curNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-18"><a href="#复杂度分析-18" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(1)$</td></tr></tbody></table><h2 id="4-寻找两个有序数组的中位数"><a href="#4-寻找两个有序数组的中位数" class="headerlink" title="4. 寻找两个有序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">4. 寻找两个有序数组的中位数</a></h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。你可以假设 nums1 和 nums2 不会同时为空。</p><pre><code>nums1 = [1, 2]nums2 = [3, 4]则中位数是 (2 + 3)/2 = 2.5</code></pre></blockquote><h3 id="解法1-合并数组"><a href="#解法1-合并数组" class="headerlink" title="解法1 合并数组"></a>解法1 合并数组</h3><p>先将两个数组排序合并，然后根据奇数，还是偶数，返回中位数。</p><h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums2<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums1<span class="token punctuation">[</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>count <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>count <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>             <span class="token keyword">return</span> nums<span class="token punctuation">[</span>count <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-19"><a href="#复杂度分析-19" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(m+n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(m+n)$</td></tr></tbody></table><h3 id="解法2-求第k小数（没明白，没写）"><a href="#解法2-求第k小数（没明白，没写）" class="headerlink" title="解法2 求第k小数（没明白，没写）"></a>解法2 求第k小数（没明白，没写）</h3><p>在哈希映射的键值对中，键表示元素，值表示出现的次数，遍历数组中的元素，如果map中存在，就让这个元素对应的值加1。最后再返回map中的最大值。</p><h4 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> maxMap <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxMap <span class="token operator">==</span> null <span class="token operator">||</span> value<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxMap<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxMap <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxMap<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-20"><a href="#复杂度分析-20" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(n)$</td></tr></tbody></table><h3 id="解法3-计数法-1"><a href="#解法3-计数法-1" class="headerlink" title="解法3 计数法"></a>解法3 计数法</h3><p>扫描一次数组，扫描的过程中记录 “当前数”curNum 和 “当前数的个数”count 。如果遇到不相同的数，则count减1，count减到0时，curNum换成扫描到的新数。扫描完一遍数组，最后的curNum就是结果。</p><h4 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> curNum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                curNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNum <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> curNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-21"><a href="#复杂度分析-21" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">$O(n)$</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">$O(1)$</td></tr></tbody></table><h4 id=""><a href="#" class="headerlink" title=""></a></h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引数据结构</title>
      <link href="/2020/04/18/suo-yin-shu-ju-jie-gou/"/>
      <url>/2020/04/18/suo-yin-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库-MySQL"><a href="#数据库-MySQL" class="headerlink" title="数据库-MySQL"></a>数据库-MySQL</h1><h2 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h2><h3 id="1、二叉搜索树（BST）"><a href="#1、二叉搜索树（BST）" class="headerlink" title="1、二叉搜索树（BST）"></a>1、二叉搜索树（BST）</h3><p>二叉搜索树（BST）又称二叉查找树或二叉排序树。二叉树的提出其实主要就是为了提高查找效率。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdwjfwgws4j30hs09ut9t.jpg" alt="二叉查找树"></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>1.<strong>左</strong>子树上所有结点的值均<strong>小于或等于</strong>它的根结点的值。</p><p>2.<strong>右</strong>子树上所有结点的值均<strong>大于或等于</strong>它的根结点的值。</p><p>3.左、右子树也分别为二叉排序树。</p><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><p>二分查找，查找所需最大次数等同于二叉查找树的高度。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>多次插入新节点会导致二叉树不平衡（如下图所示）。因此就引入了<strong>红黑树</strong>。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdwjfjfbe5j30fa0hd0sp.jpg" alt=""></p><h3 id="2、红黑树（Red-Black-Tree）"><a href="#2、红黑树（Red-Black-Tree）" class="headerlink" title="2、红黑树（Red Black Tree）"></a>2、红黑树（Red Black Tree）</h3><p>是一种自平衡的<strong>二叉查找树</strong>。包含二叉树的基本特性，还有如下特征。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdwjgj3ij2j30hs0a6dg2.jpg" alt="红黑树"></p><h4 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h4><p>1.节点是红色或黑色。</p><p>2.根节点是黑色。</p><p>3.每个叶子节点都是黑色的空节点（NIL节点）。</p><p>4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</p><p>5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</p><h4 id="操作调整"><a href="#操作调整" class="headerlink" title="操作调整"></a>操作调整</h4><ul><li><h5 id="变色："><a href="#变色：" class="headerlink" title="变色："></a>变色：</h5></li></ul><p>为了重新符合红黑树的规则，尝试把红色节点变为黑色，或者把黑色节点变为红色。</p><ul><li><h5 id="旋转："><a href="#旋转：" class="headerlink" title="旋转："></a>旋转：</h5></li></ul><p><strong>左旋转：</strong>逆时针旋转红黑树的两个节点，使得父节点被自己的右孩子取代，而自己成为自己的左孩子。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdwqwcz9n4j30hs08ygmp.jpg" alt="左旋"></p><p><strong>右旋转：</strong>顺时针旋转红黑树的两个节点，使得父节点被自己的左孩子取代，而自己成为自己的右孩子。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdwqxtki7ej30hs07vt9l.jpg" alt="右旋"></p><h4 id="红黑树的应用"><a href="#红黑树的应用" class="headerlink" title="红黑树的应用"></a>红黑树的应用</h4><p>JDK的集合类TreeMap和TreeSet底层就是红黑树实现的，Java8中，HashMap在解决哈希冲突时，当链表长度大于阀值（默认为8）的时候，将链表转化为红黑树，减少搜索时间，ConcurrentHashMap也用到了红黑树。</p><blockquote><p>参考及引用：<a href="https://mp.weixin.qq.com/s/jz1ajDUygZ7sXLQFHyfjWA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/jz1ajDUygZ7sXLQFHyfjWA</a></p></blockquote><h3 id="3、跳表（Skip-List）"><a href="#3、跳表（Skip-List）" class="headerlink" title="3、跳表（Skip List）"></a>3、跳表（Skip List）</h3><p>Skip List是一种随机化的数据结构，基于并联的链表，其效率可比拟于二叉查找树（对于大多数操作需要O(log n)平均时间）。基本上，跳跃列表是对有序的链表增加上附加的前进链接，增加是以随机化的方式进行的，所以在列表中的查找可以快速的跳过部分列表(因此得名)。所有操作都以对数随机化的时间进行。Skip List可以很好解决有序链表查找特定值的困难。</p><h4 id="特征-2"><a href="#特征-2" class="headerlink" title="特征"></a>特征</h4><ol><li>一个跳表应该有几个层（level）组成；</li><li>跳表的第一层包含所有的元素；</li><li>每一层都是一个有序的链表；</li><li>如果元素x出现在第i层，则所有比i小的层都包含x；</li><li>第i层的元素通过一个down指针指向下一层拥有相同值的元素；</li><li>在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；</li><li>Top指针指向最高层的第一个元素。</li></ol><blockquote><p><a href="https://zhewuzhou.github.io/2018/10/18/Database-Indexes/" target="_blank" rel="noopener">https://zhewuzhou.github.io/2018/10/18/Database-Indexes/</a></p></blockquote><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="插入操作："><a href="#插入操作：" class="headerlink" title="插入操作："></a>插入操作：</h5><ol><li>新节点和各层索引节点逐一比较，确定原链表的插入位置。O（logN）</li><li>把索引插入到原链表。O（1）</li><li>利用抛硬币的随机方式，决定新节点是否提升为上一级索引。结果为“正”则提升并继续抛硬币，结果为“负”则停止。O（logN）</li></ol><p>总体上，跳跃表插入操作的时间复杂度是O（logN），而这种数据结构所占空间是2N，既空间复杂度是 O（N）。</p><h5 id="删除操作："><a href="#删除操作：" class="headerlink" title="删除操作："></a>删除操作：</h5><ol><li>自上而下，查找第一次出现节点的索引，并逐层找到每一层对应的节点。O（logN）</li><li>删除每一层查找到的节点，如果该层只剩下1个节点，删除整个一层（原链表除外）。O（logN）</li></ol><p>总体上，跳跃表删除操作的时间复杂度是O（logN）。</p><h4 id="跳跃表和二叉查找树的比较"><a href="#跳跃表和二叉查找树的比较" class="headerlink" title="跳跃表和二叉查找树的比较"></a>跳跃表和二叉查找树的比较</h4><p>跳跃表的优点是维持结构平衡的成本较低，完全依靠随机。二叉查找树在多次插入删除后，需要Rebalance来重新调整结构平衡。</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/53975333" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53975333</a></p></blockquote><h3 id="4、B-树（Balance-Tree）"><a href="#4、B-树（Balance-Tree）" class="headerlink" title="4、B-树（Balance Tree）"></a>4、B-树（Balance Tree）</h3><p>B树（B-tree）是一种自平衡的<a href="https://zh.wikipedia.org/wiki/树_(数据结构)" target="_blank" rel="noopener">树</a>，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在<a href="https://zh.wikipedia.org/wiki/时间复杂度#对数时间" target="_blank" rel="noopener">对数时间</a>内完成。B树属于<strong>多叉树</strong>又名平衡多路查找树（查找路径不只两个），数据库索引技术里大量使用者B树和B+树的数据结构。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdwromkdpaj30hs07e3yi.jpg" alt="B- Tree"></p><h4 id="B-树的特征（m阶）"><a href="#B-树的特征（m阶）" class="headerlink" title="B- 树的特征（m阶）"></a>B- 树的特征（m阶）</h4><p>1.根结点至少有两个子女。</p><p>2.每个中间节点都包含k-1个元素和k个孩子，其中 m/2 &lt;= k &lt;= m</p><p>3.每一个叶子节点都包含k-1个元素，其中 m/2 &lt;= k &lt;= m</p><p>4.所有的叶子结点都位于同一层。</p><p>5.每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>B-树的增加和删除操作比较复杂，但是B-树能够始终维持多路平衡，这也是其一大优势。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>主要应用于文件系统以及部分数据库索引，如非关系型数据库MongoDB。</p><h3 id="5、B-树"><a href="#5、B-树" class="headerlink" title="5、B+ 树"></a>5、B+ 树</h3><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。</p><h4 id="B-树的特征（m阶）-1"><a href="#B-树的特征（m阶）-1" class="headerlink" title="B+ 树的特征（m阶）"></a>B+ 树的特征（m阶）</h4><p>1.有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。</p><p>2.所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</p><p>3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdvs1ygj7xj30mx094glt.jpg" alt="img"></p><p>B+ 树还有一个特点，这个特点是在索引之外的，就是卫星数据的位置。（卫星数据指的是索引元素所指向的数据记录，比如数据库中的某一行）</p><p>在B-树中，无论中间节点还是叶子节点都带有卫星数据。而在B+树中，只有叶子节点带有卫星数据，其余中间节点仅仅是索引，没有任何数据关联。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdvsd64jpbj30lv0alt92.jpg" alt="B-树中的卫星数据（Satellite Information）"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdvsdl3xc8j30na0aot93.jpg" alt="B+树中的卫星数据（Satellite Information）"></p><blockquote><p>在数据库的聚集索引（Clustered Index）中，叶子节点直接包含卫星数据。在非聚集索引（NonClustered Index）中，叶子节点带有指向卫星数据的指针。</p></blockquote><h4 id="B-树优点"><a href="#B-树优点" class="headerlink" title="B+ 树优点"></a>B+ 树优点</h4><p>1.单一节点存储更多的元素，使得查询的IO次数更少。（因为B+树中间节点没有卫星数据，同样大小的磁盘页可以容纳更多的节点元素）</p><p>2.所有查询都要查找到叶子节点，查询性能稳定。（B-树只要找到匹配元素即可，无论匹配元素是处于中间节点还是叶子节点，最好情况只查根节点，最坏情况查到叶子节点，因此不稳定）</p><p>3.所有叶子节点形成有序链表，便于范围查询。（B- 树范围查询只能依靠繁琐的中序遍历）</p><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>文件系统及数据库系统普遍采用 B+ Tree 作为索引结构。</p><h4 id="B-树和红黑树的比较"><a href="#B-树和红黑树的比较" class="headerlink" title="B+树和红黑树的比较"></a>B+树和红黑树的比较</h4><p>（1）B+树有更少的查找次数，因为红黑树的树高很明显比 B+ Tree 大非常多，查找的次数也就更多。</p><p>（2）B+树能够利用磁盘预读特性。为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。并且可以利用预读特性，相邻的节点也能够被预先载入。</p><h2 id="二、mysql索引和redis跳表？"><a href="#二、mysql索引和redis跳表？" class="headerlink" title="二、mysql索引和redis跳表？"></a>二、mysql索引和redis跳表？</h2><p>他们都是用于解决数据集合的查找问题，即根据指定的key，快速查到它所在的位置（或者对应的value）。</p><h5 id="数据集合的查找问题"><a href="#数据集合的查找问题" class="headerlink" title="数据集合的查找问题"></a>数据集合的查找问题</h5><ol><li>需要支持哪些查找方式，单key/多key/范围查找</li><li>插入/删除效率</li><li>查找效率（即时间复杂度）</li><li>存储大小（空间复杂度）</li></ol><h4 id="常用的查找结构："><a href="#常用的查找结构：" class="headerlink" title="常用的查找结构："></a>常用的查找结构：</h4><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>hash是key,value形式，通过一个<strong>散列函数</strong>，能够根据key快速找到value。</p><h5 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h5><p>B+树是在<strong>平衡二叉树</strong>基础上演变过来，B+树首先是有序结构，为了不至于树的高度太高，影响查找效率，在叶子节点上存储的不是单个数据，而是一页数据，提高了查找效率，而为了更好的支持范围查询，B+树在叶子节点冗余了非叶子节点数据，为了支持翻页，叶子节点之间通过指针连接。</p><h5 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h5><p>跳表是在<strong>链表</strong>的基础上进行扩展的，为的是实现redis的Sorted set数据结构。 </p><p>level0: 是存储原始数据的，是一个<strong>有序链表</strong>，每个节点都在链上</p><p> level0+: 通过指针串联起节点，是原始数据的一个子集，level等级越高，串联的数据越少，这样可以显著提高查找效率，</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th>数据结构</th><th>实现原理</th><th>key查询方式</th><th>查找效率</th><th>存储大小</th><th>插入、删除效率</th></tr></thead><tbody><tr><td>Hash</td><td>哈希表</td><td>支持单key</td><td>接近O(1)</td><td>小，除了数据没有额外的存储</td><td>O(1)</td></tr><tr><td>B+树</td><td>平衡二叉树扩展而来</td><td>单key,范围，分页</td><td>O(Log(n)</td><td>除了数据，还多了左右指针，以及叶子节点指针</td><td>O(Log(n)，需要调整树的结构，算法比较复杂</td></tr><tr><td>跳表</td><td>有序链表扩展而来</td><td>单key，分页</td><td>O(Log(n)</td><td>除了数据，还多了指针，但是每个节点的指针小于&lt;2,所以比B+树占用空间小</td><td>O(Log(n)，只用处理链表，算法比较简单</td></tr></tbody></table><p>面试反问？</p><ul><li><p>假如我进去后，负责的业务是什么</p></li><li><p>公司目前技术栈是什么</p></li><li><p>团队怎么样</p></li><li><p>您对我这次的面试评价是什么</p></li><li><p>从面试过程中，您觉得我的优点是什么，不足在什么地方</p></li></ul><h2 id="为什么需要线程池？"><a href="#为什么需要线程池？" class="headerlink" title="为什么需要线程池？"></a>为什么需要线程池？</h2><p>提高程序执行的效率可以从两个方面来考虑</p><ol><li>异步、先响应，返回中间结果，然后异步处理，将结果返回</li><li>并发，多个线程来执行。</li></ol><p>线程池技术使系统复杂了，也提供了更多的灵活性。通过队列的形式，我们将任务的执行拆分成了生产者，消费者模式。每一步只用关心自己的事情。如果我们的任务很复杂，我们可以将任务拆分成不同的步骤，每一步骤可以使用不同的线程池来解决，以此来提高效率。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>线程池是一种异步化技术，通过预先创建线程/异步处理来提高响应速度。同时通过统一调配线程资源，可以降低线程的重复创建问题，提高线程的利用率，中心化管理有利于对资源的有效控制，防止滥用。</p><blockquote><p><a href="https://www.cnblogs.com/stonefang/p/10714769.html" target="_blank" rel="noopener">https://www.cnblogs.com/stonefang/p/10714769.html</a></p></blockquote><h2 id="索引数据结构"><a href="#索引数据结构" class="headerlink" title="索引数据结构"></a>索引数据结构</h2><h4 id="数据库索引为什么要使用树结构存储？"><a href="#数据库索引为什么要使用树结构存储？" class="headerlink" title="数据库索引为什么要使用树结构存储？"></a>数据库索引为什么要使用树结构存储？</h4><p>查询效率高，可以保持有序。</p><h4 id="数据库索引为什么不使用二叉查找树实现？"><a href="#数据库索引为什么不使用二叉查找树实现？" class="headerlink" title="数据库索引为什么不使用二叉查找树实现？"></a>数据库索引为什么不使用二叉查找树实现？</h4><p>从算法逻辑上来说，二叉查找树的查询速度和比较次数是最小的，但是需要考虑现实问题，就是磁盘IO的问题，数据库索引是存储在磁盘上的，数据量很大的时候，索引大小就很多，当利用索引查询的时候，我们不能把整个索引加载到内存，能做的只有逐一加载每一个磁盘页，这里的磁盘页对应着索引树的节点。当使用二叉树作为索引节点查询值的时候，在最坏情况下，磁盘IO次数等于索引树的高度，为了减少磁盘IO次数，就需要降低树的高度，所以就要引入B Tree。</p><h4 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h4><blockquote><p>参考引用：</p><p><a href="https://zhuanlan.zhihu.com/p/53975333" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53975333</a></p><p><a href="https://www.cnblogs.com/stonefang/p/10714769.html" target="_blank" rel="noopener">https://www.cnblogs.com/stonefang/p/10714769.html</a></p><p><a href="https://zhewuzhou.github.io/2018/10/18/Database-Indexes/" target="_blank" rel="noopener">https://zhewuzhou.github.io/2018/10/18/Database-Indexes/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表算法题</title>
      <link href="/2020/04/14/lian-biao-suan-fa-ti/"/>
      <url>/2020/04/14/lian-biao-suan-fa-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>本文所有算法题目来源均为 <a href="https://leetcode-cn.com" target="_blank" rel="noopener">力扣（LeetCode）</a>。</strong></p><p>本篇主要记录链表相关算法题目，链表（Linked List）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针（Pointer）。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的<a href="https://zh.wikipedia.org/wiki/複雜度" target="_blank" rel="noopener">复杂度</a>，比另一种线性表<a href="https://zh.wikipedia.org/wiki/顺序表" target="_blank" rel="noopener">顺序表</a>快得多，但是查</p><p>找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p><p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p><h3 id="06-从尾到头打印链表"><a href="#06-从尾到头打印链表" class="headerlink" title="06 从尾到头打印链表"></a>06 从尾到头打印链表</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><pre><code>输入：head = [1,3,2]输出：[2,3,1]</code></pre></blockquote><h4 id="解法1-栈实现"><a href="#解法1-栈实现" class="headerlink" title="解法1 栈实现"></a>解法1 栈实现</h4><blockquote><p>栈是属于先进后出的，可以通过先把链表入栈，然后出栈相当于链表反转，遍历输出每个节点的值。</p></blockquote><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h4 id="解法2-递归法"><a href="#解法2-递归法" class="headerlink" title="解法2 递归法"></a>解法2 递归法</h4><blockquote><p>先走至链表末端，回溯时依次将节点值加入列表 ，这样就可以实现链表值的倒序输出。</p></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h3 id="单链表实现约瑟夫环问题"><a href="#单链表实现约瑟夫环问题" class="headerlink" title="单链表实现约瑟夫环问题"></a>单链表实现约瑟夫环问题</h3><blockquote><p>约瑟夫问题：已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依<a href="https://baike.baidu.com/item/此" target="_blank" rel="noopener">此</a>规律重复下去，直到圆桌周围的人全部出列。</p><p>实现约瑟夫环共3步：</p><ul><li>1.首先将单链表构成环</li><li>2.根据约瑟夫环规则，删除节点</li><li>让循环继续，直到环中只剩下最后一个节点</li></ul></blockquote><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>linklist<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JosephCircle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ListNode <span class="token function">JosephCycle</span><span class="token punctuation">(</span>ListNode first<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一步：链表构成环</span>        ListNode tail <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tail<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二步删除</span>        ListNode cur <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当链表中的节点只剩下最后一个时，跳出循环</span>            ListNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// cur就是要删除的点</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> null<span class="token punctuation">;</span>            cur <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让循环继续</span>        <span class="token punctuation">}</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n1<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        n2<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        n3<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        n4<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        n1<span class="token punctuation">.</span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>        n2<span class="token punctuation">.</span>next <span class="token operator">=</span> n3<span class="token punctuation">;</span>        n3<span class="token punctuation">.</span>next <span class="token operator">=</span> n4<span class="token punctuation">;</span>        <span class="token function">JosephCycle</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160 相交链表"></a>160 相交链表</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt=""></p><p>在节点 c1 开始相交。</p><pre><code>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出：Reference of the node with value = 8输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</code></pre></blockquote><h4 id="解法1-双指针法"><a href="#解法1-双指针法" class="headerlink" title="解法1 双指针法"></a>解法1 双指针法</h4><blockquote><p>消除长度差，交换上下指针。设定两个指针分别指向两个链表头部，一起向前走直到其中一个到达末端，另一个与末端距离则是两链表的 长度差。再通过长链表指针先走的方式消除长度差，最终两链表即可同时走到相交点。</p></blockquote><p><img src="https://pic.leetcode-cn.com/e86e947c8b87ac723b9c858cd3834f9a93bcc6c5e884e41117ab803d205ef662-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.png" alt="相交链表"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/</a></p></blockquote><h5 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode headA<span class="token punctuation">,</span> ListNode headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">==</span> null <span class="token operator">||</span> headB <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        ListNode pA <span class="token operator">=</span> headA<span class="token punctuation">,</span> pB <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!=</span> pB<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pA <span class="token operator">=</span> pA <span class="token operator">==</span> null <span class="token operator">?</span> headB <span class="token operator">:</span> pA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pB <span class="token operator">=</span> pB <span class="token operator">==</span> null <span class="token operator">?</span> headA <span class="token operator">:</span> pB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h4 id="解法2-Set实现"><a href="#解法2-Set实现" class="headerlink" title="解法2 Set实现"></a>解法2 Set实现</h4><blockquote><p>先遍历链表a，将a链表的所有节点放入一个set中。之后再遍历b链表，如果b链表的某个节点出现在set中，那么就找到了第一个相交的节点。</p></blockquote><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode headA<span class="token punctuation">,</span> ListNode headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">==</span> null <span class="token operator">||</span> headB <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> headA<span class="token punctuation">,</span> q <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h3 id="206-反转链表（🌟）"><a href="#206-反转链表（🌟）" class="headerlink" title="206 反转链表（🌟）"></a>206 反转链表（🌟）</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>反转一个单链表。</p><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre></blockquote><h4 id="解法1-递归法"><a href="#解法1-递归法" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h4><blockquote><p>通过如下图片帮助理解。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdug9ottxvg30hs0a0dkw.gif" alt="递归"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/</a></p></blockquote><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode node <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h4 id="解法2-头插法"><a href="#解法2-头插法" class="headerlink" title="解法2  头插法"></a>解法2  头插法</h4><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ListNode newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    保存下一个节点</span>           ListNode next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>           head <span class="token operator">=</span> next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h4 id="解法3-双指针迭代-头插法"><a href="#解法3-双指针迭代-头插法" class="headerlink" title="解法3  双指针迭代(头插法)"></a>解法3  双指针迭代(头插法)</h4><blockquote><p>申请两个指针，第一个指针叫 pre，最初是指向 null 的。第二个指针 cur 指向 head，然后不断遍历 cur。<br>每次迭代到 cur，都将 cur 的 next 指向 pre，然后 pre 和 cur 前进一位。都迭代完了(cur 变成 null 了)，pre 就是最后一个节点了。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdww70xqymg30hs0a0n23.gif" alt=""></p><blockquote><p>参考链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/</a></p></blockquote><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>       ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           ListNode next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>           pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>           cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21 合并两个有序链表"></a>21 合并两个有序链表</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><pre><code>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</code></pre></blockquote><h4 id="解法1-递归法-1"><a href="#解法1-递归法-1" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h4><blockquote><p>如果 l1 或者 l2 为 null ，只需要返回非空链表。否则，我们要判断 l1 和 l2 哪一个的头元素更小，然后递归地决定下一个添加到结果里的值。如果两个链表都是空的，那么过程终止，所以递归过程最终一定会终止。</p></blockquote><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-7"><a href="#复杂度分析-7" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n+m)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n+m)$</strong></td></tr></tbody></table><h4 id="解法2-迭代法"><a href="#解法2-迭代法" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h4><blockquote><p>设定一个哨兵节点 <code>prehead</code>，让我们比较容易地返回合并后的链表。我们维护一个 prev 指针，我们需要做的是调整它的 next 指针。然后，我们重复以下过程，直到 l1 或者 l2 指向了 null ：如果 l1 当前位置的值小于 l2 ，我们就把 l1 的值接在 prev 节点的后面同时将 l1 指针往后移一个。否则，我们对 l2 做同样的操作。不管我们将哪一个元素接在了后面，我们都把 prev 向后移一个元素。</p><p>在循环终止的时候， l1 和 l2 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表。</p></blockquote><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        ListNode prev <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1 <span class="token operator">==</span> null <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-8"><a href="#复杂度分析-8" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n+m)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h3 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83 删除排序链表中的重复元素"></a>83 删除排序链表中的重复元素</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><pre><code>输入: 1-&gt;1-&gt;2-&gt;3-&gt;3输出: 1-&gt;2-&gt;3</code></pre></blockquote><h4 id="解法1-直接法"><a href="#解法1-直接法" class="headerlink" title="解法1 直接法"></a>解法1 直接法</h4><blockquote><p>由于输入的列表已排序，因此我们可以通过将结点的值与它之后的结点进行比较来确定它是否为重复结点。如果它是重复的，我们更改当前结点的 next 指针，以便它跳过下一个结点并直接指向下一个结点之后的结点。</p></blockquote><h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-9"><a href="#复杂度分析-9" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h4 id="解法2-递归法-1"><a href="#解法2-递归法-1" class="headerlink" title="解法2 递归法"></a>解法2 递归法</h4><h5 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">?</span> head<span class="token punctuation">.</span>next <span class="token operator">:</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-10"><a href="#复杂度分析-10" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19 删除链表的倒数第N个节点"></a>19 删除链表的倒数第N个节点</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p><pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</code></pre></blockquote><h4 id="解法1-两次遍历法"><a href="#解法1-两次遍历法" class="headerlink" title="解法1 两次遍历法"></a>解法1 两次遍历法</h4><blockquote><p>要删除链表的倒数第n个节点，问题可以转化为删除从列表开头数起的第 (<em>L</em>−<em>n</em>+1) 个结点，其中 <em>L</em> 是列表的长度。</p><p>首先添加一个辅助哑结点，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。在第一次遍历中，我们找出列表的长度 L。然后设置一个指向哑结点的指针，并移动它遍历列表，直至它到达第 (L−n) 个结点那里。我们把第 (L−n) 个结点的 next 指针重新链接至第 (L−n+2) 个结点，完成算法。</p></blockquote><h5 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode dump <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dump<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        length <span class="token operator">=</span> length <span class="token operator">-</span> n<span class="token punctuation">;</span>        head <span class="token operator">=</span> dump<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dump<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-11"><a href="#复杂度分析-11" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h4 id="解法2-双指针法"><a href="#解法2-双指针法" class="headerlink" title="解法2 双指针法"></a>解法2 双指针法</h4><blockquote><p>使用两个指针进行遍历。第一个指针从列表的开头向前移动 n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 n 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 n 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdvfoy9r90j30et0ksdhg.jpg" alt=""></p><h5 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode dump <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dump<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode first <span class="token operator">=</span> dump<span class="token punctuation">;</span>        ListNode second <span class="token operator">=</span> dump<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            second <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        second<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dump<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-12"><a href="#复杂度分析-12" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h4 id="解法3-递归法"><a href="#解法3-递归法" class="headerlink" title="解法3 递归法"></a>解法3 递归法</h4><h5 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">==</span>n<span class="token operator">?</span>head<span class="token punctuation">.</span>next<span class="token operator">:</span>head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">else</span> node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-13"><a href="#复杂度分析-13" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24 两两交换链表中的节点"></a>24 两两交换链表中的节点</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p> 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><pre><code>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</code></pre></blockquote><h4 id="解法1-递归法-2"><a href="#解法1-递归法-2" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h4><blockquote><p>从链表的头节点 <code>head</code> 开始递归。每次递归都负责交换一对节点。在所有节点交换完成以后，我们返回交换后的头，即原始链表的第二个节点。</p></blockquote><h5 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode first <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode second <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>second<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        second<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-14"><a href="#复杂度分析-14" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><h4 id="解法2-迭代法-1"><a href="#解法2-迭代法-1" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h4><h5 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode dump <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dump<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode prev <span class="token operator">=</span> dump<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode first <span class="token operator">=</span> head<span class="token punctuation">;</span>            ListNode second <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>            first<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            second<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>            prev <span class="token operator">=</span> first<span class="token punctuation">;</span>            head <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dump<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-15"><a href="#复杂度分析-15" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h3 id="445-两数相加II（链表求和）"><a href="#445-两数相加II（链表求和）" class="headerlink" title="445 两数相加II（链表求和）"></a>445 两数相加II（链表求和）</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><pre><code>输入：(7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 8 -&gt; 0 -&gt; 7</code></pre></blockquote><h4 id="解法1-链表反转，按位相加"><a href="#解法1-链表反转，按位相加" class="headerlink" title="解法1 链表反转，按位相加"></a>解法1 链表反转，按位相加</h4><blockquote><p>将链表反转，然后按位相加，并通过carry记录进位的值。</p></blockquote><h5 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode node1 <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode node2 <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 记录进位值</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode head <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node1 <span class="token operator">!=</span> null <span class="token operator">||</span> node2 <span class="token operator">!=</span> null <span class="token operator">||</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n1 <span class="token operator">=</span> node1 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> node1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> n2 <span class="token operator">=</span> node2 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> node2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            node1 <span class="token operator">=</span> node1 <span class="token operator">==</span> null <span class="token operator">?</span> node1 <span class="token operator">:</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node2 <span class="token operator">=</span> node2 <span class="token operator">==</span> null <span class="token operator">?</span> node2 <span class="token operator">:</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 链表按位相加</span>            sum <span class="token operator">=</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> carry<span class="token punctuation">;</span>            ListNode newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 链表反转</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-16"><a href="#复杂度分析-16" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(max(m,n))$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h4 id="解法2-辅助栈"><a href="#解法2-辅助栈" class="headerlink" title="解法2 辅助栈"></a>解法2 辅助栈</h4><blockquote><p>本题的主要问题在于链表中数位的顺序与我们做加法的顺序是相反的，为了逆序处理所有数位，我们可以使用栈：把所有数字压入栈中，再依次取出相加。然后反转链表返回。</p></blockquote><h5 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack1 <span class="token operator">=</span> <span class="token function">stackPush</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2 <span class="token operator">=</span> <span class="token function">stackPush</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode head <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> carry <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> carry<span class="token punctuation">;</span>            ListNode newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">stackPush</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-17"><a href="#复杂度分析-17" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(max(m,n))$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(m+n)$</strong></td></tr></tbody></table><h3 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234 回文链表"></a>234 回文链表</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>判断一个链表是否为回文链表。</p><pre><code>输入: 1-&gt;2-&gt;3-&gt;2-&gt;1输出: true</code></pre></blockquote><h4 id="解法1-链表反转（🌟）"><a href="#解法1-链表反转（🌟）" class="headerlink" title="解法1 链表反转（🌟）"></a>解法1 链表反转（🌟）</h4><blockquote><p>将链表反转，然后与原链表进行比较。</p></blockquote><h5 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode node <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">!=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ListNode <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            ListNode cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-18"><a href="#复杂度分析-18" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><p>####解法2 双指针法</p><blockquote><p>将链表中的值添加到数组中，然后设置头尾指针一起向内移动判断是否是回文。</p></blockquote><h5 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化一样空数组</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把链表中的值存到数组中</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 头指针</span>        <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尾指针</span>        <span class="token keyword">int</span> back <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> back<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 比较头尾指针的值是否相同，相同的话头尾指针均向内移动，继续遍历比较，不同则返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            front <span class="token operator">++</span><span class="token punctuation">;</span>            back <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-19"><a href="#复杂度分析-19" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><p>####解法3 递归法</p><blockquote><p>使用递归遍历链表，然后头尾节点值进行比较。</p></blockquote><h5 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    ListNode frontPointer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frontPointer <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>frontPointer<span class="token punctuation">.</span>val <span class="token operator">!=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            frontPointer <span class="token operator">=</span> frontPointer<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-20"><a href="#复杂度分析-20" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(n)$</strong></td></tr></tbody></table><p>####解法4 双指针+链表反转</p><blockquote><p>将链表的后半部分反转（修改链表结构），然后将前半部分和后半部分进行比较。比较完成后将链表恢复原样。</p></blockquote><h5 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ListNode firstHalfEnd <span class="token operator">=</span> <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode secondHalfStart <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>firstHalfEnd<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode node1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode node2 <span class="token operator">=</span> secondHalfStart<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> result <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node1<span class="token punctuation">.</span>val <span class="token operator">!=</span> node2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        firstHalfEnd<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>secondHalfStart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ListNode <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ListNode <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-21"><a href="#复杂度分析-21" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h3 id="725-分隔链表"><a href="#725-分隔链表" class="headerlink" title="725 分隔链表"></a>725 分隔链表</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。返回一个符合上述规则的链表的列表。</p><pre><code>输入: root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]解释:输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。</code></pre></blockquote><h4 id="解法1-创建新链表"><a href="#解法1-创建新链表" class="headerlink" title="解法1 创建新链表"></a>解法1 创建新链表</h4><blockquote><p>首先计算链表的总节点数n，然后通过n/k得到分割的链表节点数，如果n%k不为0，则需要在分隔的节点上都依次加1，然后创建一个新链表，把分隔的列表写入新链表。</p></blockquote><h5 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">splitListToParts</span><span class="token punctuation">(</span>ListNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 分段</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> n<span class="token operator">/</span>k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 余数</span>        <span class="token keyword">int</span> rem <span class="token operator">=</span> n<span class="token operator">%</span>k<span class="token punctuation">;</span>        ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> write <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rem <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                write <span class="token operator">=</span> write<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-22"><a href="#复杂度分析-22" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n+k)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(max(n,k))$</strong></td></tr></tbody></table><h4 id="解法2-拆分链表"><a href="#解法2-拆分链表" class="headerlink" title="解法2 拆分链表"></a>解法2 拆分链表</h4><blockquote><p>同解法1类似，此处只是拆分原链表。</p></blockquote><h5 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">splitListToParts</span><span class="token punctuation">(</span>ListNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 分段</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> n<span class="token operator">/</span>k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 余数</span>        <span class="token keyword">int</span> rem <span class="token operator">=</span> n<span class="token operator">%</span>k<span class="token punctuation">;</span>        ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cur <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rem <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ListNode next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-23"><a href="#复杂度分析-23" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n+k)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(k)$</strong></td></tr></tbody></table><h3 id="328-奇偶链表"><a href="#328-奇偶链表" class="headerlink" title="328 奇偶链表"></a>328 奇偶链表</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p> 给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code></pre></blockquote><h4 id="解法1-双指针法-1"><a href="#解法1-双指针法-1" class="headerlink" title="解法1 双指针法"></a>解法1 双指针法</h4><blockquote><p>将奇节点放在一个链表里，偶链表放在另一个链表里。然后把偶链表接在奇链表的尾部。用变量 <code>head</code> 和 <code>odd</code> 保存奇链表的头和尾指针。 <code>evenHead</code> 和 <code>even</code> 保存偶链表的头和尾指针。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdxzoppydvj30r20sswgd.jpg" alt=""></p><h5 id="代码实现-23"><a href="#代码实现-23" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">oddEvenList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode odd <span class="token operator">=</span> head<span class="token punctuation">,</span> even <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> evenHead <span class="token operator">=</span> even<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>even <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            even <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-24"><a href="#复杂度分析-24" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>$O(n)$</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>$O(1)$</strong></td></tr></tbody></table><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2 两数相加"></a>2 两数相加</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre></blockquote><h4 id="解法1-初等数学"><a href="#解法1-初等数学" class="headerlink" title="解法1 初等数学"></a>解法1 初等数学</h4><p>新创建一个链表<code>head</code>，遍历两个非空链表，设置一个进位值<code>carry</code>，初始值为0，把链表值与进位值相加取余，即为新链表的值，同时更新进位值，当遍历完成之后，如果进位值为1，则返回列表追加一个含有数字 1 的新结点。</p><h5 id="代码实现-24"><a href="#代码实现-24" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>array<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>linklist<span class="token punctuation">.</span>ListNodeOutPut<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ListNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Date: 2020-04-26 18:19 * @Description: 两数相加 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddTwoNumbers</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 两数相加-初等数学     * @param l1     * @param l2     * @return     */</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> l1<span class="token punctuation">,</span> q <span class="token operator">=</span> l2<span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">||</span> q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> q<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AddTwoNumbers demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddTwoNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------初始链表----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode node <span class="token operator">=</span> ListNodeOutPut<span class="token punctuation">.</span><span class="token function">listNodeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------两数相加----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode node1 <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNodeOutPut<span class="token punctuation">.</span><span class="token function">resultOut</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-25"><a href="#复杂度分析-25" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(max(m,n))</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center">O(max(m,n))</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统设计思维导图总结</title>
      <link href="/2020/04/13/xi-tong-she-ji-si-wei-dao-tu-zong-jie/"/>
      <url>/2020/04/13/xi-tong-she-ji-si-wei-dao-tu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、系统设计基础"><a href="#一、系统设计基础" class="headerlink" title="一、系统设计基础"></a>一、系统设计基础</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsg7rcn2cj31yg0u07wh.jpg" alt="系统设计基础"></p><h3 id="二、缓存"><a href="#二、缓存" class="headerlink" title="二、缓存"></a>二、缓存</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsg1nlh58j31590u07wi.jpg" alt=" 缓存"></p><h3 id="三、集群"><a href="#三、集群" class="headerlink" title="三、集群"></a>三、集群</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsg5kzdpaj30u01ogx6p.jpg" alt="集群"></p><h3 id="四、攻击技术"><a href="#四、攻击技术" class="headerlink" title="四、攻击技术"></a>四、攻击技术</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsg6cwry8j30u00wbkjl.jpg" alt="攻击技术"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 集群 </tag>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构思维导图总结</title>
      <link href="/2020/04/13/shu-ju-jie-gou-si-wei-dao-tu-zong-jie/"/>
      <url>/2020/04/13/shu-ju-jie-gou-si-wei-dao-tu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>本思维导图内容整理自《大话数据结构》,通过思维导图总结，让零散的知识点连接起来，更加的直观，便于以后的复习。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsf970w0xj30u014gnpi.jpg" alt="数据结构"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合JPA遇到的问题</title>
      <link href="/2020/04/10/springboot-zheng-he-jpa-yu-dao-de-wen-ti/"/>
      <url>/2020/04/10/springboot-zheng-he-jpa-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在springboot中整合JPA可能会遇到“No Identifier specified for entity”即没有标识实体类的错误。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>检查自己的实体类是否有以下注释：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdoti0vxtoj31a80baq4p.jpg" alt=""></p><p>注解依赖：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并二叉树</title>
      <link href="/2020/04/09/he-bing-er-cha-shu/"/>
      <url>/2020/04/09/he-bing-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="94-合并二叉树"><a href="#94-合并二叉树" class="headerlink" title="94 合并二叉树"></a>94 合并二叉树</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定两个二叉树，你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><pre><code>输入:     Tree 1                     Tree 2                            1                         2                                      / \                       / \                                    3   2                     1   3                               /                           \   \                            5                             4   7                  输出: 合并后的树:         3        / \       4   5      / \   \      5   4   7</code></pre></blockquote><h4 id="解法1-递归法"><a href="#解法1-递归法" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h4><blockquote><p>前序遍历二叉树，再依次把访问到的节点值相加，题目没有说不能改变树的值和结构，我们不用再创建新的节点了，直接将树2合并到树1上再返回树就可以了。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdn9ucp6vng30zk0k0kep.gif" alt="recursion.gif"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/</a></p></blockquote><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       t1<span class="token punctuation">.</span>val <span class="token operator">+=</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>       t1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       t1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(h)，h为树的高度</strong></td></tr></tbody></table><h4 id="解法2-迭代法"><a href="#解法2-迭代法" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h4><blockquote><p>借助队列来实现广度优先遍历算法，只要两颗树的左节点都不为null，就把将他们放入队列中；同理只要两棵树的右节点都不为null了，也将他们放入队列中。然后我们不断的从队列中取出节点，把他们相加。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdnb4svntzg30zk0k0ki9.gif" alt="iterator.gif"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/</a></p></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>       queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           TreeNode r1 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           TreeNode r2 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           r1<span class="token punctuation">.</span>val <span class="token operator">+=</span> r2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               r1<span class="token punctuation">.</span>left <span class="token operator">=</span> r2<span class="token punctuation">.</span>left<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               r1<span class="token punctuation">.</span>right <span class="token operator">=</span> r2<span class="token punctuation">.</span>right<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="在IntelliJ-IDEA中测试"><a href="#在IntelliJ-IDEA中测试" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 合并二叉树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeTreesDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归法     * @param t1     * @param t2     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t1<span class="token punctuation">.</span>val <span class="token operator">+=</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        t1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 迭代法     * @param t1     * @param t2     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode r1 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode r2 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r1<span class="token punctuation">.</span>val <span class="token operator">+=</span> r2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r1<span class="token punctuation">.</span>left <span class="token operator">=</span> r2<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r1<span class="token punctuation">.</span>right <span class="token operator">=</span> r2<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MergeTreesDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeTreesDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root1 <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root2 <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方便断点调试</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树算法题</title>
      <link href="/2020/04/04/ping-heng-er-cha-shu/"/>
      <url>/2020/04/04/ping-heng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110 平衡二叉树"></a>110 平衡二叉树</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>一棵高度平衡二叉树定义为：一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。</p><pre><code>给定二叉树 [3,9,20,null,null,15,7]    3   / \  9  20    /  \   15   7返回 true </code></pre></blockquote><h4 id="解法1-自顶向下（暴力法）"><a href="#解法1-自顶向下（暴力法）" class="headerlink" title="解法1 自顶向下（暴力法）"></a>解法1 自顶向下（暴力法）</h4><blockquote><p>构造一个获取当前节点最大深度的方法 depth(root) ，通过比较此子树的左右子树的最大高度差abs(depth(root.left) - depth(root.right))，来判断此子树是否是二叉平衡树。若树的所有子树都平衡时，此树才平衡。</p><p>此方法容易想到，但会产生大量重复计算，时间复杂度较高。</p></blockquote><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(nlgn)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="解法2-自底向上"><a href="#解法2-自底向上" class="headerlink" title="解法2 自底向上"></a>解法2 自底向上</h4><blockquote><p>对二叉树做先序遍历，从底至顶返回子树最大高度，若判定某子树不是平衡树则 “剪枝” ，直接向上返回。</p></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="在IntelliJ-IDEA中测试"><a href="#在IntelliJ-IDEA中测试" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 平衡二叉树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">isBalancedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自顶向下     * @param root     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自底向上     * @param root     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isBalancedDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">isBalancedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean flag <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>true</code></pre><h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543 二叉树的直径"></a>543 二叉树的直径</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p><pre><code>给定二叉树 [1,2,3,4,5]              1         / \        2   3       / \           4   5    返回 3 </code></pre></blockquote><h4 id="解题思路（深度优先搜索）"><a href="#解题思路（深度优先搜索）" class="headerlink" title="解题思路（深度优先搜索）"></a>解题思路（深度优先搜索）</h4><blockquote><p>定义一个全局变量 res，用来记录最大直径。使用 dfs(node) 遍历所有的节点。</p><p>dfs(node) 的作用是：找出以 node 为根节点的二叉树的最大深度，将根节点的深度定义为 1。res 取值为以经过 root，左右子树的最大深度之和 leftDepth + rigthDepth。通过递归，找到 res 的最大值。</p></blockquote><h5 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> leftDepth <span class="token operator">+</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)，其中 n 为二叉树的节点数</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(Height)，其中 Height为二叉树的高度</strong></td></tr></tbody></table><blockquote><p>由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height)O(Height) </p></blockquote><h4 id="在IntelliJ-IDEA中测试-1"><a href="#在IntelliJ-IDEA中测试-1" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 二叉树的直径 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiameterOfBinaryTreeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> leftDepth <span class="token operator">+</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DiameterOfBinaryTreeDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiameterOfBinaryTreeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>3</code></pre><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226 翻转二叉树"></a>226 翻转二叉树</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>翻转一棵二叉树。</p><pre><code>输入：     4   /   \  2     7 / \   / \1   3 6   9输出：     4   /   \  7     2 / \   / \9   6 3   1</code></pre></blockquote><h4 id="解法1-递归法（深度优先遍历）"><a href="#解法1-递归法（深度优先遍历）" class="headerlink" title="解法1 递归法（深度优先遍历）"></a>解法1 递归法（深度优先遍历）</h4><blockquote><p>交换左右节点，然后再递归的交换左节点，右节点。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdhsc73eosg30lh0f34am.gif" alt="递归法"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/</a></p></blockquote><h5 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交换左右节点</span>        TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)，其中 n 为二叉树的节点数</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(Height)，其中 Height为二叉树的高度</strong></td></tr></tbody></table><h4 id="解法2-迭代法（广度优先遍历）"><a href="#解法2-迭代法（广度优先遍历）" class="headerlink" title="解法2 迭代法（广度优先遍历）"></a>解法2 迭代法（广度优先遍历）</h4><blockquote><p>先将根节点放入到队列中，然后不断的迭代队列中的元素。对当前元素调换其左右子树的位置，然后：</p><ul><li>判断其左子树是否为空，不为空就放入队列中</li><li>判断其右子树是否为空，不为空就放入队列中</li></ul></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdhscp47zog30p50jgarq.gif" alt="迭代法"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/</a></p></blockquote><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将二叉树中的节点逐层放入队列中，再迭代处理队列中的元素</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每次都从队列中拿一个节点，并交换这个节点的左右子树</span>            TreeNode tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果当前节点的左子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果当前节点的右子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回处理完的根节点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="在IntelliJ-IDEA中测试-2"><a href="#在IntelliJ-IDEA中测试-2" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 翻转二叉树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertTreeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">treeToArray</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token function">treeToArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">treeToArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归法（深度优先遍历）     * @param root     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交换左右节点</span>        TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 迭代法（广度优先遍历）     * @param root     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将二叉树中的节点逐层放入队列中，再迭代处理队列中的元素</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每次都从队列中拿一个节点，并交换这个节点的左右子树</span>            TreeNode tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果当前节点的左子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果当前节点的右子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回处理完的根节点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InvertTreeDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvertTreeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode invertTree <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">treeToArray</span><span class="token punctuation">(</span>invertTree<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>[4, 7, 2, 7, 9, 6, 9, 6, 2, 3, 1, 3, 1]</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的中序遍历</title>
      <link href="/2020/04/03/er-cha-shu-de-zhong-xu-bian-li/"/>
      <url>/2020/04/03/er-cha-shu-de-zhong-xu-bian-li/</url>
      
        <content type="html"><![CDATA[<h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94 二叉树的中序遍历"></a>94 二叉树的中序遍历</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>给定一个二叉树，返回它的中序遍历。</p><pre><code>输入: [1,null,2,3]   1    \     2    /   3输出: [1,3,2]</code></pre></blockquote><h4 id="解法1-递归法"><a href="#解法1-递归法" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h4><blockquote><p>使用经典的递归法实现，编写一个辅助函数实现递归。</p></blockquote><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>最坏情况下需要空间O(n)，平均情况为O(logn)</strong></td></tr></tbody></table><h4 id="解法2-迭代法"><a href="#解法2-迭代法" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h4><blockquote><p>基于栈的遍历</p></blockquote><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                    root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="解法3-颜色标记法"><a href="#解法3-颜色标记法" class="headerlink" title="解法3 颜色标记法"></a>解法3 颜色标记法</h4><blockquote><p>使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色。<br>如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。<br>如果遇到的节点为灰色，则将节点的值输出。</p></blockquote><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorNode</span> <span class="token punctuation">{</span>        TreeNode root<span class="token punctuation">;</span>        String color<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">ColorNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>ColorNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            ColorNode colorNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="在IntelliJ-IDEA中测试"><a href="#在IntelliJ-IDEA中测试" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 二叉树的中序遍历 * 三种方法：1、递归法 2、迭代法 3、颜色标记法 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">inorderTraversalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1.递归法     * @param root     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.非递归版     * 用栈实现，迭代法     * @param root     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 3.颜色标记法     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorNode</span> <span class="token punctuation">{</span>        TreeNode root<span class="token punctuation">;</span>        String color<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">ColorNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>ColorNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            ColorNode colorNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数组转化为树结构     * @param array     * @param index     * @return     */</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        inorderTraversalDemo it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">inorderTraversalDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>[1, 3, 2]</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux知识</title>
      <link href="/2020/04/02/linux-zhi-shi/"/>
      <url>/2020/04/02/linux-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Linux的体系结构"><a href="#1、Linux的体系结构" class="headerlink" title="1、Linux的体系结构"></a>1、Linux的体系结构</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft5n5jf0j307b06jmx1.jpg" alt=""></p><blockquote><p>图片来源：<a href="https://www.geek-share.com/detail/2779369078.html" target="_blank" rel="noopener">https://www.geek-share.com/detail/2779369078.html</a></p></blockquote><ul><li>体系结构主要分为用户态(用户上层活动)和内核态</li><li>内核:本质是一段管理计算机硬件设备的程序</li><li>系统调用:内核的访问接口,是一种能再简化的操作</li><li>公用函数库:系统调用的组合拳</li><li>Shell：命令解释器，可编程</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft6ecjjej30vo0kaasq.jpg" alt=""></p><h3 id="2、Linux查找特定文件"><a href="#2、Linux查找特定文件" class="headerlink" title="2、Linux查找特定文件"></a>2、Linux查找特定文件</h3><p><strong>如何查找特定的文件？</strong></p><p><code>find</code></p><pre class=" language-!"><code class="language-!">语法：find path [options] params</code></pre><p><strong>作用</strong>：在指定目录下查找文件</p><p><strong>面试里常用的方式:</strong></p><ul><li><code>find ~ -name "target3.java"</code> : 精确查找文件</li><li><code>find ~ -name "target*"</code> :模糊查找文件</li><li><code>find ~ -iname "target*"</code> :不区分文件名大小写去查找文件</li><li><code>man find</code> :更多关于find指令的使用说明</li></ul><h3 id="3、检索文件内容"><a href="#3、检索文件内容" class="headerlink" title="3、检索文件内容"></a>3、检索文件内容</h3><p><code>grep</code></p><pre class=" language-!"><code class="language-!">语法：grep [options] pattern file</code></pre><p>全称：Global Regular Expression Print</p><p><strong>作用</strong>：查找文件里符合条件的字符串</p><p><code>管道操作符 |</code></p><p>可以将指令连接起来，前一个指令的输出作为后一个指令的输入</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft7rikmaj30ec03jaa8.jpg" alt=""></p><blockquote><p>图谱来源：<a href="https://blog.51cto.com/yuyucat/1651914" target="_blank" rel="noopener">https://blog.51cto.com/yuyucat/1651914</a></p></blockquote><p><strong>使用管道注意的要点</strong>：</p><ul><li>只处理前一个命令正确输出，不处理错误输出</li><li>右边命令必须能够接收标准输入流，否则传递过程中数据会被抛弃</li><li>常用来接收数据管道的命令有：sed,awk,grep,cut,head,top,less,more,wc,join,sort,split等</li></ul><p><strong>面试里常用的方式：</strong></p><ul><li><code>find ~ | grep "target"</code>:模糊查找文件</li><li><code>grep 'partial\[truel\]' bsc-plat-al-data.info.log</code>:在内容中查找包含某个字段的文件，并在相关的行中展示出来</li><li><code>grep -O 'engine\[[O-9a-z]*\]'</code>：筛选出符合正则表达式的内容</li><li><code>grep -V 'grep'</code>:过滤掉包含此字符串的内容</li></ul><h3 id="4、对日志内容做统计"><a href="#4、对日志内容做统计" class="headerlink" title="4、对日志内容做统计"></a>4、对日志内容做统计</h3><p><code>awk</code></p><pre class=" language-!"><code class="language-!">语法: awk [options] 'cmd' file</code></pre><ul><li>一次读取一行文本,按输入分隔符进行切片,切成多个组成部分</li><li>将切片直接保存在内建的变量中, $1,$2…($0表示行的全部)</li><li>支持对单个切片的判断,支持循环判断,默认分隔符为空格</li><li></li><li><em>面试里常用的方式*</em></li><li><code>awk '{print $1, $4}' netstat.txt</code>:筛选出文件内容的某些列的数据</li><li><code>awk '$1=="tcp" &amp;&amp; $2==1 {print $O}' netstat.txt</code>:依据某些条件筛选文件内容中的某些列的数据</li><li><code>awk '{enginearr[$1]++}END{for(i in enginearr)print i"\t" enginearr[i]}'</code>:对内容逐行做统计操作，并列出对应的统计结果</li></ul><p>示例：<br><code>grep 'partial\[truel\]' bsc-plat-al-data.info.log ｜ grep -O 'engine\[[O-9a-z]*\]' ｜ awk '{enginearr[$1]++}END{for(i in enginearr)print i "\t" enginearr[i]}'</code></p><h3 id="5、批量替换文件内容"><a href="#5、批量替换文件内容" class="headerlink" title="5、批量替换文件内容"></a>5、批量替换文件内容</h3><p><code>sed</code></p><pre class=" language-!"><code class="language-!">语法：sed [options] 'sed command' filename</code></pre><ul><li>全名stream editor,流编辑器</li><li>适合用于对文本的行内容进行处理</li></ul><p><strong>面试里常用的方式：</strong></p><ul><li><code>sed -i 's/^Str/String/' replace.java</code>:在文件中筛选出以<code>Str</code>开头的行并把<code>Str</code>替换成<code>String</code>，<code>-i</code>表示直接在目标文本上进行修改，<code>s</code>是指对字符串进行操作</li><li><code>sed -i's/\.$/\;/' replacejava</code>:筛选出以<code>.</code>结尾的行，并把<code>.</code>替换为<code>;</code>,<code>$</code>是指结尾符</li><li><code>sed -i's/Jack/me/g' replace.java</code>:筛选出包含<code>Jack</code>指定字符串的行，并把该字符串替换为<code>me</code>，<code>g</code>是指对整行的内容进行替换，没有<code>g</code>则只替换该行第一次符合条件的字符串</li><li><code>sed -i '/^ *$/d' replace.java</code>:删除空行，<code>d</code>指删除指定行，此处为空格</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM知识</title>
      <link href="/2020/04/02/jvm-zhi-shi/"/>
      <url>/2020/04/02/jvm-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="六、JVN"><a href="#六、JVN" class="headerlink" title="六、JVN"></a>六、JVN</h2><h3 id="1、谈谈对Java的理解"><a href="#1、谈谈对Java的理解" class="headerlink" title="1、谈谈对Java的理解"></a>1、谈谈对Java的理解</h3><ul><li>平台无关性（一次编译，到处运行）</li><li>GC（垃圾回收机制，释放堆内存）</li><li>语言特性（泛型、反射，lamada表达式）</li><li>面向对象（封装，继承，多态）</li><li>类库（Java本生自带的集合，并发库，网络库，IO）</li><li>异常处理</li></ul><h3 id="2、平台无关性如何实现？"><a href="#2、平台无关性如何实现？" class="headerlink" title="2、平台无关性如何实现？"></a>2、平台无关性如何实现？</h3><p><strong>Compile Once, Run Anywhere如何实现？</strong></p><ul><li>编译时</li><li>运行时</li></ul><p><strong>示例演示：</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfs3mtl2ej31t10u0gw4.jpg" alt=""><br>javap是jdk自带的反汇编译器，可以查看编译器返回的字节码，了解编译器内部工作的机制</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfs3p4nqwj31th0u0wn9.jpg" alt=""><br>在liunx平台下运行：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfs3yuo9bj31i00pq1kx.jpg" alt=""><br><strong>Java文件运行流程：</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfs498zaij316o0cqjza.jpg" alt=""><br><strong>平台无关性流程：</strong></p><p>Java源码首先被编译成字节码，再由不同平台的JVM进行解析，Java语言在不同的平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p><p><strong>为什么JVM不直接将源码解析成机器码去执行？</strong></p><ul><li>准备工作:每次执行都需要各种检查</li><li>兼容性:也可以将别的语言解析成字节码</li></ul><h3 id="3、JVM如何加载-class文件"><a href="#3、JVM如何加载-class文件" class="headerlink" title="3、JVM如何加载.class文件"></a>3、JVM如何加载.class文件</h3><p>JVM是内存中的虚拟机</p><p><strong>JVM架构：</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsecp20krj31z00u0at0.jpg" alt="JVM体系架构"></p><ul><li>Class Loader :依据特定格式,加载class文件到内存</li><li>Execution Engine :对命令进行解析</li><li>Native Interface :融合不同开发语言的原生库为Java所用</li><li>Runtime Data Area : JVM内存空间结构模型</li></ul><h3 id="4、什么是反射？"><a href="#4、什么是反射？" class="headerlink" title="4、什么是反射？"></a>4、什么是反射？</h3><p><strong>定义</strong>：JAVA反射机制是在运行状态中,对于任意一个类,都能够知道这个类的所有属性和方法;对于任意一个对象都能够调用它的任意方法和属性;这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><p><strong>代码示例：</strong></p><p>（1）<code>Robot</code>类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Robot</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有变量</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 公共方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>String helloSentence<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloSentence <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 私有方法</span>    <span class="token keyword">private</span> String <span class="token function">throwHello</span><span class="token punctuation">(</span>String tag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> tag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）反射示例主类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 反射示例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectSample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取类</span>        Class <span class="token class-name">rc</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.interview.javabasic.reflect.Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取类实例</span>        Robot r <span class="token operator">=</span> <span class="token punctuation">(</span>Robot<span class="token punctuation">)</span> rc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印类名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class name is "</span> <span class="token operator">+</span> rc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过类获取方法 getDeclaredMethod获取该类的所有方法，不能获得该类实现的或者继承的方法</span>        Method getHello <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"throwHello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私有变量或方法必须设置</span>        getHello<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取方法内容</span>        Object str <span class="token operator">=</span> getHello<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getHello result is "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getMethod只能获得该类的公共方法，也能获得该类继承或者实现的方法</span>        Method sayHi <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHi"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field name <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、ClassLoader"><a href="#5、ClassLoader" class="headerlink" title="5、ClassLoader"></a>5、ClassLoader</h3><p><strong>类从编译到执行的过程：</strong></p><ul><li>编译器将Robot.java源文件编译为Robot.class字节码文件</li><li>ClassLoader将字节码转换为JVM中的Class &lt; Robot&gt;对象</li><li>JVM利用Class <robot>对象实例化为Robot对象</robot></li></ul><p><strong>谈谈ClassLoader？</strong></p><p>ClassLoader在Java中有着非常重要的作用,它主要工作在Class装载的加载阶段,其主要作用是从系统外部获得Class二进制数据流。它是Java的核心组件，所有的Class都是由ClassLoader进行加载的。ClassLoader负责通过将Class 文件里的二进制数据流装载进系统,然后交给Java虚拟机进行连接、初始化等操作。</p><p><strong>ClassLoader的种类</strong></p><ul><li><p>BootStrapClassLoader : C+ +编写,加载核心库java.*</p></li><li><p>ExtClassLoader : Java编写,加载扩展库javax.*</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果</span><span class="token operator">/</span>Users<span class="token operator">/</span>cyh<span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>Extensions<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>Extensions<span class="token operator">:</span><span class="token operator">/</span>Network<span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>Extensions<span class="token operator">:</span><span class="token operator">/</span>System<span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>Extensions<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>java</code></pre></li><li><p>AppClassLoader : Java编写,加载程序所在目录</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>charsets<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>deploy<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>cldrdata<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>dnsns<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>jaccess<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>jfxrt<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>localedata<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>nashorn<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>sunec<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>sunjce_provider<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>sunpkcs11<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>ext<span class="token operator">/</span>zipfs<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>javaws<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jce<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jfr<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jfxswt<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jsse<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>management<span class="token operator">-</span>agent<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>plugin<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>resources<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>rt<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>ant<span class="token operator">-</span>javafx<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>javafx<span class="token operator">-</span>mx<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>jconsole<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>packager<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>sa<span class="token operator">-</span>jdi<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span>Users<span class="token operator">/</span>cyh<span class="token operator">/</span>Downloads<span class="token operator">/</span>javabasic<span class="token operator">/</span>out<span class="token operator">/</span>production<span class="token operator">/</span>javabasic<span class="token operator">:</span><span class="token operator">/</span>Users<span class="token operator">/</span>cyh<span class="token operator">/</span>Library<span class="token operator">/</span>Application Support<span class="token operator">/</span>JetBrains<span class="token operator">/</span>Toolbox<span class="token operator">/</span>apps<span class="token operator">/</span>IDEA<span class="token operator">-</span>U<span class="token operator">/</span>ch<span class="token operator">-</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">192.5728</span><span class="token punctuation">.</span><span class="token number">98</span><span class="token operator">/</span>IntelliJ IDEA<span class="token punctuation">.</span>app<span class="token operator">/</span>Contents<span class="token operator">/</span>lib<span class="token operator">/</span>idea_rt<span class="token punctuation">.</span>jar</code></pre></li><li><p>自定义ClassLoader : Java编写,定制化加载</p></li></ul><p><strong>自定义ClassLoader类的实现方法：</strong>(不太明白6-5)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span> <span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token keyword">throws</span> ClassFormatError<span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">,</span> null<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>自定义ClassLoader类示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String path<span class="token punctuation">;</span>    <span class="token keyword">private</span> String classLoaderName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String classLoaderName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classLoaderName <span class="token operator">=</span> classLoaderName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用于寻找类文件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class <span class="token class-name">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用于加载类文件</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> path <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayOutputStream out <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        MyClassLoader m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"/Users/cyh/Desktop/"</span><span class="token punctuation">,</span> <span class="token string">"myClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"WaLi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsev0mi4j30pi048mzh.jpg" alt=""><br><strong>ClassLoader的双亲委派机制</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfses01hhj30vx0pnq4l.jpg" alt=""></p><blockquote><p>图片来源：<a href="https://blog.nowcoder.net/n/0597892d34ae4023add7406cbbe388d0" target="_blank" rel="noopener">https://blog.nowcoder.net/n/0597892d34ae4023add7406cbbe388d0</a></p></blockquote><p><strong>为什么要使用双亲委派机制去加载类?</strong></p><ul><li>避免多份同样字节码的加载</li></ul><p><strong>查看ClassLoader下的关于native的方法：</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsh96zrqj31h008sgn8.jpg" alt=""></p><blockquote><p>打开openjdk中查看c源码；<a href="https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/777e3d4780b8/src/share/native/java/lang/ClassLoader.c" target="_blank" rel="noopener">https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/777e3d4780b8/src/share/native/java/lang/ClassLoader.c</a></p></blockquote><p><strong>类的加载方式</strong></p><ul><li>隐式加载: new</li><li>显式加载: loadClass , forName等</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsjtzut8j313e0is7ay.jpg" alt=""></p><p><strong>loadClass和forName的区别</strong></p><ul><li>Class.forName得到的class是已经初始化完成的</li><li>Classloder.loadClass得到的class是还没有链接的</li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadDifference</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 还没有链接，不能执行静态代码块，所以什么也打印不出来</span>        ClassLoader cl <span class="token operator">=</span> Robot<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 已经初始化完成，可以直接打印出"Hello Robot"</span>        Class <span class="token class-name">r</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.interview.javabasic.reflect.Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Class.forName("com.mysql.jdbc.Driver");</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6、Java内存模型"><a href="#6、Java内存模型" class="headerlink" title="6、Java内存模型"></a>6、Java内存模型</h3><p><strong>内存简介</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsjyzw3sj310m0cqn0v.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsk3osfaj311m0kswki.jpg" alt=""></p><p><strong>JVM内存模型-JDK8</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsk8f5tsj30z20i2qaf.jpg" alt=""></p><h4 id="Java内存模型之线程私有部分"><a href="#Java内存模型之线程私有部分" class="headerlink" title="Java内存模型之线程私有部分"></a>Java内存模型之线程私有部分</h4><p><strong>（1）程序计数器( Program Counter Register )</strong></p><ul><li><p>当前线程所执行的字节码行号指示器(逻辑)</p></li><li><p>改变计数器的值来选取下一条需要执行的字节码指令</p></li><li><p>和线程是一对一的关系即“线程私有”</p></li><li><p>对Java方法计数,如果是Native方法则计数器值为Undefined</p></li><li><p>不会发生内存泄露</p><p><strong>（2）JAVA虚拟机栈</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfskdms1rj313s0icqa7.jpg" alt=""></p></li></ul><p><strong>局部变量表和操作数栈</strong></p><ul><li>局部变量表:包含方法执行过程中的所有变量</li><li>操作数栈:入栈、出栈、复制、交换、产生消费变量</li></ul><p><strong>示例演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCodeSample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行及反编译命令：</p><pre class=" language-java"><code class="language-java">javac ByteCodeSample<span class="token punctuation">.</span>javajavap <span class="token operator">-</span>verbose ByteCodeSample<span class="token punctuation">.</span><span class="token keyword">class</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsjm3vt3j31z50u0amc.jpg" alt=""></p><p><strong>递归为什么会引发java.lang.StackOverflowError异常？</strong></p><ul><li>递归过深,栈帧数超出虚拟栈深度</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//F(0)=0,F(1)=1,当n>=2的时候，F(n) = F(n-1) + F(n-2),</span>    <span class="token comment" spellcheck="true">//F(2)=F(1) + F(0) = 1, F(3) = F(2) + F(1) = 1+1 = 2</span>    <span class="token comment" spellcheck="true">//F(0)-F(N) 依次为 0,1,1,2,3,5,8,13,21,34...</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfskmtg2jj32380980vi.jpg" alt=""></p><p><strong>虚拟机栈过多会引发java.lang.OutOfMemoryError异常</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfskuey03j30y80fejxn.jpg" alt=""><br><strong>（3）本地方法栈</strong></p><ul><li>与虚拟机栈相似,主要作用于标注了native的方法</li></ul><h4 id="Java内存模型之线程共享部分（不太明白）"><a href="#Java内存模型之线程共享部分（不太明白）" class="headerlink" title="Java内存模型之线程共享部分（不太明白）"></a>Java内存模型之线程共享部分（不太明白）</h4><p><strong>（1）元空间( MetaSpace )</strong></p><p><strong>元空间( MetaSpace )与永久代( PermGen )的区别</strong></p><ul><li>元空间使用本地内存,而永久代使用的是jvm的内存（java.lang.OutOfMemoryError : PermGen space）</li></ul><p><strong>MetaSpace相比PermGen的优势</strong></p><ul><li>字符串常量池存在永久代中,容易出现性能问题和内存溢出</li><li>类和方法的信息大小难易确定,给永久代的大小指定带来困难</li><li>永久代会为GC带来不必要的复杂性</li><li>方便HotSpot与其他JVM如Jrockit的集成</li></ul><p><strong>（2）Java堆（Heap）</strong></p><ul><li>对象实例的分配区域</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsl00b46j30r205s0up.jpg" alt=""></p><ul><li>GC管理的主要区域</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsmhptocj30na08cq4j.jpg" alt=""></p><h3 id="7、JVM三大性能调优参数-Xms-Xmx-Xss的含义"><a href="#7、JVM三大性能调优参数-Xms-Xmx-Xss的含义" class="headerlink" title="7、JVM三大性能调优参数-Xms -Xmx -Xss的含义"></a>7、JVM三大性能调优参数-Xms -Xmx -Xss的含义</h3><p>示例：<br><code>java -Xms128m -Xmx128m -Xss256k -jar xxx.jar</code></p><ul><li>-Xss:规定了每个线程虚拟机栈(堆栈)的大小（一般情况下256k足够，此配置将会影响此进程中并发线程数的大小）</li><li>-Xms:堆的初始值（即该进程刚创建出来时专属Java堆的大小，一旦对象容量超过Java堆的初始容量，将会自动扩容到-Xmx大小）</li><li>-Xmx:堆能达到的最大值（一般将-Xms和-Xmx设置成同样的大小，因为当k不够用要发生扩容时，会发生内存抖动，影响程序运行时的稳定性）</li></ul><p><strong>Java内存模型中堆和栈的区别-内存分配策略</strong></p><ul><li>静态存储:编译时确定每个数据目标在运行时的存储空间需求</li><li>栈式存储:数据区需求在编译时末知,运行时模块入口前确定</li><li>堆式存储:编译时或运行时模块入口都无法确定,动态分配</li></ul><p><strong>Java内存模型中堆和栈的联系</strong></p><ul><li>联系:引用对象、数组时,栈里定义变量保存堆中目标的首地址</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsmcphchj30im0e0mzt.jpg" alt=""><br><strong>Java内存模型中堆和栈的区别</strong></p><ul><li>管理方式:栈自动释放,堆需要GC</li><li>空间大小:栈比堆小</li><li>碎片相关:栈产生的碎片远小于堆</li><li>分配方式:栈支持静态和动态分配,而堆仅支持动态分配</li><li>效率:栈的效率比堆高</li></ul><p><strong>元空间、堆、线程独占部分间的联系—内存角度</strong></p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        HelloWorld hw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hw<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hw<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分析：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsm70qqxj30y00fwwkg.jpg" alt=""></p><p><strong>不同JDK版本之间的intern()方法的区别一JDK6 VS JDK6+</strong></p><pre class=" language-java"><code class="language-java">String S <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span> original<span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> </code></pre><p><strong>JDK6</strong>:当调用intern方法时，如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。否则，将此字符串对象添加到字符串常量池中，并且返回该字符串对象的引用。</p><p><strong>JDK6+</strong>:当调用intern方法时,如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。否则，如果该字符串对象已经存在于Java堆中,则将堆中对此对象的引用添加到字符串常量池中，并且返回该引用;如果堆中.<br>不存在，则在池中创建该字符串并返回其引用。</p><p>永久代错误测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermGenErrTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将返回的随机字符串添加到字符串常量池中</span>            <span class="token function">getRandomString</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mission Complete!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回指定长度的随机字符串</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getRandomString</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//字符串源</span>        String str<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span><span class="token punctuation">;</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Returns a random number between 0 (inclusive) and 61 (exclusive)，str一共62个字符</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 表示获取str字符串中序号对应的字符追加到sb中</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JVM参数配置（Run-&gt;EditConfigurations）：</p><p><code>-XX:MaxPermSize=6M -XX:PermSize=6M</code><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfsm0kt5mj31bj0u0wko.jpg" alt=""></p><p>运行结果：</p><ul><li>jdk6</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfslve5ylj313u06mn4h.jpg" alt=""></p><ul><li>jdk6+(jdk8)</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfslrhkvxj31rw0autas.jpg" alt=""></p><p><strong>不同jdk版本intern()方法代码测试：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InternDifference</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new的string对象在java堆中</span>        s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// “”中声明的字符串直接在常量池中创建</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==比较地址</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JDK6版本的intern()方法：</p><ul><li>运行结果：<pre class=" language-java"><code class="language-java"><span class="token boolean">false</span><span class="token boolean">false</span></code></pre></li><li>解析：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfslmz937j31720o4jxu.jpg" alt=""></li></ul><p>JDK6+版本的intern()方法：</p><ul><li>运行结果：<pre class=" language-java"><code class="language-java"><span class="token boolean">false</span><span class="token boolean">true</span></code></pre></li><li>解析：jdk6+是能把字符串的引用放入常量池中的</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfslj4zr8j30qe0c2dix.jpg" alt=""></p><h3 id="8、指针压缩"><a href="#8、指针压缩" class="headerlink" title="8、指针压缩"></a>8、指针压缩</h3><h4 id="1、指针压缩是如何实现的？如何证明开启指针压缩节省了内存？"><a href="#1、指针压缩是如何实现的？如何证明开启指针压缩节省了内存？" class="headerlink" title="1、指针压缩是如何实现的？如何证明开启指针压缩节省了内存？"></a>1、指针压缩是如何实现的？如何证明开启指针压缩节省了内存？</h4><p>默认情况下，Java虚拟机中对象的起始地址需要对齐至8的倍数（即为内存对齐，对应虚拟机选项 <code>-XX:ObjectAlignmentInBytes</code>，默认值为 8）。如果一个对象用不到8字节，那么空白的那部分空间就白白浪费掉了。这些浪费掉的空间我们称之为对象之间的填充。默认情况下，Java虚拟机中32位的指针可以寻址到2的35次方，也就是32GB的内存空间（超过32位会关闭压缩指针）。在对压缩指针解引用时，我们需要将其左移3位，再加上一个固定的偏移量，便可以寻址到32GB地址空间为64位指针了。此外，我们可以配置刚刚提到的内存对齐选项（<code>-XX:ObjectAlignmentInBytes</code>）来进一步提升内存寻址范围。但是，这也可能增加对象填充，导致压缩指针没有打到节省空间效果。</p><p>在64位的虚拟机中，对象头的标记字段占64位，而类型指针又占64位。也就是说一个对象额外占用的字节就是16个字节。以Integer对象为例，它仅有一个int类型的私有字段，占4个字节。因此，每个Integer的额外开销至少400%，这也就是Java为什么要引入基本数据类型的原因之一。为了减少内存开销，64位Java虚拟机引入了压缩指针概念（对应虚拟机选项<code>-XX:+UseCompressedOops</code>，默认开启），将堆中原本64位的Java对象指针压缩成32位的。这样一来，对象头的类型指针也会被压缩成32位，使得对象头大小从16字节降低为12字节。压缩指针不仅可以作用对象头的类型指针，还可以作用引用类型的字段，引用类型的数组。</p><h4 id="2、开启指针压缩后，一个oop所能表示的最大堆空间是多少？不开呢？"><a href="#2、开启指针压缩后，一个oop所能表示的最大堆空间是多少？不开呢？" class="headerlink" title="2、开启指针压缩后，一个oop所能表示的最大堆空间是多少？不开呢？"></a>2、开启指针压缩后，一个oop所能表示的最大堆空间是多少？不开呢？</h4><p>开启指针压缩后，一个oop所能表示的最大堆空间是32 GB，当最大堆大小超过32 GB时，JVM将自动关闭oop压缩。不开启指针压缩后，一个oop所能表示的最大堆空间是4GB。</p><h4 id="3、如何扩展开启指针压缩后一个oop所能表示的最大堆空间？"><a href="#3、如何扩展开启指针压缩后一个oop所能表示的最大堆空间？" class="headerlink" title="3、如何扩展开启指针压缩后一个oop所能表示的最大堆空间？"></a>3、如何扩展开启指针压缩后一个oop所能表示的最大堆空间？</h4><p>当Java堆大小大于32GB时，也可以使用压缩指针。虽然默认对象对齐是8个字节，但可以使用    <code>-XX：ObjectAlignmentInBytes</code>配置字节值。指定的值应为2的幂，并且必须在8和256的范围内。例如，当对象对齐为16个字节时，通过压缩指针最多可以使用64 GB的堆空间。请注意，随着对齐值的增加，对象之间未使用的空间也会增加。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>启用指针压缩:<code>-XX:+UseCompressedOops</code></p><p>禁止指针压缩:<code>-XX:-UseCompressedOops</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java思维导图总结</title>
      <link href="/2020/04/02/java-si-wei-dao-tu-zong-jie/"/>
      <url>/2020/04/02/java-si-wei-dao-tu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Java基础"><a href="#一、Java基础" class="headerlink" title="一、Java基础"></a>一、Java基础</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsfq2xdcdj30uc0u0b2b.jpg" alt="java基础"></p><h3 id="二、Java容器"><a href="#二、Java容器" class="headerlink" title="二、Java容器"></a>二、Java容器</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsfxipfpxj30u02xwe84.jpg" alt="Java容器"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> Java基础 </tag>
            
            <tag> Java容器 </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识</title>
      <link href="/2020/04/01/shu-ju-ku-zhi-shi/"/>
      <url>/2020/04/01/shu-ju-ku-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="关系型数据库："><a href="#关系型数据库：" class="headerlink" title="关系型数据库："></a>关系型数据库：</h4><ul><li>架构</li><li>索引</li><li>锁</li><li>语法</li><li>理论范式</li></ul><h3 id="如何设计一个关系型数据库？"><a href="#如何设计一个关系型数据库？" class="headerlink" title="如何设计一个关系型数据库？"></a>如何设计一个关系型数据库？</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdfszatlaij30ok0f0n0s.jpg" alt=""></p><h3 id="索引模块"><a href="#索引模块" class="headerlink" title="索引模块"></a>索引模块</h3><p><strong>常见问题</strong></p><ul><li>为什么要使用索引</li></ul><p>快速查询数据，避免全表扫描</p><ul><li>什么样的信息能成为索引</li></ul><p>主键、唯一键以及普通键</p><ul><li>索引的数据结构</li></ul><p>➢生成索引,建立二叉查找树进行二分查找 log(n)</p><p>➢生成索引,建立B-Tree结构进行查找</p><p>➢生成索引,建立B+-Tree结构进行查找</p><p>➢生成索引,建立Hash结构进行查找</p><ul><li>密集索引和稀疏索引的区别</li></ul><p><strong>B-Tree</strong></p><p>定义</p><ul><li>根节点至少包括两个孩子</li><li>树中每个节点最多含有m个孩子( m&gt;=2 )</li><li>除根节点和叶节点外,其他每个节点至少有ceil(m/2)个孩子</li><li>所有叶子节点都位于同一层</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft06ifw7j312209ydo0.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft0b3coyj314w0i4qe3.jpg" alt=""><br><strong>B+树</strong></p><p>是B树的变体,其定义基本与B树相同,除了:</p><ul><li>非叶子节点的子树指针与关键字个数相同</li><li>非叶子节点的子树指针P[i] ,指向关键字值[K[i], K[i+ 1])的子树</li><li>非叶子节点仅用来索引,数据都保存在叶子节点中</li><li>所有叶子节点均有一个链指针指向下一个叶子结点</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft0jy0hpj314e0j87jp.jpg" alt=""><br><strong>结论</strong></p><p>B+ Tree更适合用来做存储索引</p><ul><li>B+树的磁盘读写代价更低</li><li>B+树的查询效率更加稳定</li><li>B+树更有利于对数据库的扫描</li></ul><p><strong>Hash索引|也可以考虑一下</strong></p><p>缺点</p><ul><li>仅仅能满足“=”, “IN”</li><li>不能使用范围查询</li><li>无法被用来避免数据的排序操作</li><li>不能利用部分索引键查询</li><li>不能避免表扫描</li><li>遇到大量Hash值相等的情况后性能并不一定就会比B-Trea索引高</li></ul><p><strong>BitMap索引</strong></p><p>不适合高并发的联机事务处理系统，适合并发较少且统计运算较多的系统</p><p><strong>密集索弓|和稀疏索弓|的区别</strong></p><ul><li>密集索引文件中的每个搜索码值都对应一个索引值</li><li>稀疏索引文件只为索引|码的某些值建立索引项</li></ul><p><strong>额外的知识</strong></p><p>InnoDB</p><ul><li>若一个主键被定义,该主键则作为密集索引</li><li>若没有主键被定义,该表的第一个唯一 非空索引|则作为密集索引</li><li>若不满足以上条件,innodb内部会生成一个隐藏主键(密集索引)</li><li>非主键索弓引|存储相关键位和其对应的主键值,包含两次查找</li></ul><p><strong>衍生出来的问题,以mysq|为例</strong></p><h4 id="1、如何定位并优化慢查询Sq"><a href="#1、如何定位并优化慢查询Sq" class="headerlink" title="1、如何定位并优化慢查询Sq|"></a>1、如何定位并优化慢查询Sq|</h4><p>具体场景具体分析,只提出大致思路</p><ul><li>根据慢日志定位慢查询sq|<pre><code># 查询全局变量show variables like '%quer%';</code></pre></li></ul><h1 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h1><p>set global slow_query_log = on;<br>set global long_query_time = 1;</p><pre><code>![](https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft0wdnx3j31ef0u0n2n.jpg)</code></pre><p>#本次会话mysql的条数<br>show status like ‘%slow_queries%’;</p><pre><code>![](https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdft163ewlj31mk0e8tap.jpg)* 使用explain等工具分析sq|* 修改sq|或者尽量让sq|走索引提升性能#### 2、联合索引的最左匹配原则的成因#### 3、索引是建立得越多越好吗### 存储引擎##### 1、查看MySQL提供的所有存储引擎```mysqlmysql&gt; show engines;</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfkllhtozlj31g40bg46v.jpg" alt=""></p><p>从图中可以看出<code>InnoDB</code>是<code>MySQL</code>当前默认的存储引擎（5.5版本后）。只有<code>InnoDB</code>是事务性存储引擎，支持事务，同时，它有行级锁和外键。</p><h5 id="2、查看表的存储引擎"><a href="#2、查看表的存储引擎" class="headerlink" title="2、查看表的存储引擎"></a>2、查看表的存储引擎</h5><pre class=" language-mysql"><code class="language-mysql">mysql> show table status like "zyctd";</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gfkm1pm1v4j31lo05a77f.jpg" alt=""></p><h3 id="解释一下什么是池化设计思想。什么是数据库连接池-为什么需要数据库连接池"><a href="#解释一下什么是池化设计思想。什么是数据库连接池-为什么需要数据库连接池" class="headerlink" title="解释一下什么是池化设计思想。什么是数据库连接池?为什么需要数据库连接池?"></a><a href="https://snailclimb.gitee.io/javaguide/#/docs/database/MySQL?id=解释一下什么是池化设计思想。什么是数据库连接池为什么需要数据库连接池" target="_blank" rel="noopener">解释一下什么是池化设计思想。什么是数据库连接池?为什么需要数据库连接池?</a></h3><p>池化设计会初始预设资源，解决的问题就是抵消每次获取资源的消耗，如创建线程的开销，获取远程连接的开销等。除了初始化资源，池化设计还包括池子的初始值、池子的活跃值、池子的最大值等，这些特征可以直接映射到java线程池和数据库连接池的成员属性中。</p><p>数据库连接本质就是一个 socket 的连接。数据库服务端还要维护一些缓存和用户权限信息之类的 所以占用了一些内存。我们可以把数据库连接池是看做是维护的数据库连接的缓存，以便将来需要对数据库的请求时可以重用这些连接。为每个用户打开和维护数据库连接，尤其是对动态数据库驱动的网站应用程序的请求，既昂贵又浪费资源。*<em>在连接池中，创建连接后，将其放置在池中，并再次使用它，因此不必建立新的连接。如果使用了所有连接，则会建立一个新连接并将其添加到池中。 *</em>连接池还减少了用户必须等待建立与数据库的连接的时间。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java构建工具思维导图总结</title>
      <link href="/2020/04/01/java-gou-jian-gong-ju-si-wei-dao-tu-zong-jie/"/>
      <url>/2020/04/01/java-gou-jian-gong-ju-si-wei-dao-tu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gdsfelj085j31010u0k5k.jpg" alt="构建工具"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> Java构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树相关算法题</title>
      <link href="/2020/03/30/er-cha-shu-xiang-guan-suan-fa-ti/"/>
      <url>/2020/03/30/er-cha-shu-xiang-guan-suan-fa-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;tqId=11157&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">牛客网</a></p></blockquote><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>根据中序遍历和前序遍历可以确定二叉树，具体过程为：</p><ul><li>根据前序序列第一个结点确定根结点</li><li>根据根结点在中序序列中的位置分割出左右两个子序列</li><li>对左子树和右子树分别递归使用同样的方法继续分解‘</li></ul><p><em>例如：</em></p><p><em>前序序列{1,2,4,7,3,5,6,8} = pre</em></p><p><em>中序序列{4,7,2,1,5,3,8,6} = in</em></p><p><em>1、根据当前前序序列的第一个结点确定根结点，为 1</em></p><p><em>2、找到 1 在中序遍历序列中的位置，为 in[3]</em></p><p><em>3、切割左右子树，则 in[3] 前面的为左子树， in[3] 后面的为右子树</em></p><p><em>4、则切割后的左子树前序序列为：{2,4,7}，切割后的左子树中序序列为：{4,7,2}；切割后的右子树前序序列为：{3,5,6,8}，切割后的右子树中序序列为：{5,3,8,6}</em></p><p><em>5、对子树分别使用同样的方法分解</em></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for binary tree * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> in<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>in<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在中序中找到前序的根</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 左子树，注意 copyOfRange 函数，左闭右开</span>                root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 右子树，注意 copyOfRange 函数，左闭右开</span>                root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h2 id="二叉树的下一个结点"><a href="#二叉树的下一个结点" class="headerlink" title="二叉树的下一个结点"></a>二叉树的下一个结点</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><p><a href="https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&amp;tqId=11210&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">牛客网</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeLinkNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    TreeLinkNode left <span class="token operator">=</span> null<span class="token punctuation">;</span>    TreeLinkNode right <span class="token operator">=</span> null<span class="token punctuation">;</span>    TreeLinkNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>  #指向父结点的指针    <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解法1-还原二叉树"><a href="#解法1-还原二叉树" class="headerlink" title="解法1 还原二叉树"></a>解法1 还原二叉树</h3><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><p>既然给了二叉树的某个结点，且二叉树存储着指向父结点的指针（next），那我们可以先找到根节点，再对树进行中序遍历，最后根据中序遍历结果找到给定结点的下一结点。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class TreeLinkNode {    int val;    TreeLinkNode left = null;    TreeLinkNode right = null;    TreeLinkNode next = null;    TreeLinkNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> ArrayList<span class="token operator">&lt;</span>TreeLinkNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeLinkNode <span class="token function">GetNext</span><span class="token punctuation">(</span>TreeLinkNode pNode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TreeLinkNode par <span class="token operator">=</span> pNode<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先找根结点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>par<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            par <span class="token operator">=</span> par<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//再进行中序遍历</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>par<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回下一个结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> null <span class="token operator">:</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//二叉树中序遍历</span>    <span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>TreeLinkNode pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">InOrder</span><span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">InOrder</span><span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h3 id="解法2-直接找下一结点"><a href="#解法2-直接找下一结点" class="headerlink" title="解法2 直接找下一结点"></a>解法2 直接找下一结点</h3><h4 id="思路分析1"><a href="#思路分析1" class="headerlink" title="思路分析1"></a>思路分析1</h4><p>以该二叉树为例，中序遍历为：{D,B,H,E,I,A,F,C,G}</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd2if1emo1j30do0bs0ve.jpg" alt="二叉树"></p><p>仔细观察，可以把中序下一结点归为几种类型：</p><p>有右子树，下一结点是右子树中的最左结点，例如 B，下一结点是 H。</p><p>无右子树，且结点是该结点父结点的左子树，则下一结点是该结点的父结点，例如 H，下一结点是 E。</p><p>无右子树，且结点是该结点父结点的右子树，则我们一直沿着父结点追朔，直到找到某个结点是其父结点的左子树，如果存在这样的结点，那么这个结点的父结点就是我们要找的下一结点。例如 I，下一结点是 A；例如 G，并没有符合情况的结点，所以 G 没有下一结点。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class TreeLinkNode {    int val;    TreeLinkNode left = null;    TreeLinkNode right = null;    TreeLinkNode next = null;    TreeLinkNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeLinkNode <span class="token function">GetNext</span><span class="token punctuation">(</span>TreeLinkNode pNode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 1.有右子树，下一结点是右子树中的最左结点</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         TreeLinkNode pRight <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>pRight<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             pRight <span class="token operator">=</span> pRight<span class="token punctuation">.</span>left<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> pRight<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 2.无右子树，且结点是该结点父结点的左子树，则下一结点是该结点的父结点</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>left <span class="token operator">==</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 3.无右子树，且结点是该结点父结点的右子树，则我们一直沿着父结点追朔，直到找到</span>     <span class="token comment" spellcheck="true">// 某个结点是其父结点的左子树，如果存在这样的结点，那么这个结点的父结点就是我们要找的下一结点</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         TreeLinkNode pNext <span class="token operator">=</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>pNext<span class="token punctuation">.</span>next <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pNext<span class="token punctuation">.</span>next<span class="token punctuation">.</span>right <span class="token operator">==</span> pNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>             pNext <span class="token operator">=</span> pNext<span class="token punctuation">.</span>next<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> pNext<span class="token punctuation">.</span>next<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="思路分析2"><a href="#思路分析2" class="headerlink" title="思路分析2"></a>思路分析2</h4><p>我们先来回顾一下中序遍历的过程：先遍历树的左子树，再遍历根节点，最后再遍历右子树。所以最左节点是中序遍历的第一个节点。</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeLinkNode <span class="token function">GetNext</span><span class="token punctuation">(</span>TreeLinkNode pNode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeLinkNode node <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                           <span class="token punctuation">}</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token keyword">while</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 TreeLinkNode parent <span class="token operator">=</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> parent<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h2 id="二叉树镜像"><a href="#二叉树镜像" class="headerlink" title="二叉树镜像"></a>二叉树镜像</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><p><a href="https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&amp;tqId=11171&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">牛客网</a></p><pre><code>二叉树的镜像定义：源二叉树         8       /  \      6   10     / \  / \    5  7 9 11    镜像二叉树        8       /  \      10   6     / \  / \    11 9 7  5</code></pre></blockquote><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>交换左右子树的节点，然后递归调用该方法。</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Mirror</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Mirror</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Mirror</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode node <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><p><a href="https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&amp;tqId=11211&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">牛客网</a></p></blockquote><h3 id="解法1-递归"><a href="#解法1-递归" class="headerlink" title="解法1 递归"></a>解法1 递归</h3><h4 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h4><p>根节点的左右子树相同，左子树的左子树和右子树的右子树相同，左子树的右子树和右子树的左子树相同即可。</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>TreeNode pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>TreeNode left<span class="token punctuation">,</span> TreeNode right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> null <span class="token operator">||</span> right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解法2-非递归"><a href="#解法2-非递归" class="headerlink" title="解法2 非递归"></a>解法2 非递归</h3><h4 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h4><p>采用栈或队列存取各级子树根节点。</p><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">isSymmetrical</span><span class="token punctuation">(</span>TreeNode pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">==</span> null<span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode left <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> left <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> null <span class="token operator">||</span> left <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>val <span class="token operator">!=</span> left<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="104-二叉树的高度"><a href="#104-二叉树的高度" class="headerlink" title="104 二叉树的高度"></a>104 二叉树的高度</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二叉树，找出其最大深度。</p><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">LeetCode</a></p></blockquote><h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数，使用递归解决问题。使用DFS（深度优先搜索）策略。</p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><table><thead><tr><th>时间复杂度</th><th>O(N) N为结点数</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong><em>O</em>(log(<em>N</em>))</strong></td></tr></tbody></table><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110 平衡二叉树"></a>110 平衡二叉树</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>一棵高度平衡二叉树定义为：一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。</p><p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/description/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>给定二叉树 [3,9,20,null,null,15,7] 3/ \9  20 /  \15   7返回 true </code></pre></blockquote><h3 id="解法1-自顶向下（暴力法）"><a href="#解法1-自顶向下（暴力法）" class="headerlink" title="解法1 自顶向下（暴力法）"></a>解法1 自顶向下（暴力法）</h3><blockquote><p>构造一个获取当前节点最大深度的方法 depth(root) ，通过比较此子树的左右子树的最大高度差abs(depth(root.left) - depth(root.right))，来判断此子树是否是二叉平衡树。若树的所有子树都平衡时，此树才平衡。</p><p>此方法容易想到，但会产生大量重复计算，时间复杂度较高。</p></blockquote><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(nlgn)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><h3 id="解法2-自底向上"><a href="#解法2-自底向上" class="headerlink" title="解法2 自底向上"></a>解法2 自底向上</h3><blockquote><p>对二叉树做先序遍历，从底至顶返回子树最大高度，若判定某子树不是平衡树则 “剪枝” ，直接向上返回。</p></blockquote><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><h3 id="在IntelliJ-IDEA中测试"><a href="#在IntelliJ-IDEA中测试" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 平衡二叉树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">isBalancedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自顶向下     * @param root     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自底向上     * @param root     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isBalancedDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">isBalancedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean flag <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>true</code></pre><h2 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543 二叉树的直径"></a>543 二叉树的直径</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p><p><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/description/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>给定二叉树 [1,2,3,4,5]           1      / \     2   3    / \        4   5    返回 3 </code></pre></blockquote><h3 id="解题思路（深度优先搜索）"><a href="#解题思路（深度优先搜索）" class="headerlink" title="解题思路（深度优先搜索）"></a>解题思路（深度优先搜索）</h3><blockquote><p>定义一个全局变量 res，用来记录最大直径。使用 dfs(node) 遍历所有的节点。</p><p>dfs(node) 的作用是：找出以 node 为根节点的二叉树的最大深度，将根节点的深度定义为 1。res 取值为以经过 root，左右子树的最大深度之和 leftDepth + rigthDepth。通过递归，找到 res 的最大值。</p></blockquote><h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> leftDepth <span class="token operator">+</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)，其中 n 为二叉树的节点数</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(Height)，其中 Height为二叉树的高度</strong></td></tr></tbody></table><blockquote><p>由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height)O(Height) </p></blockquote><h3 id="在IntelliJ-IDEA中测试-1"><a href="#在IntelliJ-IDEA中测试-1" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 二叉树的直径 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiameterOfBinaryTreeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> leftDepth <span class="token operator">+</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DiameterOfBinaryTreeDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiameterOfBinaryTreeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>3</code></pre><h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226 翻转二叉树"></a>226 翻转二叉树</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>翻转一棵二叉树。</p><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/description/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>输入：  4/   \2     7/ \   / \1   3 6   9输出：  4/   \7     2/ \   / \9   6 3   1</code></pre></blockquote><h3 id="解法1-递归法（深度优先遍历）"><a href="#解法1-递归法（深度优先遍历）" class="headerlink" title="解法1 递归法（深度优先遍历）"></a>解法1 递归法（深度优先遍历）</h3><blockquote><p>交换左右节点，然后再递归的交换左节点，右节点。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdhsc73eosg30lh0f34am.gif" alt="递归法"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/</a></p></blockquote><h4 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交换左右节点</span>        TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)，其中 n 为二叉树的节点数</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(Height)，其中 Height为二叉树的高度</strong></td></tr></tbody></table><h3 id="解法2-迭代法（广度优先遍历）"><a href="#解法2-迭代法（广度优先遍历）" class="headerlink" title="解法2 迭代法（广度优先遍历）"></a>解法2 迭代法（广度优先遍历）</h3><blockquote><p>先将根节点放入到队列中，然后不断的迭代队列中的元素。对当前元素调换其左右子树的位置，然后：</p><ul><li>判断其左子树是否为空，不为空就放入队列中</li><li>判断其右子树是否为空，不为空就放入队列中</li></ul></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdhscp47zog30p50jgarq.gif" alt="迭代法"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree/solution/dong-hua-yan-shi-liang-chong-shi-xian-226-fan-zhua/</a></p></blockquote><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将二叉树中的节点逐层放入队列中，再迭代处理队列中的元素</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每次都从队列中拿一个节点，并交换这个节点的左右子树</span>            TreeNode tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果当前节点的左子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果当前节点的右子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回处理完的根节点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><h3 id="在IntelliJ-IDEA中测试-2"><a href="#在IntelliJ-IDEA中测试-2" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 翻转二叉树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertTreeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">treeToArray</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token function">treeToArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">treeToArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归法（深度优先遍历）     * @param root     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交换左右节点</span>        TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 迭代法（广度优先遍历）     * @param root     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将二叉树中的节点逐层放入队列中，再迭代处理队列中的元素</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每次都从队列中拿一个节点，并交换这个节点的左右子树</span>            TreeNode tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>left <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果当前节点的左子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果当前节点的右子树不为空，则放入队列等待后续处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回处理完的根节点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InvertTreeDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvertTreeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode invertTree <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">treeToArray</span><span class="token punctuation">(</span>invertTree<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>[4, 7, 2, 7, 9, 6, 9, 6, 2, 3, 1, 3, 1]</code></pre><h2 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94 二叉树的中序遍历"></a>94 二叉树的中序遍历</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二叉树，返回它的中序遍历。</p><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>输入: [1,null,2,3]1 \  2 /3输出: [1,3,2]</code></pre></blockquote><h3 id="解法1-递归法"><a href="#解法1-递归法" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h3><blockquote><p>使用经典的递归法实现，编写一个辅助函数实现递归。</p></blockquote><h4 id="实现代码-3"><a href="#实现代码-3" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>最坏情况下需要空间O(n)，平均情况为O(logn)</strong></td></tr></tbody></table><h3 id="解法2-迭代法"><a href="#解法2-迭代法" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h3><blockquote><p>基于栈的遍历</p></blockquote><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                    root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-7"><a href="#复杂度分析-7" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><h3 id="解法3-颜色标记法"><a href="#解法3-颜色标记法" class="headerlink" title="解法3 颜色标记法"></a>解法3 颜色标记法</h3><blockquote><p>使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色。<br>如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。<br>如果遇到的节点为灰色，则将节点的值输出。</p></blockquote><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorNode</span> <span class="token punctuation">{</span>        TreeNode root<span class="token punctuation">;</span>        String color<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">ColorNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>ColorNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            ColorNode colorNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-8"><a href="#复杂度分析-8" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><h3 id="在IntelliJ-IDEA中测试-3"><a href="#在IntelliJ-IDEA中测试-3" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 二叉树的中序遍历 * 三种方法：1、递归法 2、迭代法 3、颜色标记法 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">inorderTraversalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1.递归法     * @param root     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.非递归版     * 用栈实现，迭代法     * @param root     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 3.颜色标记法     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorNode</span> <span class="token punctuation">{</span>        TreeNode root<span class="token punctuation">;</span>        String color<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">ColorNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>ColorNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            ColorNode colorNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorNode</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colorNode<span class="token punctuation">.</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数组转化为树结构     * @param array     * @param index     * @return     */</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        inorderTraversalDemo it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">inorderTraversalDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>[1, 3, 2]</code></pre><h2 id="94-合并二叉树"><a href="#94-合并二叉树" class="headerlink" title="94 合并二叉树"></a>94 合并二叉树</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个二叉树，你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><p><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/description/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>输入:     Tree 1                     Tree 2                         1                         2                                   / \                       / \                                 3   2                     1   3                            /                           \   \                         5                             4   7                  输出: 合并后的树:         3        / \       4   5      / \   \      5   4   7</code></pre></blockquote><h3 id="解法1-递归法-1"><a href="#解法1-递归法-1" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h3><blockquote><p>前序遍历二叉树，再依次把访问到的节点值相加，题目没有说不能改变树的值和结构，我们不用再创建新的节点了，直接将树2合并到树1上再返回树就可以了。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdn9ucp6vng30zk0k0kep.gif" alt="recursion.gif"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/</a></p></blockquote><h4 id="实现代码-4"><a href="#实现代码-4" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       t1<span class="token punctuation">.</span>val <span class="token operator">+=</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>       t1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       t1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-9"><a href="#复杂度分析-9" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(h)，h为树的高度</strong></td></tr></tbody></table><h3 id="解法2-迭代法-1"><a href="#解法2-迭代法-1" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h3><blockquote><p>借助队列来实现广度优先遍历算法，只要两颗树的左节点都不为null，就把将他们放入队列中；同理只要两棵树的右节点都不为null了，也将他们放入队列中。然后我们不断的从队列中取出节点，把他们相加。</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdnb4svntzg30zk0k0ki9.gif" alt="iterator.gif"></p><blockquote><p>图片来源：<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/</a></p></blockquote><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>       queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           TreeNode r1 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           TreeNode r2 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           r1<span class="token punctuation">.</span>val <span class="token operator">+=</span> r2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               r1<span class="token punctuation">.</span>left <span class="token operator">=</span> r2<span class="token punctuation">.</span>left<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>               queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               r1<span class="token punctuation">.</span>right <span class="token operator">=</span> r2<span class="token punctuation">.</span>right<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-10"><a href="#复杂度分析-10" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><h3 id="在IntelliJ-IDEA中测试-4"><a href="#在IntelliJ-IDEA中测试-4" class="headerlink" title="在IntelliJ IDEA中测试"></a>在IntelliJ IDEA中测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: cyh * @Description: 合并二叉树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeTreesDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">;</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode <span class="token function">arrayToTree</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归法     * @param t1     * @param t2     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t1<span class="token punctuation">.</span>val <span class="token operator">+=</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        t1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 迭代法     * @param t1     * @param t2     * @return     */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null <span class="token operator">||</span> t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t1 <span class="token operator">==</span> null <span class="token operator">?</span> t2 <span class="token operator">:</span> t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode r1 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode r2 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r1<span class="token punctuation">.</span>val <span class="token operator">+=</span> r2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r1<span class="token punctuation">.</span>left <span class="token operator">=</span> r2<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r2<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r1<span class="token punctuation">.</span>right <span class="token operator">=</span> r2<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MergeTreesDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeTreesDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        TreeNode root1 <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root2 <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方便断点调试</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112 路径总和"></a>112 路径总和</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noopener">LeetCode</a></p><pre><code>给定如下二叉树，以及目标和 sum = 22                           5             / \            4   8           /   / \          11  13  4         /  \      \        7    2      1</code></pre></blockquote><h3 id="解法1-递归法-2"><a href="#解法1-递归法-2" class="headerlink" title="解法1 递归法"></a>解法1 递归法</h3><blockquote><p>遍历整棵树，如果当前节点不是叶子，对它的所有孩子节点，递归调用 hasPathSum 函数，其中 sum 值减去当前节点的权值；如果当前节点是叶子，检查 sum 值是否为 0，也就是是否找到了给定的目标和。</p></blockquote><h4 id="实现代码-5"><a href="#实现代码-5" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum <span class="token operator">=</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-11"><a href="#复杂度分析-11" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>最坏O(h)，最好O(log(n))，h为树的高度</strong></td></tr></tbody></table><h3 id="解法2-迭代法-2"><a href="#解法2-迭代法-2" class="headerlink" title="解法2 迭代法"></a>解法2 迭代法</h3><blockquote><p>使用深度优先遍历进行迭代，通过辅助栈来实现。</p></blockquote><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stackTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stackSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        stackTree<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        stackSum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackTree<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           TreeNode node <span class="token operator">=</span> stackTree<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Integer currSum <span class="token operator">=</span> stackSum<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>currSum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               stackTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                stackSum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currSum <span class="token operator">-</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               stackTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>               stackSum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currSum <span class="token operator">-</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="复杂度分析-12"><a href="#复杂度分析-12" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(n)</strong></td></tr></tbody></table><blockquote><p>参考：</p><p>CyC：<a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes</a></p><p>牛客网：<a href="https://www.nowcoder.com/questionTerminal" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal</a></p><p>力扣：<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java垃圾回收机制</title>
      <link href="/2020/03/27/java-la-ji-hui-shou-ji-zhi/"/>
      <url>/2020/03/27/java-la-ji-hui-shou-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、判定对象是否为垃圾的算法"><a href="#一、判定对象是否为垃圾的算法" class="headerlink" title="一、判定对象是否为垃圾的算法"></a>一、判定对象是否为垃圾的算法</h2><h3 id="被判定为垃圾的标准"><a href="#被判定为垃圾的标准" class="headerlink" title="被判定为垃圾的标准"></a>被判定为垃圾的标准</h3><p>不再被引用的对象称为垃圾</p><h3 id="1、引用计数算法"><a href="#1、引用计数算法" class="headerlink" title="1、引用计数算法"></a>1、引用计数算法</h3><p><strong>判断对象的引用数量</strong></p><ul><li>通过判断对象的引用数量来决定对象是否可以被回收</li><li>每个对象实例都有一个引用计数器,被引用则+1,完成引用则-1</li><li>任何引用计数为0的对象实例可以被当作垃圾收集</li></ul><p><strong>优缺点：</strong></p><ul><li>优点:执行效率高,程序执行受影响较小</li><li>缺点:无法检测出循环引用的情况,导致内存泄露</li></ul><h3 id="2、可达性分析算法"><a href="#2、可达性分析算法" class="headerlink" title="2、可达性分析算法"></a>2、可达性分析算法</h3><p>通过判断对象的引用链是否可达来决定对象是否可以被回收</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc55ls98uj30sg0lcdjj.jpg" alt=""></p><blockquote><p>图片来源：<a href="https://blog.csdn.net/xiaohulunb/article/details/103837408" target="_blank" rel="noopener">https://blog.csdn.net/xiaohulunb/article/details/103837408</a></p></blockquote><p><strong>可以作为GC Root的对象</strong></p><ul><li>虚拟机栈中引用的对象(栈帧中的本地变量表)</li><li>方法区中的常量引用的对象</li><li>方法区中的类静态属性引用的对象</li><li>本地方法栈中JNI ( Native方法)的引用对象</li><li>活跃线程的引用对象</li></ul><h2 id="二、谈谈你了解的垃圾回收算法"><a href="#二、谈谈你了解的垃圾回收算法" class="headerlink" title="二、谈谈你了解的垃圾回收算法"></a>二、谈谈你了解的垃圾回收算法</h2><h3 id="标记-清除算法-Mark-and-Sweep"><a href="#标记-清除算法-Mark-and-Sweep" class="headerlink" title="标记-清除算法(Mark and Sweep)"></a>标记-清除算法(Mark and Sweep)</h3><ul><li>标记:从根集合进行扫描,对存活的对象进行标记</li><li>清除:对堆内存从头到尾进行线性遍历,回收不可达对象内存</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc6xj4sasj31qk0syabx.jpg" alt=""></p><h3 id="复制算法-Copying"><a href="#复制算法-Copying" class="headerlink" title="复制算法(Copying)"></a>复制算法(Copying)</h3><ul><li>分为对象面和空闲面</li><li>对象在对象面上创建</li><li>存活的对象被从对象面复制到空闲面</li><li>将对象面所有对象内存清除</li></ul><blockquote><p>适用于对象存活率低的场景，一般用在老年代中</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc78n2ry2j31gw0u00v7.jpg" alt=""></p><ul><li><p>解决碎片化问题</p></li><li><p>顺序分配内存，简单高效</p></li><li><p>适用于对象存活率低的场景</p></li></ul><h3 id="标记-整理算法-Compacting"><a href="#标记-整理算法-Compacting" class="headerlink" title="标记-整理算法(Compacting)"></a>标记-整理算法(Compacting)</h3><ul><li>标记:从根集合进行扫描,对存活的对象进行标记</li><li>清除:移动所有存活的对象,且按照内存地址次序依次排列,然后<br>将末端内存地址以后的内存全部回收。</li></ul><blockquote><p>适用于对象存活率高的场景</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc7a7ok2vj31ig0pk75p.jpg" alt=""></p><blockquote><p>图片来源：<a href="http://www.justdojava.com/2019/12/14/jvm-gc/" target="_blank" rel="noopener">http://www.justdojava.com/2019/12/14/jvm-gc/</a></p></blockquote><ul><li>避免内存的不连续性</li><li>不用设置两块内存互换</li><li>适用于存活率高的场景</li></ul><h3 id="分代收集算法-Generational-Collector"><a href="#分代收集算法-Generational-Collector" class="headerlink" title="分代收集算法(Generational Collector)"></a>分代收集算法(Generational Collector)</h3><ul><li>垃圾回收算法的组合拳</li><li>按照对象生命周期的不同划分区域以采用不同的垃圾回收算法</li></ul><p><strong>目的</strong>：提高JVM回收效率</p><p><strong>jdk8以前：</strong></p><p>永久代用于存放静态文件，如Java类、方法等。该区域回收与上述“方法区内存回收”一致。但是永久代是使用的堆内存，如果创建对象太多容易造成内存溢出OOM（OutOfMemory）。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc7wtfe4dj30u00gfwg1.jpg" alt="jdk6、jdk7"></p><p><strong>jdk8以后：</strong></p><p>jdk8以后便取消了永久代的说法，而是用元空间代替，所存内容没有变化，只是存储的地址有所改变，元空间使用的是主机内存，而不是堆内存，元空间的大小限制受主机内存限制，这样有效的避免了创建大量对象时发生内存溢出的情况。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc82yywmvj30mc0a6n0f.jpg" alt="jdk8以后"></p><blockquote><p>图片来源：<a href="http://blog.beifengtz.com/article/51" target="_blank" rel="noopener">http://blog.beifengtz.com/article/51</a></p></blockquote><h2 id="三、GC"><a href="#三、GC" class="headerlink" title="三、GC"></a>三、GC</h2><h3 id="GC的分类"><a href="#GC的分类" class="headerlink" title="GC的分类"></a>GC的分类</h3><ul><li>Minor GC</li><li>Full GC</li></ul><h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><blockquote><p>尽可能快速地收集掉那些生命周期短的对象</p></blockquote><ul><li><p>Eden区</p></li><li><p>两个Survivor区</p></li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc8iiy4i8j30ms0aj3zt.jpg" alt=""></p><blockquote><p>图片来源：<a href="http://blog.beifengtz.com/article/51" target="_blank" rel="noopener">http://blog.beifengtz.com/article/51</a></p></blockquote><h4 id="对象如何晋升到老年代？"><a href="#对象如何晋升到老年代？" class="headerlink" title="对象如何晋升到老年代？"></a>对象如何晋升到老年代？</h4><ul><li>经历一定Minor次数依然存活的对象</li><li>Survivor区中存放不下的对象</li><li>新生成的大对象( -XX: + PretenuerSizeThreshold )</li></ul><h4 id="常用的调优参数"><a href="#常用的调优参数" class="headerlink" title="常用的调优参数"></a>常用的调优参数</h4><ul><li>-XX:SurvivorRatio : Eden和Survivor的比值,默认8 : 1</li><li>-XX:NewRatio :老年代和年轻代内存大小的比例（通过JVM调优参数决定）</li><li>-XX:MaxTenuringThreshold :对象从年轻代晋升到老生代经过<br>GC次数的最大阈值</li></ul><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><blockquote><p>存放生命周期较长的对象</p></blockquote><ul><li>Full GC和Major GC</li><li>Full GC比Minor GC慢,但执行频率低</li></ul><h4 id="触发Full-GC的条件"><a href="#触发Full-GC的条件" class="headerlink" title="触发Full GC的条件"></a>触发Full GC的条件</h4><ul><li>老年代空间不足</li><li>永久代空间不足</li><li>CMS GC时出现promotion failed ,<br>concurrent mode failure</li><li>Minor GC晋升到老年代的平均大小大于老年代的剩余空间</li><li>System.gc()</li><li>使用RMI来进行RPC或管理的JDK应用,每小时执行1次Full GC</li></ul><h3 id="Stop-the-World"><a href="#Stop-the-World" class="headerlink" title="Stop-the-World"></a>Stop-the-World</h3><ul><li>JVM由于要执行GC而停止了应用程序的执行</li><li>任何一种GC算法中都会发生</li><li>多数GC优化通过减少Stop-the -world发生的时间来提高程序性能（高吞吐，低停顿）</li></ul><h3 id="Safepoint"><a href="#Safepoint" class="headerlink" title="Safepoint"></a>Safepoint</h3><ul><li>分析过程中对象引用关系不会发生变化的点</li><li>产生Safepoint的地方:方法调用;循环跳转;异常跳转等</li><li>安全点数量得适中.</li></ul><h3 id="JVM的运行模式"><a href="#JVM的运行模式" class="headerlink" title="JVM的运行模式"></a>JVM的运行模式</h3><ul><li>Server</li><li>Client</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc8ujffu8j30vk076gsd.jpg" alt=""></p><h2 id="三、常见的垃圾收集器"><a href="#三、常见的垃圾收集器" class="headerlink" title="三、常见的垃圾收集器"></a>三、常见的垃圾收集器</h2><p>垃圾收集器之间的联系<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc8laooupj30e00b5aag.jpg" alt="HotSpot虚拟机垃圾收集器"></p><blockquote><p>图片来源：<a href="http://www.worldwarner.com/m/view.php?aid=18114" target="_blank" rel="noopener">http://www.worldwarner.com/m/view.php?aid=18114</a></p></blockquote><h3 id="年轻代常见的垃圾收集器"><a href="#年轻代常见的垃圾收集器" class="headerlink" title="年轻代常见的垃圾收集器"></a>年轻代常见的垃圾收集器</h3><h4 id="Serial收集器-XX-UseSerialGC-复制算法"><a href="#Serial收集器-XX-UseSerialGC-复制算法" class="headerlink" title="Serial收集器( -XX:+UseSerialGC ,复制算法)"></a>Serial收集器( -XX:+UseSerialGC ,复制算法)</h4><ul><li>单线程收集,进行垃圾收集时,必须暂停所有工作线程</li><li>简单高效, Client模式下默认的年轻代收集器</li></ul><h4 id="ParNew收集器-XX-UseParNewGC-复制算法"><a href="#ParNew收集器-XX-UseParNewGC-复制算法" class="headerlink" title="ParNew收集器( -XX:+UseParNewGC ,复制算法)"></a>ParNew收集器( -XX:+UseParNewGC ,复制算法)</h4><ul><li>多线程收集,其余的行为、特点和Serial收集器一样</li><li>单核执行效率不如Serial ,在多核下执行才有优势</li></ul><h4 id="Parallel-Scavenge收集器-XX-UseParallelGC-复制算法"><a href="#Parallel-Scavenge收集器-XX-UseParallelGC-复制算法" class="headerlink" title="Parallel Scavenge收集器( -XX:+UseParallelGC ,复制算法)"></a>Parallel Scavenge收集器( -XX:+UseParallelGC ,复制算法)</h4><ul><li>比起关注用户线程停顿时间,更关注系统的吞吐量【吞吐量=运行用户代码时间/ (运行用户代码时间+垃圾收集时间)】</li><li>在多核下执行才有优势, Server模式下默认的年轻代收集器</li></ul><h3 id="老年代常见的垃圾收集器"><a href="#老年代常见的垃圾收集器" class="headerlink" title="老年代常见的垃圾收集器"></a>老年代常见的垃圾收集器</h3><h4 id="Serial-Old收集器-XX-UseSerialOldGC-标记-整理算法"><a href="#Serial-Old收集器-XX-UseSerialOldGC-标记-整理算法" class="headerlink" title="Serial Old收集器( -XX:+UseSerialOldGC ,标记-整理算法)"></a>Serial Old收集器( -XX:+UseSerialOldGC ,标记-整理算法)</h4><ul><li>单线程收集,进行垃圾收集时,必须暂停所有工作线程</li><li>简单高效, Client模式下默认的老年代收集器</li></ul><h4 id="Parallel-Old收集器-XX-UseParallelOldGC-标记-整理算法"><a href="#Parallel-Old收集器-XX-UseParallelOldGC-标记-整理算法" class="headerlink" title="Parallel Old收集器( -XX : +UseParallelOldGC ,标记-整理算法)"></a>Parallel Old收集器( -XX : +UseParallelOldGC ,标记-整理算法)</h4><ul><li>多线程,吞吐量优先</li></ul><h4 id="CMS收集器-XX-UseConcMarkSweepGC-标记-清除算法"><a href="#CMS收集器-XX-UseConcMarkSweepGC-标记-清除算法" class="headerlink" title="CMS收集器( -XX:+UseConcMarkSweepGC ,标记-清除算法)"></a>CMS收集器( -XX:+UseConcMarkSweepGC ,标记-清除算法)</h4><ul><li><strong>初始标记: stop-the-world</strong></li><li>并发标记:并发追溯标记,程序不会停顿</li><li>并发预清理:查找执行并发标记阶段从年轻代晋升到老年代的对象</li><li><strong>重新标记:暂停虚拟机,扫描CMS堆中的剩余对象</strong></li><li>并发清理:清理垃圾对象,程序不会停顿</li><li>并发重置:重置CMS收集器的数据结构</li></ul><h4 id="G1收集器-XX-UseG1GC-复制-标记-整理算法"><a href="#G1收集器-XX-UseG1GC-复制-标记-整理算法" class="headerlink" title="G1收集器( -XX:+UseG1GC,复制+标记-整理算法)"></a>G1收集器( -XX:+UseG1GC,复制+标记-整理算法)</h4><p><strong>Garbage First收集器的特点</strong></p><ul><li>并行和并发</li><li>分代收集</li><li>空间整合</li><li>可预测的停顿</li></ul><p><strong>Garbage First收集器</strong></p><ul><li>将整个Java堆内存划分成多个大小相等的Region</li><li>年轻代和老年代不再物理隔离</li></ul><h2 id="GC相关的面试题"><a href="#GC相关的面试题" class="headerlink" title="GC相关的面试题"></a>GC相关的面试题</h2><h3 id="1、Object的finalize-方法的作用是否与C-的析构函数作用相同？"><a href="#1、Object的finalize-方法的作用是否与C-的析构函数作用相同？" class="headerlink" title="1、Object的finalize(方法的作用是否与C+ +的析构函数作用相同？"></a>1、Object的finalize(方法的作用是否与C+ +的析构函数作用相同？</h3><ul><li>与C++的析构函数不同,析构函数调用确定,而它的是不确定的</li><li>将未被引用的对象放置于F-Queue队列</li><li>方法执行随时可能会被终止</li><li>给予对象最后一次重生的机会</li></ul><p><strong>代码示例：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>gc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Finalization finalization<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finalized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        finalization <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Finalization f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Finalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"First print: "</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        f <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 休息一段时间，让上面的垃圾回收线程执行完成</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Second print: "</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>finalization<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>First print: com.interview.javabasic.jvm.gc.Finalization@511d50c0FinalizedSecond print: nullcom.interview.javabasic.jvm.gc.Finalization@511d50c0</code></pre><h3 id="2、Java中的强引用-软引用-弱引用-虚引用有什么用？"><a href="#2、Java中的强引用-软引用-弱引用-虚引用有什么用？" class="headerlink" title="2、Java中的强引用,软引用,弱引用,虚引用有什么用？"></a>2、Java中的强引用,软引用,弱引用,虚引用有什么用？</h3><h4 id="强引用-Strong-Reference"><a href="#强引用-Strong-Reference" class="headerlink" title="强引用( Strong Reference )"></a>强引用( Strong Reference )</h4><ul><li>最普遍的引用: <code>Object obj=new Object()</code></li><li>抛出OutOfMemoryError终止程序也不会回收具有强引用的对象</li><li>通过将对象设置为null来弱化引用,使其被回收</li></ul><h4 id="软引用-Soft-Reference"><a href="#软引用-Soft-Reference" class="headerlink" title="软引用( Soft Reference )"></a>软引用( Soft Reference )</h4><ul><li>对象处在有用但非必须的状态</li><li>只有当内存空间不足时, GC会回收该引用的对象的内存</li><li>可以用来实现高速缓存</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强引用</span>SoftReference<span class="token operator">&lt;</span>String<span class="token operator">></span> softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//软引用</span></code></pre><h4 id="弱引用-Weak-Reference"><a href="#弱引用-Weak-Reference" class="headerlink" title="弱引用( Weak Reference )"></a>弱引用( Weak Reference )</h4><ul><li>非必须的对象,比软引用更弱一些</li><li>GC时会被回收</li><li>被回收的概率也不大,因为GC线程优先级比较低</li><li>适用于引用偶尔被使用且不影响垃圾收集的对象</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强引用</span>WeakReference<span class="token operator">&lt;</span>String<span class="token operator">></span> softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//弱引用</span></code></pre><h4 id="虚引用-PhantomReference"><a href="#虚引用-PhantomReference" class="headerlink" title="虚引用( PhantomReference )"></a>虚引用( PhantomReference )</h4><ul><li>不会决定对象的生命周期</li><li>任何时候都可能被垃圾收集器回收</li><li>跟踪对象被垃圾收集器回收的活动,起哨兵作用</li><li>必须和引用队列ReferenceQueue联合使用</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强引用</span>ReferenceQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PhantomReference reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="比较："><a href="#比较：" class="headerlink" title="比较："></a>比较：</h3><p><strong>强引用&gt;软引用&gt;弱引用&gt;虚引用</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc8vdqam2j312w0guq8l.jpg" alt=""><br><strong>类层次结构：</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdc8vpkksaj31320u0wib.jpg" alt=""></p><h4 id="引用队列-ReferenceQueue-7-6-不太明白"><a href="#引用队列-ReferenceQueue-7-6-不太明白" class="headerlink" title="引用队列( ReferenceQueue ) 7-6 (不太明白)"></a>引用队列( ReferenceQueue ) 7-6 (不太明白)</h4><ul><li>无实际存储结构,存储逻辑依赖于内部节点之间的关系来表达</li><li>存储关联的且被GC的软引用，弱引用以及虚引用</li></ul><p>示例代码：</p><p><code>NormalObject</code>类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>gc<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NormalObject</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finalizing obj "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>NormalObjectWeakReference</code>类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>gc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>WeakReference<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalObjectWeakReference</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>NormalObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NormalObjectWeakReference</span><span class="token punctuation">(</span>NormalObject normalObject<span class="token punctuation">,</span> ReferenceQueue<span class="token operator">&lt;</span>NormalObject<span class="token operator">></span> rq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>normalObject<span class="token punctuation">,</span> rq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> normalObject<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finalizing NormalObjectWeakReference "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>ReferenceQueueTest</code>主类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>gc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>WeakReference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceQueueTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReferenceQueue<span class="token operator">&lt;</span>NormalObject<span class="token operator">></span> rq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span>NormalObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Reference<span class="token operator">&lt;</span>NormalObject<span class="token operator">></span> ref <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ref <span class="token operator">=</span> <span class="token punctuation">(</span>Reference<span class="token operator">&lt;</span>NormalObject<span class="token operator">></span><span class="token punctuation">)</span>rq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"In queue: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NormalObjectWeakReference<span class="token punctuation">)</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reference object:"</span> <span class="token operator">+</span> ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>WeakReference<span class="token operator">&lt;</span>NormalObject<span class="token operator">>></span> weakList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>WeakReference<span class="token operator">&lt;</span>NormalObject<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            weakList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NormalObjectWeakReference</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NormalObject</span><span class="token punctuation">(</span><span class="token string">"Weak "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>rq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Created weak:"</span> <span class="token operator">+</span> weakList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"second time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>Created weak:com.interview.javabasic.jvm.gc.NormalObjectWeakReference@511d50c0Created weak:com.interview.javabasic.jvm.gc.NormalObjectWeakReference@60e53b93Created weak:com.interview.javabasic.jvm.gc.NormalObjectWeakReference@5e2de80cfirst timeFinalizing obj Weak 2Finalizing obj Weak 1Finalizing obj Weak 0second timeIn queue: Weak 0reference object:nullIn queue: Weak 2reference object:nullIn queue: Weak 1reference object:null</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读与写作</title>
      <link href="/2020/03/26/yue-du-yu-xie-zuo/"/>
      <url>/2020/03/26/yue-du-yu-xie-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="第五章-学术论文的结构"><a href="#第五章-学术论文的结构" class="headerlink" title="第五章 学术论文的结构"></a>第五章 学术论文的结构</h2><h3 id="5-1-IMRaD-Format（IMRaD结构）"><a href="#5-1-IMRaD-Format（IMRaD结构）" class="headerlink" title="5.1 IMRaD Format（IMRaD结构）"></a>5.1 IMRaD Format（IMRaD结构）</h3><h4 id="1、Scientific-format-of-research-paper"><a href="#1、Scientific-format-of-research-paper" class="headerlink" title="1、Scientific format of research paper:"></a>1、Scientific format of research paper:</h4><p><strong>What is IMRaD format?（什么是IMRaD格式？）</strong></p><p>The IMRaD structure is the commonly accepted format for communicating in the scientific community. Scientists talk through scientific journals or conference in the IMRaD format. </p><p>（IMRaD结构是在科学界进行交流的普遍接受的格式。 科学家交谈IMRaD格式的科学期刊或会议。）</p><ul><li><strong>I</strong>ntroduction   (Why did you do this study?)</li><li><strong>M</strong>ethods and Materials   (How did you do it?)</li><li><strong>R</strong>esults    (What did you find?)</li><li><strong>A</strong>nd</li><li><strong>D</strong>iscussion     (What does it mean?)</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd7e25hti6j30zc0gcqc5.jpg" alt=""></p><p><strong>Why the IMRaD format?（为什么使用IMRaD格式？）</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd7e4tn885j30n00e2466.jpg" alt=""></p><p><strong>Variation of IMRaD format?（IMRaD格式的变化形式？）</strong></p><ul><li><strong>IMRaD</strong> (Abstract、Introduction、Methods and Materials、Results、Discussion)</li><li><strong>IRaDM</strong> （biology）(Abstract、Introduction、Results、Discussion、Methods and Materials)</li><li><strong>IMRaRaRaD</strong> （Medical）(Abstract、Introduction、Methods and Materials、Results 1+ Discussion、Results 2+ Discussion、Results 3+ Discussion、Conclusion)</li></ul><h4 id="2、IMRaD-Format"><a href="#2、IMRaD-Format" class="headerlink" title="2、IMRaD Format"></a>2、IMRaD Format</h4><table><thead><tr><th><strong>Introduction</strong></th><th>1. provide necessary context to understand a problem</th></tr></thead><tbody><tr><td><strong>(Introduction)</strong></td><td>2. Propose a solution to the problem</td></tr><tr><td><strong>Methods</strong></td><td>3. explain your idea and effort to solve the problem</td></tr><tr><td><strong>Results</strong></td><td>4. report your findings</td></tr><tr><td><strong>Discussion</strong></td><td>5. Offer discussion about findings</td></tr><tr><td><strong>Conclusion</strong></td><td>6. Recommend future research</td></tr></tbody></table><h3 id="5-2-Scientific-format-from-the-perspective-of-referees（审稿人的视角）"><a href="#5-2-Scientific-format-from-the-perspective-of-referees（审稿人的视角）" class="headerlink" title="5.2 Scientific format from the perspective of referees（审稿人的视角）"></a>5.2 Scientific format from the perspective of referees（审稿人的视角）</h3><h4 id="1、Evaluating-process"><a href="#1、Evaluating-process" class="headerlink" title="1、Evaluating process"></a>1、Evaluating process</h4><ol><li>Check the formatting and other requirements  （检查格式和其他要求）</li><li>Send it to two peer reviewers (blind)  （将其发送给两名同行审阅者（盲人））</li><li>Referees to tick the boxes (criteria for evaluation)  （审稿人在方框中打勾（评估标准））</li><li>4.Referees are also asked to write their comments  （请审稿人发表评论）</li></ol><h4 id="2、Referee’s-Evaluation-Forms"><a href="#2、Referee’s-Evaluation-Forms" class="headerlink" title="2、Referee’s Evaluation Forms"></a>2、Referee’s Evaluation Forms</h4><ol><li>Is the contribution new?  （贡献是新的吗？）<ol start="2"><li>Is the contribution significant? （贡献重大吗？）</li><li>Is it suitable for publication in the journal?  （是否适合在期刊上发表？）</li><li>Is the manuscript well-structured and clear?  （手稿结构合理，清晰吗？）</li><li>Are the scientific method and assumption valid and clearly outlined?  （科学方法和假设是否有效且清晰概述？）</li><li>Are the results sufficient to support the interpretations and conclusions?  （结果是否足以支持解释和结论？）</li><li>Is the description of experiments and calculations sufficiently complete and precise to allow their reproduction by fellow scientists?  （对实验和计算的描述是否足够完整和准确，以允许其他科学家复制它们？）</li><li>Are all the figures and tables necessary?  （是否需要所有图表？）</li><li>Are figure legends and table titles adequate?  （图例和表格标题是否足够？）</li><li>Do the title and Abstract clearly indicate the content of the paper?  （标题和摘要是否清楚地表明了论文的内容？）</li><li>Are the references up to date, complete, and formatted properly?  （参考资料是否最新，完整且格式正确？）</li><li>Is the paper excellent, good, or poor?  （论文质量是好还是差？）</li></ol></li></ol><h4 id="3、Where-would-you-expect-to-find-evidence-for-an-answer-in-the-manuscript"><a href="#3、Where-would-you-expect-to-find-evidence-for-an-answer-in-the-manuscript" class="headerlink" title="3、Where would you expect to find evidence for an answer in the manuscript?"></a>3、Where would you expect to find evidence for an answer in the manuscript?</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd7fmfx62kj30xo0e8qd7.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd7fsvf2i0j30xc0fyna1.jpg" alt=""></p><h4 id="4、Referee-Criteria-（To-Sum-UP）"><a href="#4、Referee-Criteria-（To-Sum-UP）" class="headerlink" title="4、Referee Criteria （To Sum UP）"></a>4、Referee Criteria （To Sum UP）</h4><p>Significance of IMRaD format from the perspective of referees<br>Referees’ criteria for evaluating manuscript<br>Purpose each section serves during the evaluation</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础知识</title>
      <link href="/2020/03/24/wang-luo-ji-chu-zhi-shi/"/>
      <url>/2020/03/24/wang-luo-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络篇"><a href="#一、网络篇" class="headerlink" title="一、网络篇"></a>一、网络篇</h2><h3 id="1、OSI七层协议开放式互联网参考模型"><a href="#1、OSI七层协议开放式互联网参考模型" class="headerlink" title="1、OSI七层协议开放式互联网参考模型"></a>1、OSI七层协议开放式互联网参考模型</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>传输<strong>比特流</strong> 0101 （网卡）</p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>解决错传，数据传输不完整的可能。将比特数据组成<strong>帧</strong>（交换机）</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>将网络地址翻译成对应的物理地址，并决定怎么把数据从发送方路由到接收方（路由器）<br><strong>数据报 协议：IP协议</strong></p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>解决了主机间的数据传输，和传输质量的问题。</p><p><strong>分段</strong> <strong>协议：TCP协议，UDP协议</strong></p><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h4><p>建立和管理应用程序之间的通信。应用程序能自动收发包和自动寻址。</p><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h4><p>信息的语法语义以及它们的关联，如加密解密，转换翻译，压缩解压缩。数据按照网络能理解的方案进行格式化。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>规定发送方和接受方使用一个固定长度的消息头，消息头必须使用某种固定的组成，消息头中必须记录消息体的长度等一系列信息，以方便接受解析发送方发送的数据。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eu6pmt1j30en06b3yl.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eue4i9wj30zk0j4gvz.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eum3vtnj30wq0jsn1y.jpg" alt=""></p><h3 id="2、TCP的三次握手"><a href="#2、TCP的三次握手" class="headerlink" title="2、TCP的三次握手"></a>2、TCP的三次握手</h3><p><strong>传输控制协议TCP简介</strong>：</p><ul><li>面向连接的、可靠的、基于字节流的传输层通信协议</li><li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li><li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li><li>使用校验和来校验数据在传输过程中是否有误</li></ul><p><strong>TCP Flags</strong>：</p><ul><li>URG：紧急指针标志</li><li>ACK：确认序号标志</li><li>PSH：push标志</li><li>RST：重置连接标志</li><li>SYN：同步序号，用于建立连接过程</li><li>FIN：finish标志，用于释放连接</li></ul><p><strong>TCP三次握手流程图</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5euzr6kuj31020kgqkz.jpg" alt="TCP三次握手"></p><p><strong>抓包测试：</strong></p><p>抓包软件：Wireshark</p><pre><code>ip.dst==115.28.159.6 or ip.src==115.28.159.6 #正则表达式</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5evktewxj318b0u0tpx.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5ex1p0wwj310m0jqwod.jpg" alt=""></p><p><strong>TCP三次握手的流程</strong></p><p>（1）“握手”是为了建立连接,在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。</p><ul><li>第一次握手:建立连接时，客户端发送SYN包（syn=j）到服务器，并进入SYN_SEND状态,等待服务器确认;</li><li>第二次握手:服务器收到SYN包,必须确认客户的SYN(ack=j+1),同时自己也发送一个SYN包(syn=k),即SYN+ACK包,此时服务器进入SYN_RECV状态;</li><li>第三次握手:客户端收到服务器的SYN+ ACK包,向服务器发送确认包ACK(ack=k+1),此包发送完毕,客户端和服务器进入ESTABLISHED状态,完成三次握手。</li></ul><p>（2）<strong>为什么需要三次握手才能建立连接？</strong></p><p>为了初始化Sequence Number的初始值</p><p>（3）<strong>首次握手的隐患—SYN超时</strong></p><p><strong>问题起因分析</strong></p><ul><li>Server收到Client的SYN ,回复SYN-ACK的时候未收到ACK确认</li><li>Server不断重试直至超时, Linux默认等待63秒才断开连接</li></ul><p><strong>针对SYN Flood的防护措施</strong></p><ul><li>SYN队列满后,通过tcp_syncookies参数回发SYN Cookie</li><li>若为正常连接则Client会回发SYN Cookie ,直接建立连接</li></ul><p>（4）<strong>建立连接后，Client出现故障怎么办？</strong></p><p><strong>保活机制</strong></p><ul><li>向对方发送保活探测报文,如果未收到响应则继续发送</li><li>尝试次数达到保活探测数仍未收到响应则中断连接</li></ul><h3 id="3、TCP四次挥手"><a href="#3、TCP四次挥手" class="headerlink" title="3、TCP四次挥手"></a>3、TCP四次挥手</h3><p><strong>TCP四次挥手流程图</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5exlwjs5j30zw0jy4ft.jpg" alt="TCP四次挥手"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5exywvkrj310c0k0ak9.jpg" alt=""></p><p><strong>TCP四次挥手流程</strong></p><p>“挥手”是为了终止连接,TCP采用四次挥手来释放连接：</p><ul><li>第一次挥手: Client发送一个FIN,用来关闭Client到Server的数据传送，Client 进入FIN_WAIT_1状态;</li><li>第二次挥手: Server 收到FIN后，发送一个ACK给Client,确认序号为收到序号+1(与SYN相同，一个FIN占用一个序<br>号)，Server 进入CLOSE_WAIT状态;</li><li>第三次挥手: Server发送一个FIN,用来关闭Server到Client的数据传送，Server 进入LAST_ACK状态;</li><li>第四次挥手: Client 收到FIN后，Client 进入TIME _WAIT状态,接着发送一个ACK给Server,确认序号为收到序号+1,<br>Server进入CLOSED状态，完成四次挥手。</li></ul><p>（1）<strong>为什么会有TIME_ _WAIT状态？</strong></p><ul><li>确保有足够的时间让对方收到ACK包</li><li>避免新旧连接混淆</li></ul><p>（2）<strong>为什么需要四次握手才能断开连接？</strong></p><p>因为全双工，发送方和接收方都需要FIN报文和ACK报文</p><p>（3）<strong>服务器出现大量CLOSE_WAIT状态的原因？</strong></p><p>对方关闭socket连接,我方忙于读或写,没有及时关闭连接</p><p>解决：</p><ul><li>检查代码,特别是释放资源的代码</li><li>检查配置,特别是处理请求的线程配置</li></ul><h3 id="4、TCP和UDP的区别"><a href="#4、TCP和UDP的区别" class="headerlink" title="4、TCP和UDP的区别"></a>4、TCP和UDP的区别</h3><p><strong>UDP的特点</strong></p><ul><li>面向非连接</li><li>不维护连接状态,支持同时向多个客户端传输相同的消息</li><li>数据包报头只有8个字节,额外开销较小（TCP是20个字节）</li><li>吞吐量只受限于数据生成速率、传输速率以及机器性能</li><li>尽最大努力交付,不保证可靠交付,不需要维持复杂的链接状态表</li><li>面向报文,不对应用程序提交的报文信息进行拆分或者合并</li></ul><p><strong>TCP和UDP的区别</strong></p><ul><li>面向连接Vs无连接</li><li>可靠性VS无</li><li>有序性VS无</li><li>速度慢VS速度快</li><li>量级高VS量级低</li></ul><h3 id="5、TCP的滑动窗口"><a href="#5、TCP的滑动窗口" class="headerlink" title="5、TCP的滑动窗口"></a>5、TCP的滑动窗口</h3><p><strong>RTT和RTO</strong></p><ul><li>RTT：发送一个数据包到收到对应的ACK，所花费的时间</li><li>RTO：重传时间间隔</li></ul><p><strong>TCP使用滑动窗口做流量控制与乱序重排</strong></p><ul><li>保证TCP的可靠性</li><li>保证TCP的流动特性</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eyj5lomj316s0kijyt.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eymvii9j30zw0ka14d.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eyrxy8aj311k0icqbo.jpg" alt=""></p><blockquote><p>详情可参考：<a href="https://blog.csdn.net/wdscq1234/article/details/52444277" target="_blank" rel="noopener">TCP-IP详解：滑动窗口</a></p></blockquote><h3 id="6、HTTP"><a href="#6、HTTP" class="headerlink" title="6、HTTP"></a>6、HTTP</h3><h4 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h4><p><strong>超文本传输协议HTTP主要特点</strong></p><ul><li>支持客户/服务器模式</li><li>简单快速</li><li>灵活</li><li>无连接</li><li>无状态</li></ul><p><strong>HTTP请求结构</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5eyzs5hhj30us0a8q71.jpg" alt=""></p><p><strong>请求/响应的步骤</strong></p><ul><li>客户端连接到Web服务器</li><li>发送HTTP请求</li><li>服务器接受请求并返回HTTP响应</li><li>释放连接TCP连接</li><li>客户端浏览器解析HTML内容</li></ul><blockquote><p>在浏览器地址栏键入URL ,按下回车之后经历的流程:<br>DNS解析➢TCP连接➢发送HTTP请求➢服务器处理请求并返回HTTP报文➢浏览器解析渲染页面➢连接结束</p></blockquote><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><ul><li>1xx :指示信息–表示请求已接收,继续处理</li><li>2xx :成功–表示请求已被成功接收、理解、接受</li><li>3xx :重定向–要完成请求必须进行更进一步的操作</li><li>4xx:客户端错误–请求有语法错误或请求无法实现</li><li>5xx :服务器端错误-服务器未能实现合法的请求</li></ul><p><strong>常见状态码</strong></p><ul><li>200 OK:正常返回信息</li><li>400 Bad Request:客户端请求有语法错误，不能被服务器所理解</li><li>401 Unauthorized:请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</li><li>403 Forbidden:服务器收到请求，但是拒绝提供服务</li><li>404 Not Found:请求资源不存在，eg，输入了错误的URL</li><li>500 Internal Server Error:服务器发生不可预期的错误</li><li>503 Server Unavailable:服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul><h4 id="HTTP-1-1、HTTP-2、HTTP-3的比较"><a href="#HTTP-1-1、HTTP-2、HTTP-3的比较" class="headerlink" title="HTTP/1.1、HTTP/2、HTTP/3的比较"></a><code>HTTP/1.1、HTTP/2、HTTP/3</code>的比较</h4><h5 id="HTTP-1-1的缺陷"><a href="#HTTP-1-1的缺陷" class="headerlink" title="HTTP/1.1的缺陷"></a><code>HTTP/1.1</code>的缺陷</h5><h6 id="高延迟–带来页面加载速度的降低"><a href="#高延迟–带来页面加载速度的降低" class="headerlink" title="高延迟–带来页面加载速度的降低"></a>高延迟–带来页面加载速度的降低</h6><p>虽然近几年来网络带宽增长非常快，然而我们却并没有看到网络延迟有对应程度的降低。网络延迟问题主要由于<strong>队头阻塞</strong><code>(Head-Of-Line Blocking)</code>,导致带宽无法被充分利用。</p><p>队头阻塞是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。针对队头阻塞,人们<em>尝试过以下办法来解决</em>:</p><ol><li>将同一页面的资源分散到不同域名下，提升连接上限。 Chrome 有个机制，<strong>对于同一个域名，默认允许同时建立 6 个 TCP 持久连接</strong>，使用持久连接时，虽然能公用一个 TCP 管道，但是在一个管道中同一时刻只能处理一个请求，在当前的请求没有结束之前，其他的请求只能处于阻塞状态。另外如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</li><li><strong>雪碧图(Spriting)合并多张小图为一张大图</strong>,再用 JavaScript 或者 CSS 将小图重新“切割”出来的技术。</li><li><strong>内联(Inlining)是另外一种防止发送很多小图请求的技巧</strong>，将图片的原始数据嵌使用 SVG 或 base64 等方式直接存储在代码中，减少网络请求次数。</li><li><strong>拼接(Concatenation)将多个体积较小的 JavaScript 使用 webpack 等工具打包成 1 个体积更大的 JavaScript 文件</strong>,但如果其中 1 个文件的改动就会导致大量数据被重新下载多个文件。</li></ol><h6 id="无状态特性–带来的巨大-HTTP-头部"><a href="#无状态特性–带来的巨大-HTTP-头部" class="headerlink" title="无状态特性–带来的巨大 HTTP 头部"></a>无状态特性–带来的巨大 HTTP 头部</h6><p>由于报文 Header 一般会携带<code>"User Agent"</code> <code>"Cookie"</code> <code>"Accept"</code> <code>"Server"</code>等许多固定的头字段，多达几百字节甚至上千字节，但 Body 却经常只有几十字节（比如 GET 请求、 204/301/304 响应），成了不折不扣的“大头儿子”。Header 里携带的内容过大，在一定程度上增加了传输的成本。更要命的是，每次网络请求响应报文里有很多字段值都是重复的，非常浪费。</p><h6 id="3-明文传输–带来的不安全性"><a href="#3-明文传输–带来的不安全性" class="headerlink" title="3.明文传输–带来的不安全性"></a>3.明文传输–带来的不安全性</h6><p>HTTP/1.1 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。</p><p>你有没有听说过”免费 WiFi 陷阱”之类的新闻呢？ 黑客就是利用了 HTTP 明文传输的缺点，在公共场所架设一个 WiFi 热点开始“钓鱼”，诱骗网民上网。一旦你连上了这个 WiFi 热点，所有的流量都会被截获保存，里面如果有银行卡号、网站密码等敏感信息的话那就危险了，黑客拿到了这些数据就可以冒充你为所欲为。</p><h5 id="HTTP-2-特性"><a href="#HTTP-2-特性" class="headerlink" title="HTTP/2 特性"></a>HTTP/2 特性</h5><h6 id="二进制传输"><a href="#二进制传输" class="headerlink" title="二进制传输"></a>二进制传输</h6><p>HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码，二进制协议解析起来也更高效。</p><p>它把 TCP 协议的部分特性挪到了应用层，把原来的”Header+Body”的消息”打散”为数个小片的二进制”帧”(Frame), <strong>用”HEADERS”帧存放头数据、”DATA”帧存放实体数据</strong>。HTTP/2 数据分帧后”Header+Body”的报文结构就完全消失了，协议看到的只是一个个的”碎片”。</p><p>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p><h6 id="Header-压缩"><a href="#Header-压缩" class="headerlink" title="Header 压缩"></a>Header 压缩</h6><p>在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p><p>在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，客户端和服务器两端建立“字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90%的高压缩率</p><p>在客户端和服务器端使用“首部表”来跟踪和存储之前发送的 header 键-值对，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</p><h6 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h6><p>HTTP1.x 中，并发多个请求需要多个 TCP 连接，浏览器为了控制资源会有 6-8 个 TCP 连接都限制。 HTTP2 中：</p><ul><li>同域名下所有通信都在单个连接上完成，消除了因多个 TCP 连接而带来的延时和内存消耗</li><li>单个连接可以承载任意数量的双向数据流（请求和响应）</li><li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</li></ul><p>帧（frame）和流（stream）</p><ul><li>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。</li></ul><p><strong>多路复用，就是在一个 TCP 连接中可以存在多条流。</strong> 换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p><h6 id="服务端-Push"><a href="#服务端-Push" class="headerlink" title="服务端 Push"></a>服务端 Push</h6><p>在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。比如，在浏览器刚请求 HTML 的时候就提前把可能会用到的 JS、CSS 文件发给客户端，减少等待的延迟，这被称为”服务器推送”（ Server Push，也叫 Cache push）</p><p>提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p><h6 id="提高安全性"><a href="#提高安全性" class="headerlink" title="提高安全性"></a>提高安全性</h6><p>但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2，<strong>所以“事实上”的 HTTP/2 是加密的</strong>。也就是说，互联网上通常所能见到的 HTTP/2 都是使用”https”协议名，跑在 TLS 上面。</p><p>HTTP/2 协议定义了两个字符串标识符：“h2”表示加密的 HTTP/2，“h2c”表示明文的 HTTP/2。</p><h4 id="GET请求和POST请求的区别"><a href="#GET请求和POST请求的区别" class="headerlink" title="GET请求和POST请求的区别"></a>GET请求和POST请求的区别</h4><ul><li>Http报文层面: GET将请求信息放在URL , POST放在报文体中</li><li>数据库层面: CET符合幂等性和安全性, POST不符合</li><li>其他层面: GET可以被缓存、被存储,而POST不行</li></ul><h4 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h4><p><strong>Cookie简介</strong></p><ul><li>是由服务器发给客户端的特殊信息,以文本的形式存放在客户端</li><li>客户端再次请求的时候,会把Cookie回发</li><li>服务器接收到后,会解析Cookie生成与客户端相对应的内容</li></ul><p><strong>Cookie的设置及发送过程</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5ezmt1e5j30r60e4dhu.jpg" alt=""></p><p><strong>Session简介</strong></p><ul><li>服务器端的机制,在服务器上保存的信息</li><li>解析客户端请求并操作session id ,按需保存状态信息</li></ul><p><strong>Session的实现方式</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5ezumacvj316i0b6grs.jpg" alt=""></p><p><strong>Cookie和Session的区别</strong></p><ul><li>Cookie数据存放在客户的浏览器上, Session数据放在服务器上</li><li>Session相对于Cookie更安全</li><li>若考虑减轻服务器负担,应当使用Cookie</li></ul><h4 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h4><p><strong>HTTPS简介</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5f00c0w3j30tw0i4gn9.jpg" alt=""></p><p><strong>SSL(Security Sockets Layer ,安全套接层)</strong></p><ul><li>为网络通信提供安全及数据完整性的一种安全协议</li><li>是操作系统对外的API , SSL3.0后更名为TLS</li><li>采用身份验证和数据加密保证网络通信的安全和数据的完整性</li></ul><p><strong>加密的方式</strong></p><ul><li>对称加密:加密和解密都使用同-个密钥</li><li>非对称加密:加密使用的密钥和解密使用的密钥是不相同的</li><li>哈希算法:将任意长度的信息转换为固定长度的值 ,算法不可逆</li><li>数字签名:证明某个消息或者文件是某人发出/认同的</li></ul><p><strong>HTTPS数据传输流程</strong></p><ul><li>浏览器将支持的加密算法信息发送给服务器</li><li>服务器选择一套浏览器支持的加密算法,以证书的形式回发浏览器</li><li>浏览器验证证书合法性,并结合证书公钥加密信息发送给服务器</li><li>服务器使用私钥解密信息,验证哈希,加密响应消息回发浏览器</li><li>浏览器解密响应消息,并对消息进行验真,之后进行加密交互数据</li></ul><p><strong>HTTP和HTTPS的区别</strong></p><ul><li>HTTPS需要到CA申请证书, HTTP不需要</li><li>HTTPS密文传输, HTTP明文传输</li><li>连接方式不同,HTTPS默认使用443端口, HTTP使用80端口</li><li>HTTPS=HTTP+加密+认证+完整性保护,较HTTP安全</li></ul><p><strong>HTTPS真的很安全吗？</strong></p><p>那倒未必</p><ul><li>浏览器默认填充http:// ,请求需要进行跳转,有被劫持的风险</li><li>可以使用HSTS ( HTTP Strict Transport Security )优化</li></ul><h3 id="7、Socket"><a href="#7、Socket" class="headerlink" title="7、Socket"></a>7、Socket</h3><p><strong>Socket简介</strong></p><p>我们知道两个进程如果需要进行通讯最基本的一个前提是能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</p><p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5f07p8zaj30f20d875x.jpg" alt=""><br>socket起源于UNIX，在Unix一切皆文件哲学的思想下，socket是一种”打开—读/写—关闭”模式的实现，服务器和客户端各自维护一个”文件”，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p><p><strong>Socket通信流程</strong></p><p>socket是”打开—读/写—关闭”模式的实现，以使用TCP协议通讯的socket为例，其交互流程大概是这样子的：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5f0fsrnuj30fe0933yz.jpg" alt=""></p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p><em>定义</em>：CDN（Content Delivery Network，内容分发网络）是构建在现有互联网基础之上的一层<strong>智能虚拟网络</strong>，通过在网络各处部署节点服务器，实现<strong>将源站内容分发至所有 CDN 节点，使用户可以就近获得所需的内容</strong>。</p><p><em>优点</em>：</p><ul><li>CDN 服务<strong>缩短</strong>了用户查看内容的<strong>访问延迟</strong></li><li><strong>提高</strong>了用户访问网站的<strong>响应速度与网站的可用性</strong></li><li><strong>解决</strong>了<strong>网络带宽小、用户访问量大、网点分布不均</strong>等问题</li></ul><h4 id="加速原理"><a href="#加速原理" class="headerlink" title="加速原理"></a>加速原理</h4><p>当用户访问使用<code>CDN</code>服务的网站时，本地<code>DNS</code>服务器通过<code>CNAME</code>方式将最终域名请求重定向到<code>CDN</code>服务。<code>CDN</code>通过一组预先定义好的策略（如内容类型、地理区域、网络负载状况等）将当时能最快响应用户的<code>CDN</code>节点<code>IP</code>地址提供用户，使用户可以以最快的速度获得网站内容。使用<code>CDN</code>后的<code>HTTP</code>请求处理流程如下：</p><h5 id="CDN节点有缓存场景"><a href="#CDN节点有缓存场景" class="headerlink" title="CDN节点有缓存场景"></a><code>CDN</code>节点有缓存场景</h5><ol><li>用户在浏览器输入要访问的网站域名，向本地 DNS 发起域名解析请求。</li><li>域名解析的请求被发往网站授权 DNS 服务器。</li><li>网站 DNS 服务器解析发现域名已经 CNAME 到了 <a href="http://www.example.com.c.cdnhwc1.com./" target="_blank" rel="noopener">www.example.com.c.cdnhwc1.com。</a></li><li>请求被指向 CDN 服务。</li><li>CDN 对域名进行智能解析，将响应速度最快的 CDN 节点 IP 地址返回给本地 DNS。</li><li>用户获取响应速度最快的 CDN 节点 IP 地址。</li><li>浏览器在得到速度最快节点的 IP 地址以后，向 CDN 节点发出访问请求。</li><li>CDN 节点将用户所需资源返回给用户。</li></ol><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gi1sultd7lj31310u0tbw.jpg" alt="cdncache"></p><h5 id="CDN节点无缓存场景"><a href="#CDN节点无缓存场景" class="headerlink" title="CDN节点无缓存场景"></a><code>CDN</code>节点无缓存场景</h5><ol><li>用户在浏览器输入要访问的网站域名，向本地 DNS 发起域名解析请求。</li><li>域名解析的请求被发往网站授权 DNS 服务器。</li><li>网站 DNS 服务器解析发现域名已经 CNAME 到了 <a href="http://www.example.com.c.cdnhwc1.com./" target="_blank" rel="noopener">www.example.com.c.cdnhwc1.com。</a></li><li>请求被指向 CDN 服务。</li><li>CDN 对域名进行智能解析，将响应速度最快的 CDN 节点 IP 地址返回给本地 DNS。</li><li>用户获取响应速度最快的 CDN 节点 IP 地址。</li><li>浏览器在得到速度最快节点的 IP 地址以后，向 CDN 节点发出访问请求。</li><li><strong>CDN 节点回源站拉取用户所需资源。</strong></li><li><strong>将回源拉取的资源缓存至节点。</strong></li><li><strong>将用户所需资源返回给用户。</strong></li></ol><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/007S8ZIlly1gi1svjrtu7j31560u0djh.jpg" alt="无缓存"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j查询多深度关系节点</title>
      <link href="/2020/03/24/neo4j-cha-xun-duo-shen-du-guan-xi-jie-dian/"/>
      <url>/2020/03/24/neo4j-cha-xun-duo-shen-du-guan-xi-jie-dian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、使用深度运算符"><a href="#一、使用深度运算符" class="headerlink" title="一、使用深度运算符"></a>一、使用深度运算符</h3><p>当要实现多深度关系节点查询时，可变数量的关系可以使用<code>-[:TYPE*minHops..maxHops]-&gt;</code>，查询示例语句如下：</p><pre class=" language-cypher"><code class="language-cypher"># 如果在1到3的关系中存在路径，将返回开始点和结束点match data=(a:pest_category{pest_name:'病害'})-[*1..3]->(nb:insect_info) return data                                                         </code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59eq126aj30n20bmjxb.jpg" alt=""></p><h3 id="二、直接拼接节点关系查询"><a href="#二、直接拼接节点关系查询" class="headerlink" title="二、直接拼接节点关系查询"></a>二、直接拼接节点关系查询</h3><p>查询示例语句如下：</p><pre class=" language-cypher"><code class="language-cypher"># 直接通过某个名称查询所有的节点及关系match (a:pest_category)-[re]->(b:insect_category)-[re2]->(c:insect_info{insect_name:'黄蜘蛛'}) return a,re,b,re2,c</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59h4wfzuj30n20bqta4.jpg" alt=""></p><h3 id="三、使用with关键字查询"><a href="#三、使用with关键字查询" class="headerlink" title="三、使用with关键字查询"></a>三、使用<code>with</code>关键字查询</h3><p>使用<code>with</code>关键字可以将前面查询结果作为后面查询条件，查询语句示例如下：</p><pre class=" language-cypher"><code class="language-cypher">match (a:pest_category)-[re]->(b:insect_category) where b.category_type = 1 WITH a,re,b match (b:insect_category)-[re2]->(c:insect_info) return a,re,b,re2,c</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59kkj7spj30n20bomz3.jpg" alt=""></p><h3 id="四、通过where关键字查询"><a href="#四、通过where关键字查询" class="headerlink" title="四、通过where关键字查询"></a>四、通过<code>where</code>关键字查询</h3><p>通过<code>where</code>关键字查询，同时可以加入筛选条件，使用<code>contains</code>关键字进行模糊查询，查询语句示例如下：</p><pre class=" language-cypher"><code class="language-cypher">match (a:pest_category)-[re]->(b:insect_category)-[re2]->(c:insect_info) where c.insect_name contains('黄') return a,re,b,re2,c</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59r7j3vzj30n20bojtz.jpg" alt=""></p><p>加入<code>or</code> 和<code>and</code>进行查询：</p><pre class=" language-cypher"><code class="language-cypher">match (a:pest_category)-[re]->(b:insect_category)-[re2]->(c:insect_info) where c.insect_name contains('黄') or a.pest_name contains('病') return a,re,b,re2,c</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59txhvqvj30n20cmjwy.jpg" alt=""></p><pre class=" language-cypher"><code class="language-cypher">match (a:pest_category)-[re]->(b:insect_category)-[re2]->(c:insect_info) where c.insect_name contains('黄') or a.pest_name contains('病') or b.category_name contains('螨') return a,re,b,re2,c</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59uqqw5nj30n20ckq8t.jpg" alt=""></p><pre class=" language-cypher"><code class="language-cypher">match (a:pest_category)-[re]->(b:insect_category)-[re2]->(c:insect_info) where c.insect_name contains('') and a.pest_name contains('') and b.category_name contains('螨') return a,re,b,re2,c</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd59vkr34fj30n40bowgd.jpg" alt=""></p><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/u013946356/article/details/81739079" target="_blank" rel="noopener">https://blog.csdn.net/u013946356/article/details/81739079</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
            <tag> Cypher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github高效准确搜索项目技巧</title>
      <link href="/2020/03/22/github-gao-xiao-zhun-que-sou-suo-xiang-mu-ji-qiao/"/>
      <url>/2020/03/22/github-gao-xiao-zhun-que-sou-suo-xiang-mu-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>在<code>GitHub</code>上查找开源项目时，我经常直接输入关键字，再进一步就是对语言筛选一下（如下图），然后这样会面临搜不到自己想要的项目，因此，我通过查询，找到了一些精确搜索<code>Github</code>项目的技巧。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd57ou6w9tj31ii0u0ak8.jpg" alt=""></p><h3 id="一、开源项目组成部分"><a href="#一、开源项目组成部分" class="headerlink" title="一、开源项目组成部分"></a>一、开源项目组成部分</h3><blockquote><ul><li><p><code>name</code>: 项目名</p></li><li><p><code>description</code>: 项目描述</p></li><li><p><code>README.md</code>: 项目详细情况介绍</p></li><li><p><code>code</code>: 项目源码</p></li><li><p><code>star</code>数和<code>fork</code>数</p></li></ul></blockquote><h3 id="二、高效搜索"><a href="#二、高效搜索" class="headerlink" title="二、高效搜索"></a>二、高效搜索</h3><h4 id="1、按name搜索"><a href="#1、按name搜索" class="headerlink" title="1、按name搜索"></a>1、按<code>name</code>搜索</h4><pre class=" language-java"><code class="language-java"># 项目名字<span class="token punctuation">(</span>name<span class="token punctuation">)</span>里有 java 的in<span class="token operator">:</span>name java# 名字<span class="token punctuation">(</span>name<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span> 的in<span class="token operator">:</span>name java starts<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span># 名字<span class="token punctuation">(</span>name<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> 的in<span class="token operator">:</span>name java starts<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">200</span># 名字<span class="token punctuation">(</span>name<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> <span class="token punctuation">,</span>编程语言是Java的in<span class="token operator">:</span>name  java stars<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">100</span> language<span class="token operator">:</span>Java # 名字<span class="token punctuation">(</span>name<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> <span class="token punctuation">,</span>编程语言是Java，最后更新时间大于<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>的in<span class="token operator">:</span>name  java stars<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">100</span> language<span class="token operator">:</span>Java pushed<span class="token operator">:</span><span class="token operator">></span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span></code></pre><p>搜索结果示例如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd58949b02j31ja0u0qe5.jpg" alt="按name搜索"></p><h4 id="2、按description搜索"><a href="#2、按description搜索" class="headerlink" title="2、按description搜索"></a>2、按<code>description</code>搜索</h4><pre class=" language-java"><code class="language-java"># 项目描述<span class="token punctuation">(</span>description<span class="token punctuation">)</span>里有 java 的in<span class="token operator">:</span>description java# 描述<span class="token punctuation">(</span>description<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span> 的in<span class="token operator">:</span>description java starts<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span># 描述<span class="token punctuation">(</span>description<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> 的in<span class="token operator">:</span>description java starts<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">200</span># 描述<span class="token punctuation">(</span>description<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> <span class="token punctuation">,</span>编程语言是Java的in<span class="token operator">:</span>description  java stars<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">100</span> language<span class="token operator">:</span>Java # 描述<span class="token punctuation">(</span>description<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> <span class="token punctuation">,</span>编程语言是Java，最后更新时间大于<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>的in<span class="token operator">:</span>description java stars<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">100</span> language<span class="token operator">:</span>Java pushed<span class="token operator">:</span><span class="token operator">></span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span></code></pre><p>搜索结果示例如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd58eely4fj31j60u0n7n.jpg" alt="按description搜索"></p><h4 id="3、按readme搜索"><a href="#3、按readme搜索" class="headerlink" title="3、按readme搜索"></a>3、按<code>readme</code>搜索</h4><pre class=" language-java"><code class="language-java"># 项目详情<span class="token punctuation">(</span>readme<span class="token punctuation">)</span>里有 java 的in<span class="token operator">:</span>readme java# 详情<span class="token punctuation">(</span>readme<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span> 的in<span class="token operator">:</span>readme java starts<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span># 详情<span class="token punctuation">(</span>readme<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> 的in<span class="token operator">:</span>readme java starts<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">200</span># 详情<span class="token punctuation">(</span>readme<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> <span class="token punctuation">,</span>编程语言是Java的in<span class="token operator">:</span>readme  java stars<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">100</span> language<span class="token operator">:</span>Java # 详情<span class="token punctuation">(</span>readme<span class="token punctuation">)</span>里有 java 并且 stars 大于 <span class="token number">2000</span>，forks 大于 <span class="token number">200</span> <span class="token punctuation">,</span>编程语言是Java，最后更新时间大于<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>的in<span class="token operator">:</span>readme java stars<span class="token operator">:</span><span class="token operator">></span><span class="token number">2000</span> forks<span class="token operator">:</span><span class="token operator">></span><span class="token number">100</span> language<span class="token operator">:</span>Java pushed<span class="token operator">:</span><span class="token operator">></span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span></code></pre><p>搜索结果示例如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd58ie3cx8j31im0u0am1.jpg" alt="按readme搜索"></p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><blockquote><p><strong>搜索条件：</strong></p><ul><li>in:name xxx // 按照项目名搜索</li><li>in:readme xxx // 按照README搜索</li><li>in:description xxx // 按照description搜索</li></ul><p><strong>筛选条件：</strong></p><ul><li>stars:&gt;xxx // stars数大于xxx</li><li>forks:&gt;xxx // forks数大于xxx</li><li>language:xxx // 编程语言是xxx</li><li>pushed:&gt;YYYY-MM-DD // 最后更新时间大于YYYY-MM-DD</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github个人博客绑定自己的域名</title>
      <link href="/2020/03/21/yu-ming-gou-mai-ji-jie-xi/"/>
      <url>/2020/03/21/yu-ming-gou-mai-ji-jie-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="github个人博客绑定自己的域名"><a href="#github个人博客绑定自己的域名" class="headerlink" title="github个人博客绑定自己的域名"></a>github个人博客绑定自己的域名</h3><blockquote><p>注意：本文前提是你已经有一个类似于 <a href="cyh756085049.github.io">cyh756085049.github.io</a> 的个人博客，可以直接访问。</p></blockquote><h4 id="1、购买域名"><a href="#1、购买域名" class="headerlink" title="1、购买域名"></a>1、购买域名</h4><p>可以先到阿里云：<a href="https://mi.aliyun.com/" target="_blank" rel="noopener">https://mi.aliyun.com/</a>购买一个域名，如果第一次购买，需要先创建新信息模版，如下图红框标记所示，信息填写完成后会出现一列你的信息，然后需要邮箱验证和实名认证（具体操作可根据阿里云步骤提示完成）。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1dyi7ftgj327y0ks0xm.jpg" alt="域名信息模版"></p><p>域名购买成功之后可以查看：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1e3nt64lj322p0u0agz.jpg" alt="域名列表"></p><h4 id="2、GitHub仓库操作"><a href="#2、GitHub仓库操作" class="headerlink" title="2、GitHub仓库操作"></a>2、<code>GitHub</code>仓库操作</h4><p>（1）一般操作</p><ul><li>首先在你的<code>GitHub</code>个人博客仓库里添加<code>CNAME</code>文件并填写要绑定的域名</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1eetfwehj30xz0u00y1.jpg" alt="创建CNAME文件"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1ehr62iuj318a0a8wfr.jpg" alt="域名设置"></p><ul><li>文件添加成功之后，在<code>Settings</code>设置中，找到<code>Custom domain</code>添加域名后保存即可（添加CNAME文件并在文件中填写绑定的域名后一般会自动保存，可以查看一下有没有自动保存）</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1end4e5hj31ag054wfa.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1em08fmsj30y60neq5n.jpg" alt="添加域名"></p><p>（2）用 hexo 框架搭建博客并部署到 Github Pages 上的操作：</p><blockquote><p>当用<code>hexo</code>搭建的博客每次部署到服务器时，会把你的博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</p></blockquote><ul><li>首先在本地的<code>source</code>文件夹下新建一个<code>CNAME</code>文件（无后缀名），然后在文件中添加你购买的域名，如<code>ramona-chen.top</code>，然后使用命令<code>hexo g</code>,<code>hexo d</code>部署到服务器上。</li></ul><h4 id="3、添加域名解析"><a href="#3、添加域名解析" class="headerlink" title="3、添加域名解析"></a>3、添加域名解析</h4><p>首先去你购买的域名列表，点击解析，如下图：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1et8b4xaj31wq064gmm.jpg" alt="域名解析"></p><p>（1）方式一</p><p>进入到解析设置，点击添加记录：</p><ul><li><p>添加两个A记录，一个主机记录为：“www”，一个主机记录为“@”</p></li><li><p>记录值需要通过ping你的<code>xxx.github.io</code>域名，得到一个IP:</p></li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1f80z2u4j30re074wj8.jpg" alt="获取IP地址"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1f1q5pg5j31y60u0win.jpg" alt="添加记录"></p><p>全部配置完成之后，得到如下图，配置成功。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1fa4tox0j31wa0j8tbj.jpg" alt="解析设置列表"></p><p>（2）方式二</p><p>进入到解析设置，点击添加记录：</p><ul><li><p>添加两个<code>CNAME</code>记录，一个主机记录为：“www”，一个主机记录为“@”</p></li><li><p>记录值是你的<code>xxx.github.io</code>域名</p></li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1glvkezyj31pm0u0te7.jpg" alt="解析设置"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1h21jkfpj31vq0di41d.jpg" alt="CNAME记录设置"></p><p>最后就可以通过访问<a href="http://ramona-chen.top/" target="_blank" rel="noopener">http://ramona-chen.top/</a>访问你的博客啦，效果图如下。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1ffb8rjtj31en0u0npf.jpg" alt="ramona-chen的个人博客"></p><blockquote><p><em>参考：</em></p><p>严晟嘉： <a href="https://www.zhihu.com/question/31377141/answer/103056861" target="_blank" rel="noopener">https://www.zhihu.com/question/31377141/answer/103056861</a><br>SnailClimb： <a href="https://www.zhihu.com/people/javaguide" target="_blank" rel="noopener">https://www.zhihu.com/people/javaguide</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建酷炫的个人博客</title>
      <link href="/2020/03/19/da-jian-ku-xuan-de-ge-ren-bo-ke/"/>
      <url>/2020/03/19/da-jian-ku-xuan-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建酷炫免费的个人博客"><a href="#搭建酷炫免费的个人博客" class="headerlink" title="搭建酷炫免费的个人博客"></a>搭建酷炫免费的个人博客</h2><p><strong>我的博客地址</strong>：<a href="https://cyh756085049.github.io/">Ramona-Chen’s Blog</a></p><h3 id="一、在Github上创建个人仓库"><a href="#一、在Github上创建个人仓库" class="headerlink" title="一、在Github上创建个人仓库"></a>一、在<code>Github</code>上创建个人仓库</h3><p>1、登录<code>GitHub</code> ，如果没有 <code>GitHub</code> 帐号，请自己注册<a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 帐号。</p><p>2、登录成功之后，点击 <code>GitHub</code> 中的 <code>New repository</code> 创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io 。这里<strong>用户名</strong>使用你的<code>GitHub</code>帐号名称代替，这是固定写法。</p><p>3、在<code>Github</code>上进行配置，以及<code>SSH</code>的配置，然后进行测试：</p><pre class=" language-yaml"><code class="language-yaml">ssh <span class="token punctuation">-</span>T git@github.com</code></pre><ul><li>出现如下图所示，即表示测试成功：</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczb7fgwd0j30va02imxf.jpg" alt="img"></p><p><em>因为之前已经完成上边的所有步骤，所以在此不再赘述，如有不理解的地方可参考：<a href="https://mp.weixin.qq.com/s/uxt3NX760gdNN-xld7fmZA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uxt3NX760gdNN-xld7fmZA</a></em></p><h3 id="二、Hero的安装及使用"><a href="#二、Hero的安装及使用" class="headerlink" title="二、Hero的安装及使用"></a>二、Hero的安装及使用</h3><p>1、Hero安装</p><pre class=" language-yml"><code class="language-yml">npm install -g hexo-cli</code></pre><p>2、初始化Hero博客</p><ul><li>首先初始化</li></ul><pre class=" language-yml"><code class="language-yml">hexo init myBlog</code></pre><ul><li>进入所创建的文件夹<code>myBlog</code>下，运行：</li></ul><pre class=" language-yml"><code class="language-yml">hexo s</code></pre><ul><li>在浏览器输入如下网址查看：</li></ul><pre><code>localhost:4000</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczbhuvoe0j30u00hdwff.jpg" alt="hexo初始化博客界面"></p><p>3、如果看到上述运行界面，说明初始博客搭建完成。</p><h3 id="三、编写文章"><a href="#三、编写文章" class="headerlink" title="三、编写文章"></a>三、编写文章</h3><p>1、接下来就可以编写文章了。首先进入文件夹<code>myBlog</code>下，创建博客文章，然后生成网页，并启动服务器预览。对应的命令如下：</p><pre><code>hexo new "新建博客文章" #新建文章1hexo generate #生成网页1hexo server #启动服务预览</code></pre><p>2、也可以把自己之前的以<code>md</code>为后缀名的文章放入文件夹<code>myBlog/source/_post</code>下，注意要在文章头加入（因为我是用<code>Typora</code>软件编写的文章，没有加配置报错）：</p><pre><code>title: myFirstBlogdate: 2020-03-19 10:10:16</code></pre><p>示例如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczc83anwmj318c0a6q3l.jpg" alt="博客文章内容界面"></p><p>3、当编写完成后可以把文章部署到服务器上。</p><ul><li>在部署前首先需要先配置一下本地<code>myBlog</code>文件夹下的<code>_config.yml</code>配置文件，可以先配置以下的基本信息：</li></ul><pre><code>url: https://cyh756085049.github.io  # github访问域名# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  #将 Hexo 与 GitHub 进行关  repo: https://github.com/cyh756085049/cyh756085049.github.io.git  # 自己的github地址  branch: master  # guthub分支</code></pre><ul><li>关联好github之后直接运行<code>hexo d</code>会提示<code>deploy not found: git</code>，需要加加入如下指令：  </li></ul><pre><code>npm install --save hexo-deployer-git</code></pre><ul><li>然后进行部署：</li></ul><pre><code>hexo d</code></pre><p>4、部署成功之后输入你的域名浏览：</p><pre><code>https://xxx.github.io</code></pre><p>结果同本地测试运行结果一致，免费博客搭建完成。</p><h3 id="四、优化Hexo博客界面"><a href="#四、优化Hexo博客界面" class="headerlink" title="四、优化Hexo博客界面"></a>四、优化Hexo博客界面</h3><p>hexo 默认的主题比较简单，你可以在 <a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">Hexo主题模版</a>进行主题的挑选更换。将下好的主题安放在<code>themes</code>文件夹内，同时在<code>_config.yml</code>中进行主题修改。</p><p><strong><em>注意：</em></strong></p><p><strong><em>当文章编写完要重新上传时，需要执行以下命令更新：</em></strong></p><pre><code>hexo cleanhexo ghexo d</code></pre><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">我选择的主题</a>，通过文档说明进行配置，也可以查看该作者<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">Github</a>上的详细文档说明进行配置即可得到如下效果：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczct2l69xj31eg0u0kjo.jpg" alt="Ramona-Chen的博客"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczcu6g33uj31ix0u0kjl.jpg" alt="文章详情"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczd3b5wj4j31mc0u04qq.jpg" alt="文章列表"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gczd4cxnj9j31m70u0e0u.jpg" alt="标签页"></p><blockquote><p>参考：</p><p>1、五分钟学算法：<a href="https://mp.weixin.qq.com/s/uxt3NX760gdNN-xld7fmZA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uxt3NX760gdNN-xld7fmZA</a></p><p>2、hexo-theme-matery主题：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized底层实现原理</title>
      <link href="/2020/03/16/synchronized-di-ceng-shi-xian-yuan-li/"/>
      <url>/2020/03/16/synchronized-di-ceng-shi-xian-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>1、线程安全问题的主要诱因:</strong></p><ul><li>存在共享数据(也称临界资源)</li><li>存在多条线程共同操作这些共享数据</li></ul><p><strong>2、解决问题的根本方法:</strong></p><ul><li>同一时刻有且只有一个线程在操作共享数据,其他线程必须等到该线程处理完数据后再对共享数据进行操作</li></ul><h3 id="互斥锁的特性"><a href="#互斥锁的特性" class="headerlink" title="互斥锁的特性"></a>互斥锁的特性</h3><ul><li><strong>互斥性</strong>:即在同一时间只允许一个线程持有某个对象锁,通过这种特性来实现多线程的协调机制,这样在同一时间只有一个线程对需要同步的代码块(复合操作)进行访问。互斥性也称为操作的原子性。</li><li><strong>可见性</strong>:必须确保在锁被释放之前,对共享变量所做的修改,对于随后获得该锁的另一个线程是可见的(即在获得锁时应获得最新共享变量的值) ,否则另一个线程可能是在本地缓存的某个副本上继续操作,从而<br>引起不一致。</li></ul><blockquote><p>synchronized锁的不是代码,锁的都是对象</p></blockquote><h3 id="获取的锁的分类-获取对象锁和获取类锁"><a href="#获取的锁的分类-获取对象锁和获取类锁" class="headerlink" title="获取的锁的分类(获取对象锁和获取类锁)"></a>获取的锁的分类(获取对象锁和获取类锁)</h3><p><strong>获取对象锁的两种用法</strong></p><ul><li>1.同步代码块( synchronized (this) , synchronized (类实例对象)) ,锁是小括号()中的实例对象。</li><li>2.同步非静态方法 ( synchronized method ) , 锁是当前对象的实例对象。</li></ul><p><strong>获取类锁的两种用法</strong></p><ul><li>1.同步代码块( synchronized (类.class) ) , 锁是小括号()中的类对象(Class对象)。</li><li>2.同步静态方法 ( synchronized static method ) , 锁是当前对象的类对象(Class对象)。</li></ul><p><strong>对象锁和类锁的总结</strong></p><ul><li>1.有线程访问对象的同步代码块时,另外的线程可以访问该对象的非同步代码块; </li><li>2.若锁住的是同一个对象,一个线程在访问对象的同步代码块时,另一个访问对象的同步代码块的线程会被阻塞;</li><li>3.若锁住的是同一个对象.一个线程在访问对象的同步方法时,另一个访问对象同步方法的线程会被阻塞;</li><li>4.若锁住的是同一个对象,一个线程在访问对象的同步代码块时,另一个访问对象同步方法的线程会被阻塞，反之亦然;</li><li>5.同一个类的不同对象的对象锁互不干扰;</li><li>6.类锁由于也是一种特殊的对象锁,因此表现和上述1,2,3,4一致，而由于一个类只有一把对象锁,所以同一个类的不同对象使用类锁将会是同步的; </li><li>7.类锁和对象锁互不干扰。</li></ul><p><strong>示例代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">syncObjectBlock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">syncObjectMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">syncClassBlock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">syncClassMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异步方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_Async_Start: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_Async_End: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 方法中有 synchronized(this|object) {} 同步代码块     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">syncObjectBlock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncObjectBlock1: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncObjectBlock1_Start: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncObjectBlock1_End: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * synchronized 修饰非静态方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">syncObjectMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncObjectMethod1: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncObjectMethod1_Start: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncObjectMethod1_End: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">syncClassBlock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncClassBlock1: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SyncThread<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncClassBlock1_Start: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncClassBlock1_End: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">syncClassMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncClassMethod1: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncClassMethod1_Start: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_SyncClassMethod1_End: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SyncThread syncThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread A_thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"A_thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread A_thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"A_thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread B_thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"B_thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread B_thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"B_thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread C_thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"C_thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread C_thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"C_thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread D_thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"D_thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread D_thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"D_thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread E_thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"E_thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread E_thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>syncThread<span class="token punctuation">,</span> <span class="token string">"E_thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        A_thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        A_thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B_thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B_thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C_thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C_thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        D_thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        D_thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E_thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E_thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>B_thread2_SyncObjectBlock1: 10:26:34D_thread2_SyncClassBlock1: 10:26:34A_thread1_Async_Start: 10:26:34E_thread1_SyncClassMethod1: 10:26:34B_thread1_SyncObjectBlock1: 10:26:34A_thread2_Async_Start: 10:26:34D_thread1_SyncClassBlock1: 10:26:34C_thread1_SyncObjectMethod1: 10:26:34E_thread1_SyncClassMethod1_Start: 10:26:34C_thread1_SyncObjectMethod1_Start: 10:26:34E_thread1_SyncClassMethod1_End: 10:26:35A_thread1_Async_End: 10:26:35A_thread2_Async_End: 10:26:35C_thread1_SyncObjectMethod1_End: 10:26:35D_thread1_SyncClassBlock1_Start: 10:26:35B_thread1_SyncObjectBlock1_Start: 10:26:35D_thread1_SyncClassBlock1_End: 10:26:36B_thread1_SyncObjectBlock1_End: 10:26:36D_thread2_SyncClassBlock1_Start: 10:26:36B_thread2_SyncObjectBlock1_Start: 10:26:36B_thread2_SyncObjectBlock1_End: 10:26:37D_thread2_SyncClassBlock1_End: 10:26:37C_thread2_SyncObjectMethod1: 10:26:37E_thread2_SyncClassMethod1: 10:26:37C_thread2_SyncObjectMethod1_Start: 10:26:37E_thread2_SyncClassMethod1_Start: 10:26:37E_thread2_SyncClassMethod1_End: 10:26:38C_thread2_SyncObjectMethod1_End: 10:26:38</code></pre><h2 id="synchronized底层实现原理"><a href="#synchronized底层实现原理" class="headerlink" title="synchronized底层实现原理"></a>synchronized底层实现原理</h2><h3 id="实现synchronized的基础"><a href="#实现synchronized的基础" class="headerlink" title="实现synchronized的基础"></a>实现synchronized的基础</h3><ul><li>Java对象头</li><li>Monitor</li></ul><h3 id="对象在内存中的布局"><a href="#对象在内存中的布局" class="headerlink" title="对象在内存中的布局"></a>对象在内存中的布局</h3><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul><p><strong>对象头的结构：</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9t6nyepj314c07g41i.jpg" alt="**对象头的结构"></p><p><strong>Mark word</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9tbb0rcj30zu0cuaei.jpg" alt="Mark word"></p><blockquote><p>Monitor :每个Java对象天生自带了一把看不见的锁</p></blockquote><p>ObjectMonitor的对象列表：</p><blockquote><p>源码地址：<a href="https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/8f2780b3e4fa/src/share/vm/runtime/objectMonitor.hpp" target="_blank" rel="noopener">https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/8f2780b3e4fa/src/share/vm/runtime/objectMonitor.hpp</a></p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd8s4ot006j32200u0wlo.jpg" alt="源码"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9tkd1isj31000j0dou.jpg" alt=""></p><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncBlockAndMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncsTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">syncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用以下命令对代码进行编译并查看字节码：</p><pre class=" language-shell"><code class="language-shell">javac SyncBlockAndMethod.javajavap -verbose SyncBlockAndMethod.class</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd8snzh217j31pc0sigpx.jpg" alt="同步代码块"></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd8sp2uvkrj31ok0gi419.jpg" alt="同步方法"></p><h3 id="什么是重入"><a href="#什么是重入" class="headerlink" title="什么是重入"></a>什么是重入</h3><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时,将会处于阻塞状态,但当一个线程再次请求自己持有对象锁的临界资源时,这种情况属于重入。</p><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncsTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="为什么会对synchronized嗤之以鼻"><a href="#为什么会对synchronized嗤之以鼻" class="headerlink" title="为什么会对synchronized嗤之以鼻"></a>为什么会对synchronized嗤之以鼻</h3><ul><li>早期版本中, synchronized属于重量级锁,依赖于Mutex Lock实现</li><li>线程之间的切换需要从用户态转换到核心态,开销较大</li></ul><h3 id="Java6以后-synchronized性能得到了很大的提升"><a href="#Java6以后-synchronized性能得到了很大的提升" class="headerlink" title="Java6以后, synchronized性能得到了很大的提升"></a>Java6以后, synchronized性能得到了很大的提升</h3><ul><li>Adaptive Spinning  自适应自旋锁</li><li>Lightweight Locking  轻量级锁</li><li>Lock Eliminate  锁消除</li><li>Biased Locking   偏向锁</li><li>Lock Coarsening  锁粗化</li><li>…</li></ul><h4 id="自旋锁与自适应自旋锁-Adaptive-Spinning"><a href="#自旋锁与自适应自旋锁-Adaptive-Spinning" class="headerlink" title="自旋锁与自适应自旋锁 (Adaptive Spinning)"></a>自旋锁与自适应自旋锁 (Adaptive Spinning)</h4><p><strong>自旋锁</strong></p><ul><li>许多情况下,共享数据的锁定状态持续时间较短,切换线程不值得</li><li>通过让线程执行忙循环等待锁的释放,不让出CPU</li><li>缺点:若锁被其他线程长时间占用,会带来许多性能上的开销</li></ul><p><strong>自适应自旋锁</strong></p><ul><li>自旋的次数不再固定</li><li>由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定</li></ul><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>更彻底的优化</p><ul><li>JIT编译时,对运行上下文进行扫描,去除不可能存在竞争的锁</li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferWithoutSync</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//StringBuffer是线程安全,由于sb只会在append方法中使用,不可能被其他线程引用</span>        <span class="token comment" spellcheck="true">//因此sb属于不可能共享的资源,JVM会自动消除内部的锁</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBufferWithoutSync withoutSync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBufferWithoutSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            withoutSync<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>StringBuffer源码：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd8t11tamhj314s0ac0ud.jpg" alt=""></p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><ul><li>通过扩大加锁的范围,避免反复加锁和解锁</li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoarseSync</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">copyString100Times</span><span class="token punctuation">(</span>String target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="synchronized的四种状态"><a href="#synchronized的四种状态" class="headerlink" title="synchronized的四种状态"></a>synchronized的四种状态</h3><ul><li>无锁、偏向锁、轻量级锁、重量级锁.</li></ul><p><strong>锁膨胀方向:</strong>无锁→偏向锁-→轻量级锁-→重量级锁</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>减少同一线程获取锁的代价</p><ul><li>大多数情况下,锁不存在多线程竞争,总是由同一线程多次获得</li></ul><p><strong>核心思想:</strong><br>如果一个线程获得了锁,那么锁就进入偏向模式,此时Mark Word的结构也变为偏向锁结构,当该线程再次请求锁时,无需再做任何同步操作,即获取锁的过程只需要检查Mark Word的锁标记位为偏向锁以及当前线程Id等于Mark Word的ThreadID即可,这样就省去了大量有关锁申请的操作。</p><p><strong>缺点：</strong>不适用于锁竞争比较激烈的多线程场合</p><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>轻量级锁是由偏向锁升级来的,偏向锁运行在一个线程进入同步块的情况下,当第二个线程加入锁争用的时候,偏向锁就会升级为轻量级锁。</p><p><strong>适应的场景:</strong>线程交替执行同步块</p><p>若存在同一时间访问同一锁的情况,就会导致轻量级锁膨胀为重量级锁</p><p><strong>轻量级锁的加锁过程：</strong></p><p>（1）在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（LockRecord）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为Displaced Mark Word。这时候线程堆栈与对象头的状态如下图所示：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9f9c9vqjj30dw06rt8s.jpg" alt="img"></p><p>（2）拷贝对象头中的Mark Word复制到锁记录中。</p><p>（3）拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针,并将Lock record里的owner指针指向object mark word。如果更新成功，则执行步骤4，否则执行步骤5。</p><p>（4）如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如下图所示：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9faqcd1vj30dw09iaa9.jpg" alt=""></p><p>（5）如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。而当前线程便尝试使用自旋来获取锁，自旋咱们前面讲过，就是为了不让线程阻塞，而采用循环去获取锁的过程。</p><p><strong>轻量级锁的解锁过程：</strong></p><ol><li>通过CAS操作尝试把线程中复制的Displaced Mark Word对象替换当前的Mark Word。</li><li>如果替换成功，整个同步过程就完成了。</li><li>如果替换失败，说明有其他线程尝试过获取该锁（此时锁己膨胀），那就要在释放锁的同时，唤醒被挂起的线程。</li></ol><p><strong>锁的内存语义</strong></p><p>当线程释放锁时，Java内存模型会把该线程对应的本地内存中的共享变量刷新到主内存中;<br>而当线程获取锁时, Java内存模型会把该线程对应的本地内存置为无效,从而使得被监视器保护的临界区代码必须从主内存中读取共享变量。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9fm8podwj30lw0hct9j.jpg" alt=""></p><h4 id="偏向锁、轻量级锁、重量级锁的汇总"><a href="#偏向锁、轻量级锁、重量级锁的汇总" class="headerlink" title="偏向锁、轻量级锁、重量级锁的汇总"></a>偏向锁、轻量级锁、重量级锁的汇总</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9fhgz7kdj316o0jcwic.jpg" alt="偏向锁、轻量级锁、重量级锁总结"></p><h3 id="synchronized和ReentrantLock的区别"><a href="#synchronized和ReentrantLock的区别" class="headerlink" title="synchronized和ReentrantLock的区别"></a>synchronized和ReentrantLock的区别</h3><h4 id="ReentrantLock-再入锁"><a href="#ReentrantLock-再入锁" class="headerlink" title="ReentrantLock (再入锁)"></a>ReentrantLock (再入锁)</h4><ul><li>位于java.util.concurrent.locks包</li><li>和CountDownLatch、Future Task、Semaphore一 样基于AQS实现</li><li>能够实现比synchronized更细粒度的控制,如控制fairness</li><li>调用lock()之后 ,必须调用unlock()释放锁</li><li>性能未必比synchronized高,并且也是可重入的</li></ul><h4 id="ReentrantLock公平性的设置"><a href="#ReentrantLock公平性的设置" class="headerlink" title="ReentrantLock公平性的设置"></a>ReentrantLock公平性的设置</h4><ul><li>ReentrantLock fairLock = new ReentrantLock(true);</li><li>参数为true时,倾向于将锁赋予等待时间最久的线程</li><li>公平锁:获取锁的顺序按先后调用lock方法的顺序(慎用)</li><li>非公平锁:抢占的顺序不一定,看运气</li><li>synchronized是非公平锁</li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockDemo</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ReentrantLock公平性的设置</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReentrantLockDemo rtld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>rtld<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>rtld<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印结果：</p><pre><code>Thread-0 get lockThread-1 get lockThread-0 get lockThread-1 get lock...</code></pre><h4 id="ReentrantLock将锁对象化"><a href="#ReentrantLock将锁对象化" class="headerlink" title="ReentrantLock将锁对象化"></a>ReentrantLock将锁对象化</h4><ul><li>判断是否有线程,或者某个特定线程,在排队等待获取锁</li><li>带超时的获取锁的尝试</li><li>感知有没有成功获取锁</li></ul><p><strong>是否能将wait/notify/notifyAll对象化</strong></p><ul><li>java.util.concurrent.locks.Condition  (典型的应用场景：ArrayBlockingQueue)</li></ul><p>源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>        notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="synchronized和ReentrantLock的区别总结"><a href="#synchronized和ReentrantLock的区别总结" class="headerlink" title="synchronized和ReentrantLock的区别总结"></a>synchronized和ReentrantLock的区别总结</h4><ul><li>synchronized是关键字 , ReentrantLock是类</li><li>ReentrantLock可以对获取锁的等待时间进行设置,避免死锁</li><li>ReentrantLock 可以获取各种锁的信息</li><li>ReentrantLock可以灵活地实现多路通知</li><li>机制: sync操作Mark Word , lock调用Unsafe类的park()方法</li></ul><h2 id="什么是Java内存模型中的happens-before"><a href="#什么是Java内存模型中的happens-before" class="headerlink" title="什么是Java内存模型中的happens-before"></a>什么是Java内存模型中的happens-before</h2><h3 id="Java内存模型JMM"><a href="#Java内存模型JMM" class="headerlink" title="Java内存模型JMM"></a>Java内存模型JMM</h3><p>Java内存模型(即Java Memory Model ,简称JMM)本身是一种抽象的概念，并不真实存在,它描述的是一组规则或规范,通过这组规范定义了程序中各个变量(包括实例字段,静态字段和构成数组对象的元素)的访问方式。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9f04wgvnj30ii0ff76e.jpg" alt=""></p><h3 id="JMM中的主内存和工作内存"><a href="#JMM中的主内存和工作内存" class="headerlink" title="JMM中的主内存和工作内存"></a>JMM中的主内存和工作内存</h3><h4 id="JMM中的主内存"><a href="#JMM中的主内存" class="headerlink" title="JMM中的主内存"></a>JMM中的主内存</h4><ul><li>存储Java实例对象</li><li>包括成员变量、类信息、常量、静态变量等</li><li>属于数据共享的区域,多线程并发操作时会引发线程安全问题</li></ul><h4 id="JMM中的工作内存"><a href="#JMM中的工作内存" class="headerlink" title="JMM中的工作内存"></a>JMM中的工作内存</h4><ul><li>存储当前方法的所有本地变量信息,本地变量对其他线程不可见</li><li>字节码行号指示器、Native方法信息</li><li>属于线程私有数据区域,不存在线程安全问题</li></ul><h4 id="JMM与Java内存区域划分是不同的概念层次"><a href="#JMM与Java内存区域划分是不同的概念层次" class="headerlink" title="JMM与Java内存区域划分是不同的概念层次"></a>JMM与Java内存区域划分是不同的概念层次</h4><ul><li>JMM描述的是一组规则,围绕原子性,有序性、可见性展开</li><li>相似点:存在共享区域（堆、方法区）和私有区域（程序计数器、虚拟机栈、本地方法栈）</li></ul><h4 id="主内存与工作内存的数据存储类型以及操作方式归纳"><a href="#主内存与工作内存的数据存储类型以及操作方式归纳" class="headerlink" title="主内存与工作内存的数据存储类型以及操作方式归纳"></a>主内存与工作内存的数据存储类型以及操作方式归纳</h4><ul><li>方法里的基本数据类型本地变量将直接存储在工作内存的栈帧结构中</li><li>引用类型的本地变量:引用存储在工作内存中,实例存储在主内存中</li><li>成员变量、static变量、 类信息均会被存储在主内存中</li><li>主内存共享的方式是线程各拷贝- -份数据到工作内存,操作完成后刷新回主内存</li></ul><h3 id="JMM如何解决可见性问题"><a href="#JMM如何解决可见性问题" class="headerlink" title="JMM如何解决可见性问题"></a>JMM如何解决可见性问题</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9et7eppxj317k0imk11.jpg" alt="Java内存模型与硬件内存架构的关系"></p><blockquote><p>优秀博客：<a href="https://blog.csdn.net/javazejian/article/details/72772461" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/72772461</a></p></blockquote><h4 id="指令重排序需要满足的条件"><a href="#指令重排序需要满足的条件" class="headerlink" title="指令重排序需要满足的条件"></a>指令重排序需要满足的条件</h4><ul><li><p>在单线程环境下不能改变程序运行的结果</p></li><li><p>存在数据依赖关系的不允许重排序</p></li></ul><blockquote><p>总结：无法通过happens- before原则推导出来的,才能进行指令的重排序</p></blockquote><h4 id="happens-before的八大原则"><a href="#happens-before的八大原则" class="headerlink" title="happens-before的八大原则"></a>happens-before的八大原则</h4><h5 id="1-程序次序规则"><a href="#1-程序次序规则" class="headerlink" title="1.程序次序规则:"></a>1.程序次序规则:</h5><p> 一个线程内,按照代码顺序,书写在前面的操作先行发生于书写在后面的操作;</p><h5 id="2-锁定规则"><a href="#2-锁定规则" class="headerlink" title="2.锁定规则:"></a>2.锁定规则:</h5><p>一个unLock操作先行发生于后面对同一个锁的lock操作;</p><h5 id="3-volatile变量规则"><a href="#3-volatile变量规则" class="headerlink" title="3.volatile变量规则:"></a>3.volatile变量规则:</h5><p>对一个变量的写操作先行发生于后面对这个变量的读操作;</p><h5 id="4-传递规则"><a href="#4-传递规则" class="headerlink" title="4.传递规则:"></a>4.传递规则:</h5><p>如果操作A先行发生于操作B ,而操作B又先行发生于操作C ,则可以得出操作A先行发生于操作C ;</p><h5 id="5-线程启动规则"><a href="#5-线程启动规则" class="headerlink" title="5.线程启动规则:"></a>5.线程启动规则:</h5><p>Thread对象的start()方法先行发生于此线程的每一个动作;</p><h5 id="6-线程中断规则"><a href="#6-线程中断规则" class="headerlink" title="6.线程中断规则:"></a>6.线程中断规则:</h5><p>对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生;</p><h5 id="7-线程终结规则"><a href="#7-线程终结规则" class="headerlink" title="7.线程终结规则:"></a>7.线程终结规则:</h5><p>线程中所有的操作都先行发生于线程的终止检测,我们可以通过Thread.join0方法结束、Thread.isAlive(的返回值手段检测到线程已经终止执行;</p><h5 id="8-对象终结规则"><a href="#8-对象终结规则" class="headerlink" title="8.对象终结规则:"></a>8.对象终结规则:</h5><p>一个对象的初始化完成先行发生于他的finalize(方法的开始;</p><h4 id="happens-before的概念"><a href="#happens-before的概念" class="headerlink" title="happens-before的概念"></a>happens-before的概念</h4><blockquote><p>A操作的结果需要对B操作可见,则A与B存在happens-before关系</p></blockquote><p>如果两个操作不满足上述任意一个happens-before规则 ,那么这两个操作就没有顺序的保障, JVM可以对这两个操作进行重排序;如果操作A happens-before操作B，那么操作A在内存上所做的操作对操作B都是可见的。</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><ul><li>JVM提供的轻量级同步机制</li><li>保证被volatile修饰的共享变量对所有线程总是可见的</li><li>禁止指令重排序优化</li><li>使用volatile不能保证线程安全，需要变量的操作满足原子性</li></ul><h4 id="volatile的可见性"><a href="#volatile的可见性" class="headerlink" title="volatile的可见性"></a>volatile的可见性</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9gf0at91j30zi0aqn4b.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9gg6tqypj30pc0ein41.jpg" alt=""></p><h4 id="volatile变量为何立即可见？"><a href="#volatile变量为何立即可见？" class="headerlink" title="volatile变量为何立即可见？"></a>volatile变量为何立即可见？</h4><ul><li>当写一个volatile变量时，JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中；</li><li>当读取一个volatile变量时，JMM会把该线程对应的工作内存置为无效，那么就需要从主内存中重新读取该变量。</li></ul><h4 id="volatile变量如何禁止重排序优化"><a href="#volatile变量如何禁止重排序优化" class="headerlink" title="volatile变量如何禁止重排序优化"></a>volatile变量如何禁止重排序优化</h4><ul><li><p>对此我们需要先了解内存屏障（Memory Barrier），其作用有二个：</p><ol><li>保证特定操作的执行顺序</li><li>保证某些变量的内存可见性</li></ol></li><li><p>通过插入内存屏障指令来禁止对内存屏障前后的指令执行重排序优化</p></li><li><p>强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本</p></li></ul><h4 id="单例的双重检测实现"><a href="#单例的双重检测实现" class="headerlink" title="单例的双重检测实现"></a>单例的双重检测实现</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9glnntzej322q0rmkis.jpg" alt=""></p><h3 id="volatile和synchronized的区别"><a href="#volatile和synchronized的区别" class="headerlink" title="volatile和synchronized的区别"></a>volatile和synchronized的区别</h3><ol><li>volatile本质是在告诉JVM当前变量在寄存器(工作内存)中的值是不确定的，需要从主存中读取; synchronized则是锁定当前变量， 只有当前线程可以访问该变量,其他线程被阻塞住直到该线程完成变量操作为止</li><li>volatile仅能使用在变量级别; syr shronized则可以使用在变量、方法和类级别</li><li>volatile仅能实现变量的修改可见性,不能保证原子性;而synchronized则可以保证变量修改的可见性和原子性</li><li>volatile不会造成线程的阻塞; synchronized可能会造成线程的阻塞</li><li>volatile标记的变量不会被编译器优化; synchronized标记的变量可以被编译器优化</li></ol><h3 id="CAS-Compare-and-Swap"><a href="#CAS-Compare-and-Swap" class="headerlink" title="CAS ( Compare and Swap )"></a>CAS ( Compare and Swap )</h3><blockquote><p>一种高效实现线程安全性的方法</p></blockquote><ul><li>支持原子更新操作,适用于计数器,序列发生器等场景</li><li>属于乐观锁机制,号称lock-free</li><li>CAS操作失败时由开发者决定是继续尝试,还是执行别的操作</li></ul><h4 id="CAS思想"><a href="#CAS思想" class="headerlink" title="CAS思想"></a>CAS思想</h4><ul><li>包含三个操作数一 内存位置(V)、预期原值( A )和新值(B)</li></ul><h4 id="CAS多数情况下对开发者来说是透明的"><a href="#CAS多数情况下对开发者来说是透明的" class="headerlink" title="CAS多数情况下对开发者来说是透明的"></a>CAS多数情况下对开发者来说是透明的</h4><ul><li>J.U.C的atomic包提供了常用的原子性数据类型以及引用、数组等相关原子类型和更新操作工具,是很多线程安全程序的首选</li><li>Unsafe类虽提供CAS服务, 但因能够操纵任意内存地址读写而有隐患</li><li>Java9以后,可以使用Variable Handle API来替代Unsafe</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>若循环时间长,则开销很大</li><li>只能保证一个共享变量的原子操作</li><li>存在ABA问题，可以通过使用AtomicStampedReference来解决，但由于是通过版本标记来解决所以存在一定程度的性能损耗</li></ul><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Java线程池"><a href="#Java线程池" class="headerlink" title="Java线程池"></a>Java线程池</h3><h4 id="利用Executors创建不同的线程池满足不同场景的需求"><a href="#利用Executors创建不同的线程池满足不同场景的需求" class="headerlink" title="利用Executors创建不同的线程池满足不同场景的需求"></a>利用Executors创建不同的线程池满足不同场景的需求</h4><ol><li>newFixedThreadPool(int nThreads)指定工作线程数量的线程池</li><li>newCachedThreadPool()处理大量短时间工作任务的线程池，<br>(1)试图缓存线程并重用,当无缓存线程可用时,就会创建新的工作线程;<br>(2)如果线程闲置的时间超过阈值，则会被终止并移出缓存;<br>(3)系统长时间闲置的时候,不会消耗什么资源</li><li>newSingleThreadExecutor()创建唯一的工作者线程来执行任务,如果线程异常结束，会有另一个线程取代它</li><li>newSingleThreadScheduledExecutor()与newScheduledThreadPool(int corePoolSize)<br>定时或者周期性的工作调度,两者的区别在于单一工作线程还是多个线程</li><li>newWorkStealingPool()内部会构建ForkJoinPool ,利用working-stealing算法,并行地处理任务,不保证处理顺序</li></ol><h4 id="Fork-Join框架（JDK7提供）"><a href="#Fork-Join框架（JDK7提供）" class="headerlink" title="Fork/Join框架（JDK7提供）"></a>Fork/Join框架（JDK7提供）</h4><p>把大任务分割成若干个小任务并行执行，最终汇总每个小任务结果后得到大任务结果的框架</p><blockquote><p>working-stealing算法：某个线程从其他线程的任务队列里窃取任务来执行</p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9nlaz69xj31560ick3u.jpg" alt="Fork/Join框架"></p><h4 id="为什么要使用线程池"><a href="#为什么要使用线程池" class="headerlink" title="为什么要使用线程池?"></a>为什么要使用线程池?</h4><ol><li>减低资源消耗，避免频繁地创建和销毁线程</li><li>提高线程的可管理性，例如可控的线程数量，线程状态的监控和统一创建/销毁线程</li></ol><h4 id="J-U-C的三个Executor接口："><a href="#J-U-C的三个Executor接口：" class="headerlink" title="J.U.C的三个Executor接口："></a>J.U.C的三个Executor接口：</h4><ul><li>Executor：运行新任务的简单接口，将任务提交和任务执行细节解耦</li><li>ExecutorService：具备管理执行器和任务生命周期的方法，提交任务机制更完善</li><li>ScheduleExecutorService：支持Future和定期执行任务</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9o1blp7bj31680n0n5f.jpg" alt="Executor框架"></p><p>ThreadPoolExecutor:</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9o6skp98j31780nw12s.jpg" alt="线程池执行任务流程图"></p><h4 id="ThreadPoolExecutor的构造函数"><a href="#ThreadPoolExecutor的构造函数" class="headerlink" title="ThreadPoolExecutor的构造函数"></a>ThreadPoolExecutor的构造函数</h4><ul><li>corePoolSize :核心线程数量</li><li>maximumPoolSize :线程不够用时能够创建的最大线程数</li><li>workQueue :任务等待队列</li><li>keepAliveTime :抢占的顺序不一定 ,看运气</li><li>threadFactory :创建新线程, Executors .defaultThreadFactory()</li><li>handler :线程池的饱和策略<br>（1）AbortPolicy :直接抛出异常,这是默认策略<br>（2）CallerRunsPolicy :用调用者所在的线程来执行任务<br>（3）DiscardOldestPolicy :丢弃队列中靠最前的任务,并执行当前任务<br>（4）DiscardPolicy :直接丢弃任务<br>（5）实现RejectedExecutionHandler接口的自定 义handler</li></ul><p><strong>新任务提交execute执行后的判断</strong></p><ul><li>如果运行的线程少于corePoolSize ,则创建新线程来处理任务,即使线程池中的其他线程是空闲的;</li><li>如果线程池中的线程数量大于等于corePoolSize且小于maximumPoolSize ,则只有当workQueue满时才创建新的线程去处理任务;</li><li>如果设置的corePoolSize和maximumPoolSize相同,则创建的线程池的大小是固定的,这时如果有新任务提交,若workQueue未满,则将请求放入workQueue中,等待有空闲的线程去从workQueue中取任务并处理;</li><li>如果运行的线程数量大于等于maximumPoolSize ,这时如果workQueue已经满了.则通过handler所指定的策略来处理任务;</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9osoodhbj30n50le3zj.jpg" alt="execute执行流程图"></p><h4 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h4><ul><li>RUNNING：能接受新提交的任务，并且也能处理阻塞队列中的任务</li><li>SHUTDOWN：不再接受新提交的任务，但可以处理存量任务（调用shutdown方法）</li><li>STOP：不再接受新提交的任务，也不处理存量任务（调用shutdownNow方法）</li><li>TIDYING：所有的任务都已终止</li><li>TERMINATED：terminated() 方法执行完后进入该状态</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9oz8hcy4j30qn0ai3zi.jpg" alt="线程池的状态转换过程"></p><p>工作线程的生命周期：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd9p0tjzh4j30no0ii0t8.jpg" alt=""></p><h4 id="线程池大小如何选定"><a href="#线程池大小如何选定" class="headerlink" title="线程池大小如何选定"></a>线程池大小如何选定</h4><ul><li>CPU密集型任务：线程数 = 按照CPU核心数或者CPU核心数 + 1设定</li><li>I/O密集型任务：线程数 = CPU核心数 * (1 + 平均等待时间 / 平均工作时间)</li></ul><blockquote><p>可参考网站：<a href="http://www.ideabuffer.cn/2017/04/04/深入理解Java线程池：ThreadPoolExecutor/" target="_blank" rel="noopener">http://www.ideabuffer.cn/2017/04/04/深入理解Java线程池：ThreadPoolExecutor/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程相关知识</title>
      <link href="/2020/03/14/xian-cheng-zhuang-tai-jie-xi-yi-ji-zhong-duan-xian-cheng-de-fang-fa/"/>
      <url>/2020/03/14/xian-cheng-zhuang-tai-jie-xi-yi-ji-zhong-duan-xian-cheng-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="线程的六个状态"><a href="#线程的六个状态" class="headerlink" title="线程的六个状态"></a>线程的六个状态</h2><h3 id="六个状态"><a href="#六个状态" class="headerlink" title="六个状态"></a>六个状态</h3><ul><li>新建(<code>New</code>) :创建后尚未启动的线程的状态</li><li>运行(<code>Runnable</code>):包含Running和Ready</li><li>无限期等待(<code>Waiting</code>):不会被分配CPU执行时间,需要显式被唤醒</li></ul><blockquote><p>1、没有设置Timeout参数的0bject.wait()方法。<br>2、没有设置Timeout参数的Thread.join()方法。<br>3、LockSupport.park()方法。</p></blockquote><ul><li>限期等待(<code>Timed Waiting</code>):在一定时间后会由系统自动唤醒</li></ul><blockquote><p>1、Thread.sleep()方法。</p><p>2、设置了Timeout参数的Object.wait()方法。</p><p>3、设置了Timeout参数的Thread.join()方法。</p><p>4、LockSupport.parkNanos()方法。5、LockSupport.parkUntil()方法。</p></blockquote><ul><li>阻塞(<code>Blocked</code>):等待获取拍他锁</li><li>结束(<code>Terminated</code>):已终止线程的状态,线程已经结束执行</li></ul><blockquote><p>在终止的线程上调用start()方法会抛出异常</p></blockquote><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Thread is : "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current main thread is : "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>current main thread is : mainFightCurrent Thread is : Thread-0Exception in thread "main" java.lang.IllegalThreadStateException    at java.lang.Thread.start(Thread.java:708)    at com.interview.javabasic.thread.ThreadTest.main(ThreadTest.java:19)</code></pre><h3 id="线程状态以及状态之间的转换"><a href="#线程状态以及状态之间的转换" class="headerlink" title="线程状态以及状态之间的转换"></a>线程状态以及状态之间的转换</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9syk32xj30qw0iwag1.jpg" alt="线程状态图"></p><h2 id="sleep和wait的区别"><a href="#sleep和wait的区别" class="headerlink" title="sleep和wait的区别"></a>sleep和wait的区别</h2><p><strong>基本的差别</strong></p><ul><li>sleep是Thread类的方法 , wait是Object类中定义的方法</li><li>sleep(方法可以在任何地方使用</li><li>wait()方法只能在synchronized方法或synchronized块中使用</li></ul><p><strong>最主要的本质区别</strong></p><ul><li>Thread.sleep只会让出CPU ,不会导致锁行为的改变</li><li>Object.wait不仅让出CPU ,还会释放已经占有的同步资源锁</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitSleepDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//final定义不可变的</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread A is waiting to get lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread A get lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread A do wait method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread A is done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread B is waiting to get lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread B get lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread B is sleeping 10 ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread B is done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>thread A is waiting to get lockthread A get lockthread B is waiting to get lockthread A do wait methodthread B get lockthread B is sleeping 10 msthread B is donethread A is done</code></pre><h2 id="notify和notifyAll的区别"><a href="#notify和notifyAll的区别" class="headerlink" title="notify和notifyAll的区别"></a>notify和notifyAll的区别</h2><p><strong>两个概念</strong></p><ul><li>锁池EntryList</li></ul><blockquote><p>假设线程A已经拥有了某个对象(不是类)的锁，而其它线程B、C想要调用这个对象的某个synchronized方法(或者块)，由于B、C线程在进入对象的synchronized方法(或者块)之前必须先获得该对象锁的拥有权，而恰巧该对象的锁目前正被线程A所占用，此时B、C线程就会被阻塞，进入一个地方去等待锁的释放，这个地方便是该对象的锁池</p></blockquote><ul><li>等待池WaitSet</li></ul><blockquote><p>假设线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁，同时线程A就进入到了该对象的等待池中，进入到等待池中的线程不会去竞争该对象的锁。</p></blockquote><p><strong>区别</strong></p><ul><li>notifyAll 会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li><li>notify 只会随机选取一个处于等待池中的线程进入锁池去竞争获取锁的机会。</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> go <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> NotificationDemo test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable waitTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    test<span class="token punctuation">.</span><span class="token function">shouldGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" finished Execution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Runnable notifyTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                test<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" finished Execution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>waitTask<span class="token punctuation">,</span> <span class="token string">"WT1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//will wait</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>waitTask<span class="token punctuation">,</span> <span class="token string">"WT2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//will wait</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>waitTask<span class="token punctuation">,</span> <span class="token string">"WT3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//will wait</span>        Thread t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>notifyTask<span class="token punctuation">,</span><span class="token string">"NT1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//will notify</span>        <span class="token comment" spellcheck="true">//starting all waiting thread</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//pause to ensure all waiting thread started successfully</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//starting notifying thread</span>        t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * wait and notify can only be called from synchronized method or bock     */</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">shouldGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>go <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" is going to wait on this object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//release lock and reacquires on wakeup</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is woken up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        go <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//resetting condition</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * both shouldGo() and go() are locked on current object referenced by "this" keyword     */</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>go <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" is going to notify all or one thread waiting on this object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            go <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//making condition true for waiting thread</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// only one out of three waiting thread WT1, WT2,WT3 will woke up</span>            <span class="token comment" spellcheck="true">//notifyAll(); // all waiting thread  WT1, WT2,WT3 will woke up</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code># notify()运行结果（只唤醒一个处于等待池中的线程）Thread[WT1,5,main] is going to wait on this objectThread[WT3,5,main] is going to wait on this objectThread[WT2,5,main] is going to wait on this objectThread[NT1,5,main] is going to notify all or one thread waiting on this objectThread[WT1,5,main] is woken upNT1 finished ExecutionWT1 finished Execution# notifyAll()运行结果（处于等待池中的线程全部唤醒）Thread[WT1,5,main] is going to wait on this objectThread[WT3,5,main] is going to wait on this objectThread[WT2,5,main] is going to wait on this objectThread[NT1,5,main] is going to notify all or one thread waiting on this objectThread[WT2,5,main] is woken upNT1 finished ExecutionWT2 finished ExecutionThread[WT3,5,main] is woken upThread[WT3,5,main] is going to wait on this objectThread[WT1,5,main] is woken upThread[WT1,5,main] is going to wait on this object</code></pre><h2 id="yield的用法"><a href="#yield的用法" class="headerlink" title="yield的用法"></a>yield的用法</h2><p><strong>概念</strong></p><p>当调用Thread.yield()函数时,会给线程调度器一个当前线程愿意让出CPU使用的暗示,但是线程调度器可能会忽略这个暗示。(不会影响锁)</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YieldDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable yieldTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>yieldTask<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>yieldTask<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="如何中断线程"><a href="#如何中断线程" class="headerlink" title="如何中断线程"></a>如何中断线程</h2><p><strong>已经被抛弃的方法</strong></p><ul><li>通过调用stop(方法停止线程</li><li>通过调用suspend()和resume(方法</li></ul><p><strong>目前使用的方法</strong></p><ul><li>调用interrupt() ,通知线程应该中断了</li></ul><blockquote><p>①如果线程处于被阻塞状态,那么线程将立即退出被阻塞状态,并抛出一个InterruptedException异常。</p><p>②如果线程处于正常活动状态,那么会将该线程的中断标志设置为true。被设置中断标志的线程将继续正常运行,不受影响。</p></blockquote><ul><li>需要被调用的线程配合中断</li></ul><blockquote><p>①在正常运行任务时,经常检查本线程的中断标志位,如果被设置了中断标志就自行停止线程。<br>②如果线程处于正常活动状态,那么会将该线程的中断标志设置为true。被设置中断标志的线程将继续正常运行,不受影响。</p></blockquote><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable interruptTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//在正常运行任务时，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 休眠100ms</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">") loop "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//在调用阻塞方法时正确处理InterruptedException异常。（例如，catch异常后就结束线程。）</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">") catch InterruptedException."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>interruptTask<span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" ("</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">") is new."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 启动“线程t1”</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" ("</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">") is started."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程休眠300ms，然后主线程给t1发“中断”指令。</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" ("</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">") is interrupted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程休眠300ms，然后查看t1的状态。</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" ("</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">") is interrupted now."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>t1 (NEW) is new.t1 (RUNNABLE) is started.t1 (RUNNABLE) loop 1t1 (RUNNABLE) loop 2t1 (TIMED_WAITING) is interrupted.t1 (RUNNABLE) catch InterruptedException.t1 (TERMINATED) is interrupted now.</code></pre><p>题外话：</p><blockquote><p>如何有效地让薪资更上一层楼，增加自己的筹码<br>1、尽量打听公司岗位职位的薪酬幅度<br>2、感知目标公司的缺人程度,工作的紧急程度<br>3、最有效的方式是已经具备了有竞争力的offer</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程与并发</title>
      <link href="/2020/03/13/java-duo-xian-cheng-yu-bing-fa/"/>
      <url>/2020/03/13/java-duo-xian-cheng-yu-bing-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1、进程和线程的区别"><a href="#1、进程和线程的区别" class="headerlink" title="1、进程和线程的区别"></a>1、进程和线程的区别</h2><h3 id="进程和线程的由来"><a href="#进程和线程的由来" class="headerlink" title="进程和线程的由来"></a>进程和线程的由来</h3><ul><li><strong>串行</strong>：初期的计算机智能串行执行任务,并且需要长时间等待用户输入</li><li><strong>批处理</strong>：预先将用户的指令集中成清单,批量串行处理用户指令.仍然无法并发执行</li><li><strong>进程</strong>：进程独占内存空间。保存各自运行状态,相互间不干扰且可以互相切换,为并发处理任务提供了可能</li><li><strong>线程</strong>：共享进程的内存资源。相互间切换更快速,支持更细粒度的任务控制,使进程内的子任务得以并发执行</li></ul><p><strong>进程是资源分配的最小单位,线程是CPU调度的最小单位</strong></p><ul><li>所有与进程相关的资源,都被记录在PCB中</li><li>进程是抢占处理机的调度单位;线程属于某个进程,共享其资源</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9r3wqvsj30ly08w406.jpg" alt=""></p><ul><li>线程只由堆栈寄存器、程序计数器和TCB组成<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9rcz3v8j30f008ggpf.jpg" alt=""></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>线程不能看做独立应用,而进程可看做独立应用</li><li>进程有独立的地址空间,相互不影响,线程只是进程的不同执行路径</li><li>线程没有独立的地址空间,多进程的程序比多线程程序健壮</li><li>进程的切换比线程的切换开销大</li></ul><h3 id="Java进程和线程的关系"><a href="#Java进程和线程的关系" class="headerlink" title="Java进程和线程的关系"></a>Java进程和线程的关系</h3><ul><li>Java对操作系统提供的功能进行封装,包括进程和线程</li><li>运行一个程序会产生一个进程,进程包含至少-个线程</li><li>每个进程对应一个JVM实例,多个线程共享JVM里的堆</li><li>Java采用单线程编程模型,程序会自动创建主线程</li><li>主线程可以创建子线程,原则上要后于子线程完成执行</li></ul><p>java是具有主线程的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、Thread中的start和run方法的区别"><a href="#2、Thread中的start和run方法的区别" class="headerlink" title="2、Thread中的start和run方法的区别"></a>2、Thread中的start和run方法的区别</h2><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9rkssdyj30si05igmd.jpg" alt=""></p><ul><li>调用start()方法会创建一个新的子线程并启动</li><li>run()方法只是Thread的一 个普通方法的调用</li></ul><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Thread is : "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current main thread is : "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// min</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Thread-0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>current main thread is : mainFightCurrent Thread is : mainFightCurrent Thread is : Thread-0</code></pre><p>使用start是调用外部类：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9ruyitsj30r804yjrq.jpg" alt=""><br>在<code>openjdk</code>网页中查找源码（<a href="https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/6f7370a85071/src/share/native/java/lang/Thread.c" target="_blank" rel="noopener">链接🔗</a>）：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9s152tmj31de0p4tel.jpg" alt=""><br>从<code>Tread.c</code>文件中查找<code>start0</code>，发现引入了<code>jvm</code>文件，再去查询对应的方法(<a href="https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/b4fd7e078c54/src/share/vm/prims/jvm.cpp" target="_blank" rel="noopener">链接🔗</a>)：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9s8uc3vj310t0u0aj0.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz9sezr8wj315u0ckace.jpg" alt=""></p><h2 id="3、Thread和Runnable是什么关系"><a href="#3、Thread和Runnable是什么关系" class="headerlink" title="3、Thread和Runnable是什么关系"></a>3、Thread和Runnable是什么关系</h2><ul><li>Thread是实现了 Runnable接口的类,使得run支持多线程</li><li>因类的单一继承原则,推荐多使用Runnable接口</li></ul><p>示例代码：</p><ul><li>Thread示例<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread start : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">",i= "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>Thred主类：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      MyThread mt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MyThread mt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MyThread mt3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"Thread3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mt1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mt2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mt3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>运行结果：<pre><code>Thread start : Thread1,i= 0Thread start : Thread3,i= 0Thread start : Thread3,i= 1Thread start : Thread2,i= 0Thread start : Thread3,i= 2Thread start : Thread1,i= 1Thread start : Thread2,i= 1Thread start : Thread3,i= 3Thread start : Thread2,i= 2......</code></pre></li><li>Runnable示例<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">MyRunnable</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread start : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">",i= "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>Runable主类<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      MyRunnable mr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"Runnable1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MyRunnable mr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"Runnable2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MyRunnable mr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"Runnable3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr1<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr2<span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr3<span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>运行结果：<pre><code>Thread start : Runnable2,i= 0Thread start : Runnable3,i= 0Thread start : Runnable3,i= 1Thread start : Runnable1,i= 0Thread start : Runnable1,i= 1Thread start : Runnable1,i= 2......</code></pre></li></ul><h3 id="如何给run-方法传参（研究一下）"><a href="#如何给run-方法传参（研究一下）" class="headerlink" title="如何给run()方法传参（研究一下）"></a>如何给run()方法传参（研究一下）</h3><p>实现的方式主要有三种</p><ul><li>构造函数传参</li><li>成员变量传参</li><li>回调函数传参</li></ul><h3 id="如何实现处理线程的返回值"><a href="#如何实现处理线程的返回值" class="headerlink" title="如何实现处理线程的返回值"></a>如何实现处理线程的返回值</h3><p>实现的方式主要有三种</p><ul><li><p>主线程等待法</p><pre class=" language-!"><code class="language-!">实现简单，但是需要自己实现循环等待的逻辑，当需要等待的变量越多，代码将显得越臃肿，没法进行精准控制</code></pre></li><li><p>使用Thread类的join()阻塞当前线程以等待子线程处理完毕</p><pre class=" language-!"><code class="language-!">比上一个方法简单，但是粒度不够细,</code></pre><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CycleWait</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String value<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      value <span class="token operator">=</span> <span class="token string">"we have data now"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      CycleWait cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CycleWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cw<span class="token punctuation">)</span><span class="token punctuation">;</span>      t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果没有以下两种方法，则在线程执行是先打印value值，而不是先等待线程然后赋值，导致程序一运行打印value:null</span>      <span class="token comment" spellcheck="true">/* 主线程等待法，需要判断线程实例中的valu是否为空，当为空的时候等待100毫秒，直到线程完成，最后打印 */</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>cw<span class="token punctuation">.</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/* 阻塞当前线程以等待子线程处理完毕，最后打印 */</span><span class="token comment" spellcheck="true">//        t.join();</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value : "</span> <span class="token operator">+</span> cw<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>value : we have data now</code></pre></li><li><p>通过Callable接口实现:通过FutureTask Or线程池获取</p></li></ul><p>示例代码：</p><p>Callable接口实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String value<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ready to work"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>通过FutureTask获取</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task has not finished, please wait!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task return: "</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>task has not finished, please wait!Ready to worktask donetask return: test</code></pre><ul><li>通过线程池获取</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Future<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService newCachedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> newCachedThreadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task has not finished, please wait!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            newCachedThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>task has not finished, please wait!Ready to worktask donetest</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer算法</title>
      <link href="/2020/03/11/jian-zhi-offer-suan-fa/"/>
      <url>/2020/03/11/jian-zhi-offer-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="数组中的重复数字"><a href="#数组中的重复数字" class="headerlink" title="数组中的重复数字"></a>数组中的重复数字</h3><p><strong>题目描述：</strong></p><blockquote><p>输入:<br>{2, 3, 1, 0, 2, 5}<br>输出:<br>2</p></blockquote><h4 id="解法1-数组排序"><a href="#解法1-数组排序" class="headerlink" title="解法1 数组排序"></a>解法1 数组排序</h4><p><strong>分析：</strong></p><p>将输入数组排序，再判断相邻位置是否存在相同数字，如果存在，对 duplication 赋值返回，否则继续比较。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters:</span>    <span class="token comment" spellcheck="true">//    numbers:     an array of integers</span>    <span class="token comment" spellcheck="true">//    length:      the length of array numbers</span>    <span class="token comment" spellcheck="true">//    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;</span>    <span class="token comment" spellcheck="true">//                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++</span>    <span class="token comment" spellcheck="true">//    这里要特别注意~返回任意重复的一个，赋值duplication[0]</span>    <span class="token comment" spellcheck="true">// Return value:       true if the input is valid, and there are some duplications in the array number</span>    <span class="token comment" spellcheck="true">//                     otherwise false</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numbers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> duplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers <span class="token operator">==</span> null <span class="token operator">||</span> length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> numbers<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            duplication<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度：</strong></p><table><thead><tr><th>时间复杂度</th><th>O(nlogn)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><p><strong>问题：</strong></p><p>循环时要注意下边比较i和i+1的值时，i的初始值为0，i的最大长度应该是length-1；下边比较i和i-1的值时，i的初始值为1，最大长度应该是length。</p><h4 id="解法2-利用-HashSet-或者ArrayList解决"><a href="#解法2-利用-HashSet-或者ArrayList解决" class="headerlink" title="解法2 利用 HashSet 或者ArrayList解决"></a>解法2 利用 HashSet 或者ArrayList解决</h4><p><strong>分析：</strong></p><p>利用 HashSet 或者ArrayList解决，从头到尾扫描数组，每次扫描到一个数，判断当前数是否存在 HashSet 或ArrayList中，如果存在，则重复，对 duplication 赋值返回，否则将该数加入到 HashSet 或ArrayList中。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numbers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> duplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers <span class="token operator">==</span> null <span class="token operator">||</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                duplication<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度：</strong></p><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="解法3-“归位”"><a href="#解法3-“归位”" class="headerlink" title="解法3 “归位”"></a>解法3 “归位”</h4><p><strong>分析：</strong></p><p>数组的长度为 n 且所有数字都在 0 到 n-1 的范围内，我们可以将每次遇到的数进行”归位”，当某个数发现自己的”位置”被相同的数占了，则出现重复。<br>扫描整个数组，当扫描到下标为 i 的数字时，首先比较该数字（m）是否等于 i，如果是，则接着扫描下一个数字；如果不是，则拿 m 与第 m 个数比较。如果 m 与第 m 个数相等，则说明出现重复了；如果 m 与第 m 个数不相等，则将 m 与第 m 个数交换，将 m “归位”，再重复比较交换的过程，直到发现重复的数。</p><p><em>举例：</em><br><em>以数组 {2,3,1,0,2,5,3} 为例</em><br><em>当 i = 0 时，nums[i] = 2 != i，判断 nums[i] 不等于 nums[nums[i]]，交换 nums[i] 和 nums[nums[i]]，交换后数组为：{1,3,2,0,2,5,3}</em><br><em>此时 i = 0，nums[i] = 1 != i，判断 nums[i] 不等于 nums[nums[i]]，交换 nums[i] 和 nums[nums[i]]，交换后数组为：{3,1,2,0,2,5,3}</em><br><em>此时 i = 0，nums[i] = 3 != i，判断 nums[i] 不等于 nums[nums[i]]，交换 nums[i] 和 nums[nums[i]]，交换后数组为：{0,1,2,3,2,5,3}</em><br><em>此时 i = 0，nums[i] = 0 = i，继续下一组</em><br><em>当 i = 1，nums[i] = 1 = i，继续下一组</em><br><em>当 i = 2，nums[i] = 2 = i，继续下一组</em><br><em>当 i = 3，nums[i] = 3 = i，继续下一组</em><br><em>当 i = 4，nums[i] = 2 != i，判断 nums[i] 等于 nums[nums[i]]，出现重复，赋值返回</em></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> duplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                duplication<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度：</strong></p><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><p><strong>题目描述：</strong></p><blockquote><p>给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。给定一个数，判断这个数是否在该二维数组中。<br>[<br>[1,   4,  7, 11, 15],<br>[2,   5,  8, 12, 19],<br>[3,   6,  9, 16, 22],<br>[10, 13, 14, 17, 24],<br>[18, 21, 23, 26, 30]<br>]</p></blockquote><h4 id="解法1-暴力法"><a href="#解法1-暴力法" class="headerlink" title="解法1 暴力法"></a>解法1 暴力法</h4><p><strong>分析：</strong></p><p>挨个遍历数组，如果找到就返回 true。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> null <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度：</strong></p><table><thead><tr><th>时间复杂度</th><th>O(n^2)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h4 id="解法2-从左下找"><a href="#解法2-从左下找" class="headerlink" title="解法2 从左下找"></a>解法2 从左下找</h4><p><strong>分析：</strong></p><p>该二维数组中的一个数，小于它的数一定在其上边，大于它的数一定在其右边。因此，从左下角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间，当前元素的查找区间为右上角的所有元素。其中 M 为行数，N 为 列数。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> null <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         <span class="token keyword">int</span> row <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cols <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> cols<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                row<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                col<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度：</strong></p><table><thead><tr><th>时间复杂度</th><th>O(M+N)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h4 id="解法3-从右上找"><a href="#解法3-从右上找" class="headerlink" title="解法3 从右上找"></a>解法3 从右上找</h4><p><strong>分析：</strong></p><p>该二维数组中的一个数，小于它的数一定在其左边，大于它的数一定在其下边。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间，当前元素的查找区间为左下角的所有元素。其中 M 为行数，N 为 列数。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> null <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cols <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> col <span class="token operator">=</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> col <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                col<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                row<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度：</strong></p><table><thead><tr><th>时间复杂度</th><th>O(M+N)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><p><strong>题目描述</strong></p><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”<br>Input:<br>“A B”</p><p>Output:<br>“A%20B”</p></blockquote><h4 id="解法1-调用自带函数"><a href="#解法1-调用自带函数" class="headerlink" title="解法1 调用自带函数"></a>解法1 调用自带函数</h4><p><strong>代码:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>StringBuffer str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法2-用新的数组存"><a href="#解法2-用新的数组存" class="headerlink" title="解法2 用新的数组存"></a>解法2 用新的数组存</h4><p><strong>分析:</strong></p><p>当遇到 “ “，就追加 “%20”，否则遇到什么追加什么。</p><p><strong>代码:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>StringBuffer str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法3-填充字符"><a href="#解法3-填充字符" class="headerlink" title="解法3 填充字符"></a>解法3 填充字符</h4><p><strong>分析：</strong></p><p>① 在字符串尾部填充任意字符，使得字符串的长度等于替换之后的长度。因为一个空格要替换成三个字符（%20），所以当遍历到一个空格时，需要在尾部填充两个任意字符。</p><p>② 令 P1 指向字符串原来的末尾位置，P2 指向字符串现在的末尾位置。P1 和 P2 从后向前遍历，当 P1 遍历到一个空格时，就需要令 P2 指向的位置依次填充 02%（注意是逆序的），否则就填充上 P1 指向字符的值。从后向前遍是为了在改变 P2 所指向的内容时，不会影响到 P1 遍历原来字符串的内容。</p><p>③ 当 P2 遇到 P1 时（P2 &lt;= P1），或者遍历结束（P1 &lt; 0），退出。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>StringBuffer str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> P1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>P1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> P2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>P1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> P2 <span class="token operator">></span> P1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> d <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>P1<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p></blockquote><h4 id="解法1-非递归"><a href="#解法1-非递归" class="headerlink" title="解法1 非递归"></a>解法1 非递归</h4><p><strong>分析：</strong></p><p>listNode 是链表，只能从头遍历到尾，但是输出却要求从尾到头，这是典型的”先进后出”，我们可以想到栈！<br>ArrayList 中有个方法是 add(index,value)，可以指定 index 位置插入 value 值，所以我们在遍历 listNode 的同时将每个遇到的值插入到 list 的 0 位置，最后输出 listNode 即可得到逆序链表。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode tmp <span class="token operator">=</span> listNode<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度</strong></p><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h4 id="解法2-递归"><a href="#解法2-递归" class="headerlink" title="解法2 递归"></a>解法2 递归</h4><p><strong>分析：</strong></p><p>借助系统的”栈”帮忙打印。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>listNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度</strong></p><table><thead><tr><th>时间复杂度</th><th>O(n)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(n)</strong></td></tr></tbody></table><h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><p><strong>题目描述</strong></p><blockquote><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p></blockquote><p><strong>分析：</strong></p><p>1、当插入时，直接插入 stack1。</p><p>2、当弹出时，当 stack2 不为空，弹出 stack2 栈顶元素，如果 stack2 为空，将 stack1 中的全部数逐个出栈入栈 stack2，再弹出 stack2 栈顶元素。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度</strong></p><table><thead><tr><th>时间复杂度</th><th>O(1)</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h3 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h3><p><strong>题目描述</strong></p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p><strong>分析：</strong></p><p>f(n) = f(n - 1) + f(n - 2) + f(n - 3) + … + f(2) + f(1)<br>f(n - 1) = f(n - 2) + f(n - 3) + … + f(2) + f(1)<br>f(n) = 2*f(n - 1)</p><p>其本质是斐波那契数列的变种。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">JumpFloorII</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//if (target &lt;= 1)</span>        <span class="token comment" spellcheck="true">//    return target;</span>        <span class="token comment" spellcheck="true">//int sum = 1;</span>        <span class="token comment" spellcheck="true">//for (int i = 2; i &lt;= target; i++) {</span>        <span class="token comment" spellcheck="true">//    sum = 2 * sum;</span>        <span class="token comment" spellcheck="true">//}</span>        <span class="token comment" spellcheck="true">//return sum;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度</strong></p><table><thead><tr><th>时间复杂度</th><th>O(target) ?</th></tr></thead><tbody><tr><td><strong>空间复杂度</strong></td><td><strong>O(1)</strong></td></tr></tbody></table><h3 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h3><p><strong>题目描述</strong></p><blockquote><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><p>比如n=3时，2*3的矩形块有3种覆盖方法：</p><p><img src="https://uploadfiles.nowcoder.com/images/20200218/6384065_1581999858239_64E40A35BE277D7E7C87D4DCF588BE84" alt="img"></p></blockquote><p><strong>分析：</strong></p><ul><li><p>当n=1时，只有一种方法，f(1)=1;</p></li><li><p>当n=2时，既可以横着覆盖，也可以竖着覆盖，有两种方法，f(2)=2;</p></li><li><p>当n=n时，考虑n=n-1和n=n-2的情况，f(n)=f(n - 1) + f(n - 2)</p><p>其实质还是斐波那契数列。</p></li></ul><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2*1  1.  2*2. 2   2*3. 3.   2*4  5</span>    <span class="token comment" spellcheck="true">// n = (n - 1) + (n - 2)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">RectCover</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> one <span class="token operator">+</span> two<span class="token punctuation">;</span>            one <span class="token operator">=</span> two<span class="token punctuation">;</span>            two <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> two<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>复杂度</strong></p><table><thead><tr><th align="center">时间复杂度</th><th align="center">O(n)</th></tr></thead><tbody><tr><td align="center"><strong>空间复杂度</strong></td><td align="center"><strong>O(1)</strong></td></tr></tbody></table><h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p></blockquote><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><p><strong>分析：</strong></p><p>1、先将数字转换成二进制字符串<br>2、用String.split()函数存入一个数组中<br>3、遍历数组跟1比较，同时计数<br>4、输出计数值</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">NumberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> splits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>splits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。<br>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 20->10100 &amp; 10011 = 10000    10000 &amp; 01111 = 00000</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">NumberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h3><p><strong>题目描述</strong></p><blockquote><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。保证base和exponent不同时为0</p></blockquote><h4 id="解法1-内置函数Math-pow"><a href="#解法1-内置函数Math-pow" class="headerlink" title="解法1 内置函数Math.pow()"></a>解法1 内置函数Math.pow()</h4><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法2-暴力法"><a href="#解法2-暴力法" class="headerlink" title="解法2 暴力法"></a>解法2 暴力法</h4><h5 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h5><p>将数字 base 连续乘 exponent 次。时间复杂度O(n) ，空间复杂度O(1)。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 时间复杂度O(n)  空间复杂度O(1)</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> base<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isNegative <span class="token operator">=</span> exponent <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> e<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">*=</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> isNegative <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span>result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法3-二分法"><a href="#解法3-二分法" class="headerlink" title="解法3 二分法"></a>解法3 二分法</h4><h5 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h5><p>为了方便讨论，假设指数<code>exponent</code>是正数。那么递归式如下：</p><ul><li>如果<code>exponent</code>是偶数，<code>Power(base, exponent) = Power(base, exponent / 2) * Power(base, exponent / 2)</code> </li><li>如果<code>exponent</code>是奇数，<code>Power(base, exponent) = base * Power(base, exponent / 2) * Power(base, exponent / 2)</code> </li></ul><p>对于负指数<code>exponent</code>的情况，取其绝对值先计算。将最后结果取倒数即可。</p><p>例如：2的4次方。可以分解为2的二次方乘以2的二次方。</p><p>时间复杂度是 O(logN)；由于采用递归结构，空间复杂度是 O(logN)。</p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> base<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isNegative <span class="token operator">=</span> exponent <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">Power</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> e <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> result <span class="token operator">*</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> isNegative <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span>result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="链表中第K个节点"><a href="#链表中第K个节点" class="headerlink" title="链表中第K个节点"></a>链表中第K个节点</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个链表，输出该链表中倒数第k个结点。</p></blockquote><h4 id="解法1-快慢指针法"><a href="#解法1-快慢指针法" class="headerlink" title="解法1 快慢指针法"></a>解法1 快慢指针法</h4><p><strong>分析：</strong></p><p>首先定义两个指向链表头的指针p ,q;先令一个指针指向第k节点，然后两个指针同时向后移动，最后q指向的即为倒数第k个节点。当k为零或节点为空返回。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class ListNode {    int val;    ListNode next = null;    ListNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">FindKthToTail</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i <span class="token operator">&lt;</span> k <span class="token operator">?</span> null <span class="token operator">:</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个链表，反转链表后，输出新链表的表头。</p></blockquote><p><strong>分析：</strong></p><p>题目所给的是单链表，反转后的样子：最后一个结点指向倒数第二个，倒数第二个指向倒数第三个，……，第二个指向第一个，<strong>第一个指向null</strong>; 知道了反转后各个结点指向哪之后，就需要开始调整每个结点的next指针。 这就需要把结点挨个从链表上摘下来，做调整； 这个调整过程需要两个指针辅助：pre记录其前一个结点位置，好让该结点的next指针指向前一个结点，但是在指向前一个结点前需要用一个指针next记录后一个结点地址，避免结点丢失。 </p><p>例子：</p><ul><li>以head结点为例步骤如下： </li><li>1.反转后head是指向null，所以未反转的时候其前一个结点应该是null，初始化pre指针为null； </li><li>2.用next指针记录head的下一个结点head.next； </li><li>3.从链表上摘下head，即让head.next指向pre； </li><li>4.此时已完成head结点的摘取及与前一个节点的连接，则我们需要操作下一个结点：故需移动pre和head，让pre指向head，head指向下一个节点。 </li><li>重复这四个操作直到head走完原链表，指向null时，循环结束，返回pre。</li></ul><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class ListNode {    int val;    ListNode next = null;    ListNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">ReverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p></blockquote><p><strong>分析：</strong></p><p>定义四个变量代表范围，up、down、left、right，不断收缩矩阵的边界。</p><ol><li>向右走存入整行的值，当存入后，该行再也不会被遍历，代表上边界的 up 加一，同时判断是否和代表下边界的 down 交错</li><li>向下走存入整列的值，当存入后，该列再也不会被遍历，代表右边界的 right 减一，同时判断是否和代表左边界的 left 交错</li><li>向左走存入整行的值，当存入后，该行再也不会被遍历，代表下边界的 down 减一，同时判断是否和代表上边界的 up 交错</li><li>向上走存入整列的值，当存入后，该列再也不会被遍历，代表左边界的 left 加一，同时判断是否和代表右边界的 right 交错</li></ol><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> null <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> list<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> down <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 最上面一行</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> left<span class="token punctuation">;</span> col <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 向下逼近</span>           up <span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">></span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 最右边一列</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> top <span class="token operator">=</span> up<span class="token punctuation">;</span> top <span class="token operator">&lt;=</span> down<span class="token punctuation">;</span> top<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 向左逼近</span>           right <span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 最下边一行</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> right<span class="token punctuation">;</span> row <span class="token operator">>=</span> left<span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>down<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 向上逼近</span>           down <span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>down <span class="token operator">&lt;</span> up<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 最左边一列</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> bottom <span class="token operator">=</span> down<span class="token punctuation">;</span> bottom <span class="token operator">>=</span> up<span class="token punctuation">;</span> bottom<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 向右逼近</span>           left <span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h3><p><strong>题目描述</strong></p><blockquote><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><p>注意：保证测试中不会当栈为空的时候，对栈调用pop()或者min()或者top()方法。</p></blockquote><p><strong>分析：</strong></p><p>使用两个辅助栈，一个为<code>stackTotal</code>用来存放所有元素，一个为<code>stackMin</code>用来存放最小元素，两个栈中的数量始终保持一致，当新元素小于<code>stackMin</code>栈顶元素时，向其栈顶加入新元素，否则，加入之前的栈顶元素。当执行出栈时，两个栈同时弹出栈顶元素。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存放所有元素的栈</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stackTotal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存放最小元素的栈</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stackMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackTotal<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackMin<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stackMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&lt;=</span> stackMin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stackMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                stackMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackMin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackTotal<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackMin<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stackTotal<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stackMin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h3><p><strong>题目描述</strong></p><blockquote><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p></blockquote><p><strong>分析：</strong></p><p>新建一个栈，将数组A压入栈中，当栈顶元素等于数组B时，就将其出栈，当循环结束时，判断栈是否为空，若为空则返回true.</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">IsPopOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pushA<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> popA<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pushA<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> popA<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> pushA<span class="token punctuation">.</span>length <span class="token operator">!=</span> popA<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pushA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> popA<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a>从上往下打印二叉树</h3><p><strong>题目描述</strong></p><blockquote><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p></blockquote><p><strong>分析：</strong></p><p>本题使用知识点是树和队列。在Java中Queue是和List、Map同等级别的接口，LinkedList中也实现了Queue接口，该接口中的主要函数有：</p><ol><li>容量不够或队列为空时不会抛异常：offer（添加队尾元素）、peek（访问队头元素）、poll（访问队头元素并移除）</li><li>容量不够或队列为空时抛异常：add、element（访问队列元素）、remove（访问队头元素并移除）</li></ol><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">PrintFromTopToBottom</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p></blockquote><p><strong>分析：</strong></p><img src="https://uploadfiles.nowcoder.com/images/20190826/686102969_1566800300967_CCFB0ECBF81C69C067CF534EBA6264BF" alt="图片说明" style="zoom:50%;"><p>上图为二叉搜索树示例：</p><ul><li>一棵 BST ：左孩子 &lt; 根结点 &lt; 右孩子</li><li>一棵 BST 的左子树或者右子树都是 BST</li></ul><p>后序遍历是：[3, 4, 9, 5, 12, 11, 10]，结合图再从左往右分析后序序列，分析子树，可以发现对于每一棵子树，它的根结点总是对应该子树的后序序列的最后一个数</p><p>那么，只需要不断地确定出左子树区间和右子树区间，并且判断：左子树区间的所有结点值 &lt; 根结点值 &lt; 右子树区间所有结点值，这个条件是否满足即可</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">VerifySquenceOfBST</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> sequence<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> null <span class="token operator">||</span> sequence<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">helperVerify</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">helperVerify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sequence<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> sequence<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">helperVerify</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">helperVerify</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> i<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h3><p><strong>题目描述</strong></p><blockquote><p>输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p></blockquote><h4 id="解法1-递归"><a href="#解法1-递归" class="headerlink" title="解法1 递归"></a>解法1 递归</h4><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">FindPath</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        target <span class="token operator">-=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//result.add(list)是把list这个对象的引用地址添加到result了，</span>            <span class="token comment" spellcheck="true">//result中的元素就会共用list，而list是我们用来存放当前路径的地方，</span>            <span class="token comment" spellcheck="true">//因此我们需要复制一份之后加入result数组中</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FindPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FindPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用了list这个列表来存储当前走过的节点，所以为了寻找新的路径，</span>        <span class="token comment" spellcheck="true">//递归完返回上一次的时候要删除掉，这样才能保证寻找下一个路径的时候是正确的，</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><p><strong>题目描述</strong></p><blockquote><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p></blockquote><h4 id="解法1-1"><a href="#解法1-1" class="headerlink" title="解法1"></a>解法1</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>用一个数组来存储中序遍历的节点，然后再从头到尾，建立节点前后的连接关系。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**public class TreeNode {    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">Convert</span><span class="token punctuation">(</span>TreeNode pRootOfTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRootOfTree <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 中序遍历存入list中</span>        ArrayList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改指针</span>        <span class="token keyword">return</span> <span class="token function">Convert</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TreeNode <span class="token function">Convert</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         TreeNode head <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode node <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            cur <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化（现在看着有点懵）：<a href="https://blog.nowcoder.net/n/17c95de2427e49abb207a6a9d37c602d" target="_blank" rel="noopener">https://blog.nowcoder.net/n/17c95de2427e49abb207a6a9d37c602d</a></p><h3 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a>剪绳子</h3><p><strong>题目描述</strong></p><blockquote><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p></blockquote><h4 id="解法1-数学公式推导"><a href="#解法1-数学公式推导" class="headerlink" title="解法1  数学公式推导"></a>解法1  数学公式推导</h4><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>参考精选题解<a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/mian-shi-ti-14-i-jian-sheng-zi-tan-xin-si-xiang-by/" target="_blank" rel="noopener">LeetCode</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h3><p><strong>题目描述</strong></p><blockquote><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。</p></blockquote><h4 id="解法1-堆（优先队列）"><a href="#解法1-堆（优先队列）" class="headerlink" title="解法1  堆（优先队列）"></a>解法1  堆（优先队列）</h4><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>参考精选题解<a href="https://www.nowcoder.com/questionTerminal/9be0172896bd43948f8a32fb954e1be1?f=discussion" target="_blank" rel="noopener">牛客网</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 小顶堆</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 大顶堆</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//记录偶数个还是奇数个</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每次插入小顶堆的是当前大顶堆中最大的数</span>    <span class="token comment" spellcheck="true">//每次插入大顶堆的是当前小顶堆中最小的数</span>    <span class="token comment" spellcheck="true">//这样保证小顶堆中的数永远大于等于大顶堆中的数</span>    <span class="token comment" spellcheck="true">//中位数就可以方便地从两者的根结点中获取了</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Integer num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//个数为偶数的话，则先插入到大顶堆，然后将大顶堆中最大的数插入小顶堆中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> maxHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//个数为奇数的话，则先插入到小顶堆，然后将小顶堆中最小的数插入大顶堆中</span>            minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">GetMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当前为偶数个，则取小顶堆和大顶堆的堆顶元素求平均</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> maxHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当前为奇数个，则直接从小顶堆中取元素即可</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h3><p><strong>题目描述</strong></p><blockquote><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p></blockquote><h4 id="解法1-正则表达式"><a href="#解法1-正则表达式" class="headerlink" title="解法1  正则表达式"></a>解法1  正则表达式</h4><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://blog.nowcoder.net/n/8a5f152679ba4cadb3df87ad5cfbb6bd?f=comment" target="_blank" rel="noopener">牛客网</a></p><p>^ 和 美元符号框定正则表达式，它指引这个正则表达式对文本中的所有字符都进行匹配。如果省略这些标识，那么只要一个字符串中包含一个数字这个正则表达式就会进行匹配。如果仅包含 ^ ，它将匹配以一个数字开头的字符串。如果仅包含$ ，则匹配以一个数字结尾的字符串。</p><pre><code>[-+]?</code></pre><p>正负号后面的 ? 后缀表示这个负号是可选的,表示有0到1个负号或者正号</p><pre><code>\\d*</code></pre><p>\d的含义和[0-9]一样。它匹配一个数字。后缀 * 指引它可匹配零个或者多个数字。</p><pre><code>(?:\\.\\d*)?</code></pre><p>(?: …)?表示一个可选的非捕获型分组。* 指引这个分组会匹配后面跟随的0个或者多个数字的小数点。</p><pre><code>(?:[eE][+\\-]?\d+)?</code></pre><p>这是另外一个可选的非捕获型分组。它会匹配一个e(或E)、一个可选的正负号以及一个或多个数字。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String pattern <span class="token operator">=</span> <span class="token string">"^[-+]?\\d*(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?$"</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h3><p><strong>题目描述</strong></p><blockquote><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p></blockquote><h4 id="解法1-2"><a href="#解法1-2" class="headerlink" title="解法1"></a>解法1</h4><h5 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://blog.nowcoder.net/n/f8bf65dab8094a23bb0a44651013ba43?f=comment" target="_blank" rel="noopener">牛客网</a></p><p>用preArray记录上一次访问的值，count表明当前值出现的次数，如果下一个值和当前值相同那么count++；如果不同count–，减到0的时候就要更换新的preValue值了，如果存在超过数组长度一半的值，那么最后preValue一定会是该值。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">MoreThanHalfNum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> null <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preArray <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>preArray <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                count <span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    preArray <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>preArray <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                num <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">></span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> preArray <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="圆圈中最后剩下的数字"><a href="#圆圈中最后剩下的数字" class="headerlink" title="圆圈中最后剩下的数字"></a>圆圈中最后剩下的数字</h3><p><strong>题目描述</strong></p><blockquote><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p></blockquote><h4 id="解法1-模拟链表"><a href="#解法1-模拟链表" class="headerlink" title="解法1 模拟链表"></a>解法1 模拟链表</h4><h5 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/" target="_blank" rel="noopener">LeetCode</a></p><p>假设当前删除的位置是 i<code>ndex</code>，下一个删除的数字的位置是 <code>index + m</code>。但是，由于把当前位置的数字删除了，后面的数字会前移一位，所以实际的下一个位置是 <code>index + m - 1</code>。由于数到末尾会从头继续数，所以最后取模一下，就是 <code>(index + m - 1)%n</code>。时间复杂度 $O(n^2)$</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法2-数学❤️"><a href="#解法2-数学❤️" class="headerlink" title="解法2 数学❤️"></a>解法2 数学❤️</h4><h5 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/" target="_blank" rel="noopener">LeetCode</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="求1-2-3-…-n"><a href="#求1-2-3-…-n" class="headerlink" title="求1+2+3+…+n"></a>求1+2+3+…+n</h3><p><strong>题目描述</strong></p><blockquote><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）</p></blockquote><h4 id="解法1-公式转换"><a href="#解法1-公式转换" class="headerlink" title="解法1 公式转换"></a>解法1 公式转换</h4><h5 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://blog.nowcoder.net/n/aca8f476d831452b995c8d6009d3c782?f=comment" target="_blank" rel="noopener">牛客网</a></p><p>这是一个等差数列，$sum = n * (1 + n) / 2 = (n + n^2) / 2$，<code>Math.pow(n,2)</code>表示 $n^2$；右移一位相当于除以2</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// n*(n+1)/2 = (n+n^2)/2</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法2-递归-1"><a href="#解法2-递归-1" class="headerlink" title="解法2 递归"></a>解法2 递归</h4><h5 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://www.nowcoder.com/questionTerminal/7a0da8fc483247ff8800059e12d7caf1?answerType=1&amp;f=discussion" target="_blank" rel="noopener">牛客网</a></p><p>在递归算法中，需要终止递归，一般我们会通过if来进行判断，现在不让通过if进行判断，我们可以使用逻辑与&amp;&amp;连接符。A&amp;&amp;B，表示如果A成立则执行B，否则如果A不成立，不用执行B。在n&gt;1的时候，执行递归函数。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 递归</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">+=</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="扑克牌中的顺子"><a href="#扑克牌中的顺子" class="headerlink" title=" 扑克牌中的顺子"></a><a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/" target="_blank" rel="noopener"> 扑克牌中的顺子</a></h4><p><strong>题目描述</strong></p><blockquote><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p><pre><code>输入: [0,0,1,2,5]输出: True</code></pre></blockquote><h4 id="解法1-集合-Set-遍历"><a href="#解法1-集合-Set-遍历" class="headerlink" title="解法1 集合 Set + 遍历"></a>解法1 集合 Set + 遍历</h4><h5 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/solution/mian-shi-ti-61-bu-ke-pai-zhong-de-shun-zi-ji-he-se/" target="_blank" rel="noopener">LeetCode</a></p><p>遍历五张牌，遇到大小王（即 0）直接跳过。<br>判别重复： 利用 Set 实现遍历判重， Set 的查找方法的时间复杂度为 O(1)；<br>获取最大 / 最小的牌： 借助辅助变量 max 和 min，遍历统计即可。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max <span class="token operator">-</span> min <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法2-排序-遍历"><a href="#解法2-排序-遍历" class="headerlink" title="解法2 排序 + 遍历"></a>解法2 排序 + 遍历</h4><h5 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/solution/mian-shi-ti-61-bu-ke-pai-zhong-de-shun-zi-ji-he-se/" target="_blank" rel="noopener">LeetCode</a></p><p>先对数组执行排序。<br>判别重复： 排序数组中的相同元素位置相邻，因此可通过遍历数组，判断 nums[i]=nums[i+1] 是否成立来判重。<br>获取最大 / 最小的牌： 排序后，数组末位元素 nums[4]为最大牌；元素 nums[joker] 为最小牌，其中 jokerjoker 为大小王的数量。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> joker <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 统计大小王数量</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> joker<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判别重复</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 最大牌 - 最小牌 &lt; 5 则可构成顺子</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>joker<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h4><p><strong>题目描述</strong></p><blockquote><p>在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><h4 id="解法1-动态规划"><a href="#解法1-动态规划" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h4><h5 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h5><p>参考题解<a href="https://www.nowcoder.com/questionTerminal/459bd355da1549fa8a49e350bf3df484?answerType=1&amp;f=discussion" target="_blank" rel="noopener">牛客网</a></p><p>dp[n]代表以当前元素为截止点的连续子序列的最大和，如果dp[n-1]&gt;0，dp[n]=dp[n]+dp[n-1]，因为当前数字加上一个正数一定会变大；如果dp[n-1]&lt;0，dp[n]不变，因为当前数字加上一个负数一定会变小。使用一个变量max记录最大的dp值返回即可。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 动态规划问题</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">FindGreatestSumOfSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1～n-整数中-1-出现的次数"><a href="#1～n-整数中-1-出现的次数" class="headerlink" title="1～n 整数中 1 出现的次数"></a>1～n 整数中 1 出现的次数</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p><pre><code>输入：n = 12输出：5</code></pre></blockquote><h4 id="解法1-数学"><a href="#解法1-数学" class="headerlink" title="解法1 数学"></a>解法1 数学</h4><h5 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/solution/mian-shi-ti-43-1n-zheng-shu-zhong-1-chu-xian-de-2/" target="_blank" rel="noopener">LeetCode</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">NumberOf1Between1AndN_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hight <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hight <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> hight <span class="token operator">*</span> digit<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> hight <span class="token operator">*</span> digit <span class="token operator">+</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token punctuation">(</span>hight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> digit<span class="token punctuation">;</span>            low <span class="token operator">+=</span> cur <span class="token operator">*</span> digit<span class="token punctuation">;</span>            cur <span class="token operator">=</span> hight <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            hight <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            digit <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><h3 id="左旋字符串"><a href="#左旋字符串" class="headerlink" title="左旋字符串"></a>左旋字符串</h3><p><strong>题目描述</strong></p><blockquote><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。</p></blockquote><h4 id="解法1-字符串切片sbstring"><a href="#解法1-字符串切片sbstring" class="headerlink" title="解法1 字符串切片sbstring"></a>解法1 字符串切片sbstring</h4><h5 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h5><p>拼接字符串：<code>str.substring(n) + str.substring(0, n);</code></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> null <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法二-列表遍历拼接"><a href="#解法二-列表遍历拼接" class="headerlink" title="解法二 列表遍历拼接"></a>解法二 列表遍历拼接</h4><h5 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h5><p>新建一个<code>StringBuilder</code> ，记为<code>res</code>；向<code>res</code>添加 “第 n + 1位至末位的字符” ；再向 <code>res</code>添加 “首位至第 n 位的字符” ；将 <code>res</code>转化为字符串并返回。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">%</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="和为S的两个数字"><a href="#和为S的两个数字" class="headerlink" title="和为S的两个数字"></a>和为S的两个数字</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p></blockquote><h4 id="解法1-双指针法"><a href="#解法1-双指针法" class="headerlink" title="解法1 双指针法"></a>解法1 双指针法</h4><h5 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h5><p>初始化： 双指针 i , j分别指向数组 array的左右两端。<br>循环搜索： 当双指针相遇时跳出；<br>计算和 <code>int res = array[i] + array[j]</code><br>若 <code>res &gt; sum</code>，则指针 j 向左移动，即执行 j –；<br>若 <code>res &lt; sum</code>，则指针i向右移动，即执行 i = i ++；<br>若 <code>res = sum</code> ，把两元素添加到list集合中；</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">FindNumbersWithSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> array <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="和为S的连续正数序列"><a href="#和为S的连续正数序列" class="headerlink" title="和为S的连续正数序列"></a>和为S的连续正数序列</h3><p><strong>题目描述</strong></p><blockquote><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p><pre><code>输入：target = 9输出：[[2,3,4],[4,5]]</code></pre></blockquote><h4 id="解法1-滑动窗口"><a href="#解法1-滑动窗口" class="headerlink" title="解法1 滑动窗口"></a>解法1 滑动窗口</h4><h5 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/solution/shi-yao-shi-hua-dong-chuang-kou-yi-ji-ru-he-yong-h/" target="_blank" rel="noopener">LeetCode</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token operator">></span> <span class="token function">FindContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>       <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> sumVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>sumVal <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>               sumVal <span class="token operator">+=</span> right<span class="token punctuation">;</span>               right<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sumVal <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>               sumVal <span class="token operator">=</span> sumVal <span class="token operator">-</span> left<span class="token punctuation">;</span>               left<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>           sumVal <span class="token operator">-=</span> left<span class="token punctuation">;</span>           left<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>###平衡二叉树</p><p><strong>题目描述</strong></p><blockquote><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p><pre><code>给定二叉树 [3,9,20,null,null,15,7] 3/ \9  20 /  \15   7返回 true </code></pre></blockquote><h4 id="解法1-后序遍历"><a href="#解法1-后序遍历" class="headerlink" title="解法1 后序遍历"></a>解法1 后序遍历</h4><h5 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/solution/mian-shi-ti-55-ii-ping-heng-er-cha-shu-cong-di-zhi/" target="_blank" rel="noopener">LeetCode</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">IsBalanced_Solution</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>###两个链表的第一个公共结点</p><p><strong>题目描述</strong></p><blockquote><p>输入两个链表，找出它们的第一个公共节点。</p><pre><code>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出：Reference of the node with value = 8输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</code></pre></blockquote><h4 id="解法1-双指针法-1"><a href="#解法1-双指针法-1" class="headerlink" title="解法1 双指针法"></a>解法1 双指针法</h4><h5 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/solution/shuang-zhi-zhen-fa-lang-man-xiang-yu-by-ml-zimingm/" target="_blank" rel="noopener">LeetCode</a></p><p>遍历两遍这两个链表，如果有重复的节点，那么一定能够使遍历的指针相等。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*public class ListNode {    int val;    ListNode next = null;    ListNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">FindFirstCommonNode</span><span class="token punctuation">(</span>ListNode pHead1<span class="token punctuation">,</span> ListNode pHead2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pHead1 <span class="token operator">==</span> null <span class="token operator">||</span> pHead2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        ListNode p1 <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>        ListNode p2 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> null<span class="token punctuation">)</span> p1 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">==</span> null<span class="token punctuation">)</span> p2 <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>###<a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&amp;&amp;tqId=11208&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">链表中环的入口</a></p><p><strong>题目描述</strong></p><blockquote><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p></blockquote><h4 id="解法1-双指针（快慢指针）法"><a href="#解法1-双指针（快慢指针）法" class="headerlink" title="解法1 双指针（快慢指针）法"></a>解法1 双指针（快慢指针）法</h4><h5 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/" target="_blank" rel="noopener">LeetCode</a></p><p>定义两个指针开始都指向头结点，然后快指针一次走二步，慢指针一次走一步，当两个指针第一次相遇时，跳出循环，此时让快指针再次重新指向头结点，慢指针位置不变，接下来快慢指针都一步一步走，当快慢指针再次相遇时，跳出循环，此时相遇点即为该链表的环的入口结点。</p><p>时间复杂度 O(N)：总体为线性复杂度；<br>空间复杂度 O(1)：双指针使用常数大小的额外空间。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* public class ListNode {    int val;    ListNode next = null;    ListNode(int val) {        this.val = val;    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">EntryNodeOfLoop</span><span class="token punctuation">(</span>ListNode pHead<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> pHead<span class="token punctuation">;</span>        ListNode fast <span class="token operator">=</span> pHead<span class="token punctuation">,</span> slow <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> null <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fast <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fast<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第一个只出现一次的字符"><a href="#第一个只出现一次的字符" class="headerlink" title=" 第一个只出现一次的字符"></a><a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/" target="_blank" rel="noopener"> 第一个只出现一次的字符</a></h3><p><strong>题目描述</strong></p><blockquote><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><pre><code>s = "abaccdeff"返回 "b"s = "" 返回 " "</code></pre></blockquote><h4 id="解法1-哈希表"><a href="#解法1-哈希表" class="headerlink" title="解法1 哈希表"></a>解法1 哈希表</h4><h5 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/solution/mian-shi-ti-50-di-yi-ge-zhi-chu-xian-yi-ci-de-zi-3/" target="_blank" rel="noopener">LeetCode</a></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Boolean<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> res<span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> res<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a><a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&amp;&amp;tqId=11219&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">机器人的运动范围</a></h3><p><strong>题目描述</strong></p><blockquote><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><pre><code>输入：m = 2, n = 3, k = 1输出：3</code></pre></blockquote><h4 id="解法1-深度优先遍历（DFS）"><a href="#解法1-深度优先遍历（DFS）" class="headerlink" title="解法1 深度优先遍历（DFS）"></a>解法1 深度优先遍历（DFS）</h4><h5 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h5><p>参考详细题解<a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/mian-shi-ti-13-ji-qi-ren-de-yun-dong-fan-wei-dfs-b/" target="_blank" rel="noopener">LeetCode</a></p><p>矩阵搜索问题一般可使用DFS和BFS解决。本题中有一个限定条件，行坐标和列坐标的数位之和不能大于某个已知给定的K值，因此我们需要先了解数位和的求解方法。</p><h5 id="数位和计算"><a href="#数位和计算" class="headerlink" title="数位和计算"></a>数位和计算</h5><p>给定一数字<code>x</code>,通过<code>x%10</code>得到<code>x</code>的个位数字，通过<code>x/10</code>得到<code>x</code>的删除个位数的数字，因此，可通过如下代码求得<code>x</code>得数位和。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span></code></pre><h5 id="数位和增量公式"><a href="#数位和增量公式" class="headerlink" title="数位和增量公式"></a>数位和增量公式</h5><p>由于机器人每一次只能向左，右，上，下四个方向移动一格，因此每次只需要计算<code>x</code>到<code>x+1/x-1</code>的数位和增量，本题说明 <code>1&lt;= n, m &lt;= 100</code> ，以下公式仅在此范围适用。</p><p>设<code>x</code>的数位和为<code>sx</code>,<code>x+1</code>的数位和为<code>sx+1</code></p><ul><li><p>当<code>（x + 1）% 10 = 0​</code>时，<code>sx + 1 = sx - 8</code>，如89，90的数位和分别为17，9；</p></li><li><p>当<code>（x + 1）% 10 != 0</code>时，<code>sx + 1 = sx + 1</code>,如2，3的数位和分别为2，3。</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> si <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> si <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h5><p>递归参数：当前元素在矩阵中的行列索引i和j，两者的数位和为si、sj。</p><p>终止条件：1、行列索引越界 2、数位和超出目标值 3、当前元素已访问过。满足上面3种条件的一种，则最后返回0</p><p>递归流程：标记当前单元格，将其值设置为布尔值记录下来，值设置为true，代表此单元格已被访问过。然后计算当前元素的下、右两个方向元素的数位和，并开启下层递归。</p><p>回溯返回值：返回<code>1+右方搜索符合条件的总数+下方搜索符合条件的总数</code>。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Boolean<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> res<span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> res<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a><a href="https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&amp;&amp;tqId=11218&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">矩阵中的路径</a></h3><p><strong>题目描述</strong></p><blockquote><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。</p><pre><code>输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"输出：true</code></pre></blockquote><h4 id="解法1-深度优先遍历（DFS）-1"><a href="#解法1-深度优先遍历（DFS）-1" class="headerlink" title="解法1 深度优先遍历（DFS）"></a>解法1 深度优先遍历（DFS）</h4><h5 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h5><p>使用DFS递归的回溯剪枝思想，即添加一些判断条件使得程序不再递归下去。首先对于matrix中的每一个都可能是起点，需要遍历。由题可知，只要找到一条路径，即可返回true，最后的0表示从str的第0个字符开始。对于从每一个点开始的子路径，因为使用递归，我们只需知道在这一步该怎么做即可，不用管之后该怎么做。同时找到一个递归的出口即可。</p><p>其实如果没有str的长度限制，上面的代码会陷入死循环，但是该题中有str的长度限制，导致dfs最深的深度为str的长度。（类似于TCP中的TTL的作用）但是该题中规定不能访问重复的字符。于是需要一个记录访问的数组visited。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> str<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token operator">*</span>cols <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token operator">*</span>cols<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>i<span class="token operator">*</span>cols<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> str<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> str<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rows <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> str<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> cols <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> str<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>i<span class="token operator">*</span>cols<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a><a href="https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=13&amp;&amp;tqId=11188&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">数组中的逆序对</a></h3><p><strong>题目描述</strong></p><blockquote><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007。</p><p>输入：1,2,3,4,5,6,7,0</p><p>输出：7</p><pre><code>题目保证输入的数组中没有的相同的数字数据范围：    对于%50的数据,size&lt;=10^4    对于%75的数据,size&lt;=10^5    对于%100的数据,size&lt;=2*10^5</code></pre></blockquote><h4 id="解法1-暴力法-1"><a href="#解法1-暴力法-1" class="headerlink" title="解法1 暴力法"></a>解法1 暴力法</h4><h5 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h5><p>使用两层for循环枚举所有的数对，判断前面的数字大于后面的数字，构成逆序对关系。时间复杂度为<code>O(n^2)</code>,空间复杂度<code>O(1)</code></p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解法2-暴力法-1"><a href="#解法2-暴力法-1" class="headerlink" title="解法2 暴力法"></a>解法2 暴力法</h3><h5 id="分析-24"><a href="#分析-24" class="headerlink" title="分析"></a>分析</h5><p>使用两层for循环枚举所有的数对，判断前面的数字大于后面的数字，构成逆序对关系。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解法1-暴力法-2"><a href="#解法1-暴力法-2" class="headerlink" title="解法1 暴力法"></a>解法1 暴力法</h4><h5 id="分析-25"><a href="#分析-25" class="headerlink" title="分析"></a>分析</h5><p>使用两层for循环枚举所有的数对，判断前面的数字大于后面的数字，构成逆序对关系。</p><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>###</p><blockquote><p>参考：</p><p>CyC：<a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes</a></p><p>牛客网：<a href="https://www.nowcoder.com/questionTerminal" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot集成ElasticSearch</title>
      <link href="/2020/03/03/spring-boot-ji-cheng-elasticsearch/"/>
      <url>/2020/03/03/spring-boot-ji-cheng-elasticsearch/</url>
      
        <content type="html"><![CDATA[<p>本次Spring Boot集成ES，是基于前几篇文章的数据测试，因此在此不再细说，如有不懂的地方，可以先去查看ES前几篇文章介绍。</p><blockquote><p>传送门：</p><p>ElasticSearch入门：<a href="https://ramona-chen.top/2020/02/29/elasticsearch-ru-men/" target="_blank" rel="noopener">https://ramona-chen.top/2020/02/29/elasticsearch-ru-men/</a></p><p>ElasticSearch基本用法：<a href="https://ramona-chen.top/2020/03/01/elasticsearch-ji-ben-yong-fa/" target="_blank" rel="noopener">https://ramona-chen.top/2020/03/01/elasticsearch-ji-ben-yong-fa/</a></p><p>ElasticSearch高级查询：<a href="https://ramona-chen.top/2020/03/02/elasticsearch-gao-ji-cha-xun/" target="_blank" rel="noopener">https://ramona-chen.top/2020/03/02/elasticsearch-gao-ji-cha-xun/</a></p></blockquote><h3 id="一、Springboot集成ElasticSearch"><a href="#一、Springboot集成ElasticSearch" class="headerlink" title="一、Springboot集成ElasticSearch"></a>一、Springboot集成ElasticSearch</h3><p>分布式ES配置调用方式核心代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>es<span class="token punctuation">.</span>easticsearch<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>TransportClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>Settings<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>common<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>InetSocketTransportAddress<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>client<span class="token punctuation">.</span>PreBuiltTransportClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TransportClient <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此处对应你自己的cluster.name</span>        Settings settings <span class="token operator">=</span> Settings<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"cyh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreBuiltTransportClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> local_ports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9300</span><span class="token punctuation">,</span><span class="token number">9301</span><span class="token punctuation">,</span><span class="token number">9302</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> port <span class="token operator">:</span> local_ports<span class="token punctuation">)</span> <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> client<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>遇到的问题（运行报错）：</strong></p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>NoNodeAvailableException<span class="token operator">:</span> None of the configured nodes are available</code></pre><p><strong>原因：</strong></p><p>Elasticsearch版本客户端与服务端版本不一致问题。</p><p><strong>解决：</strong></p><p>更改elasticsearch5.X调用方式。</p><p>错误代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> port <span class="token operator">:</span> local_ports<span class="token punctuation">)</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransportAddress</span><span class="token punctuation">(</span>                    InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>改正之后的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> port <span class="token operator">:</span> local_ports<span class="token punctuation">)</span> <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketTransportAddress</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><blockquote><p><em>参考：</em></p><p>被遗忘的博客：<a href="https://wenchao.ren/2019/01/org-elasticsearch-client-transport-NoNodeAvailableException-None-of-the-configured-nodes-are-available/" target="_blank" rel="noopener">https://wenchao.ren/2019/01/org-elasticsearch-client-transport-NoNodeAvailableException-None-of-the-configured-nodes-are-available/</a></p><p>王卫东：<a href="https://blog.csdn.net/wwd0501/article/details/79203040" target="_blank" rel="noopener">https://blog.csdn.net/wwd0501/article/details/79203040</a></p></blockquote><h3 id="二、接口开发"><a href="#二、接口开发" class="headerlink" title="二、接口开发"></a>二、接口开发</h3><p>图书管理系统接口开发数据准备：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2s0io5h9j327y0jcjz3.jpg" alt="图书信息"></p><h4 id="1、查询接口开发"><a href="#1、查询接口开发" class="headerlink" title="1、查询接口开发"></a>1、查询接口开发</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查询接口</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/book/novel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        GetResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareGet</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> <span class="token string">"novel"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>接口测试：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2ru1gid2j31r00l8n03.jpg" alt="查询接口测试"></p><h4 id="2、增加接口开发"><a href="#2、增加接口开发" class="headerlink" title="2、增加接口开发"></a>2、增加接口开发</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 增加接口</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add/book/novel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">add</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">)</span> String title<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"word_count"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> wordCount<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"publish_date"</span><span class="token punctuation">)</span>            <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span> Date publishDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            XContentBuilder content <span class="token operator">=</span> XContentFactory<span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"word_count"</span><span class="token punctuation">,</span> wordCount<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"publish_date"</span><span class="token punctuation">,</span> publishDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IndexResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareIndex</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> <span class="token string">"novel"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接口测试：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2sl28icqj31qq0paadt.jpg" alt="增加接口测试"></p><p><strong>遇到的问题：</strong></p><p>使用Postman测试接口，可以看到在使用默认的form-data类型时出现了<code>HTTP Status 400 - Required String parameter ‘xx’ is not present</code>这个错误(如下图)，更换成x-www-form-urlencoded类型时返回成功。</p><p>如果使用@RequestBody接收参数，同@RequestParam一样，都是需要设置x-www-form-urlencoded类型才能正确返回。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2sjgtn7mj318p0u0k6v.jpg" alt="错误页"></p><p><strong>原因：</strong></p><p>@RequestBody这个一般处理的是在ajax请求中声明contentType: “application/json; charset=utf-8”时候。也就是json数据或者xml。<br>@RequestParam这个一般就是在ajax里面没有声明contentType的时候，为默认的urlencode格式时，用这个。</p><blockquote><p>详细说明参考：</p><p>已是寒冬：<a href="https://blog.csdn.net/qq_26761587/article/details/73691189" target="_blank" rel="noopener">https://blog.csdn.net/qq_26761587/article/details/73691189</a></p></blockquote><h4 id="3、删除接口开发"><a href="#3、删除接口开发" class="headerlink" title="3、删除接口开发"></a>3、删除接口开发</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除接口</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/book/novel"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DeleteResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareDelete</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> <span class="token string">"novel"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>接口测试：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2t1tf12kj31qy0h4tbk.jpg" alt="删除接口测试"></p><h4 id="4、更新接口开发"><a href="#4、更新接口开发" class="headerlink" title="4、更新接口开发"></a>4、更新接口开发</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 更新接口</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update/book/novel"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">update</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String title<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"author"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String author<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"word_count"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> Integer wordCount<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"publish_date"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span> Date publishDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            XContentBuilder builder <span class="token operator">=</span> XContentFactory<span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wordCount <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"word_count"</span><span class="token punctuation">,</span> wordCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>publishDate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"publish_date"</span><span class="token punctuation">,</span> publishDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UpdateRequest update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> <span class="token string">"novel"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            update<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>            UpdateResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接口测试：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2tb7umuij31r00koq5u.jpg" alt="更新接口测试"></p><h4 id="4、复合查询开发"><a href="#4、复合查询开发" class="headerlink" title="4、复合查询开发"></a>4、复合查询开发</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 复合查询</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"query/book/novel"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">query</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"author"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String author<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String title<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"gt_word_count"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> gtWordCount<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"lt_word_count"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> Integer ltWordCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BoolQueryBuilder boolQuery <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            boolQuery<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            boolQuery<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RangeQueryBuilder rangeQuery <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"word_count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>gtWordCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ltWordCount <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ltWordCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rangeQuery<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>ltWordCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        boolQuery<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>rangeQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchRequestBuilder builder <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"novel"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSearchType</span><span class="token punctuation">(</span>SearchType<span class="token punctuation">.</span>DFS_QUERY_THEN_FETCH<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span>boolQuery<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse response <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>接口测试：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2tlto83jj31db0u0aga.jpg" alt="复合查询接口测试"></p><blockquote><p>本文完整代码示例：<a href="https://github.com/cyh756085049/ElasticSearch-java" target="_blank" rel="noopener">https://github.com/cyh756085049/ElasticSearch-java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch高级查询</title>
      <link href="/2020/03/02/elasticsearch-gao-ji-cha-xun/"/>
      <url>/2020/03/02/elasticsearch-gao-ji-cha-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、子条件查询"><a href="#一、子条件查询" class="headerlink" title="一、子条件查询"></a>一、子条件查询</h3><p>定义：特定字段查询所指特定值。</p><h4 id="1、Query-Context"><a href="#1、Query-Context" class="headerlink" title="1、Query Context"></a>1、Query Context</h4><p>在查询过程中,除了判断文档是否满足查询条件外,ES还会计算一个_score来标识匹配的程度,旨在判断目标文档和查询条件匹配的有多好。</p><p><strong>常用查询</strong></p><ul><li><strong>全文本查询（针对文本类型数据）</strong></li></ul><p>精确查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Java入门"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>多个字段模糊匹配查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span>            <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>语法查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"query_string"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"(Mary AND 对象) OR Java"</span><span class="token punctuation">,</span>            <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>字段级别查询（针对结构化数据,如数字、日期等）</strong></li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"word_count"</span><span class="token operator">:</span> <span class="token number">2000</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一定范围查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"word_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> # 大于等于                <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">2000</span>  # 小于等于            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、Filter-Context"><a href="#2、Filter-Context" class="headerlink" title="2、Filter Context"></a>2、Filter Context</h4><p>在查询过程中,只判断该文档是否满足条件,只有Yes或者No。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"word_count"</span><span class="token operator">:</span> <span class="token number">1000</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二、复合条件查询"><a href="#二、复合条件查询" class="headerlink" title="二、复合条件查询"></a>二、复合条件查询</h3><p>定义：以一定的逻辑组合子条件查询。</p><p><strong>1、固定分数查询</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"constant_score"</span><span class="token operator">:</span> <span class="token punctuation">{</span> # 固定分数            <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"word_count"</span><span class="token operator">:</span> <span class="token number">2000</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"boost"</span><span class="token operator">:</span> <span class="token number">2</span> # 自定义分数值        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、布尔查询</strong></p><p>只要满足其中的一个条件就可以：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Mary"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"入门"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>必须两个条件都满足：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Mary"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"七月"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>混合查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Mary"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"七月"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"word_count"</span><span class="token operator">:</span> <span class="token number">10000</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>must_not查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Mary"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch基本用法</title>
      <link href="/2020/03/01/elasticsearch-ji-ben-yong-fa/"/>
      <url>/2020/03/01/elasticsearch-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Elasticsearch基本概念"><a href="#一、Elasticsearch基本概念" class="headerlink" title="一、Elasticsearch基本概念"></a>一、Elasticsearch基本概念</h2><ul><li>索引含有相同属性的文档集合</li><li>类型索引可以定义一个或多个类型,文档必须属于一个类型</li><li>文档文档是可以被索引|的基本数据单位</li><li><strong>分片</strong> 每个索引都有多个分片,每个分片是一个Lucene索弓|</li><li><strong>备份</strong> 拷贝一份分片就完成了分片的备份</li></ul><h2 id="二、Elasticsearch基本用法"><a href="#二、Elasticsearch基本用法" class="headerlink" title="二、Elasticsearch基本用法"></a>二、Elasticsearch基本用法</h2><h3 id="1、RESTFul-API"><a href="#1、RESTFul-API" class="headerlink" title="1、RESTFul API"></a>1、RESTFul API</h3><ul><li>API基本格式：<code>http://&lt;ip&gt;:&lt;port&gt;/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</code></li><li>常用HTTP动词：<code>GET/PUT/POST/DELETE</code></li></ul><h3 id="2、创建索引"><a href="#2、创建索引" class="headerlink" title="2、创建索引"></a>2、创建索引</h3><ul><li><strong>非结构化创建</strong></li></ul><p>先创建索引：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2lz90wo3j327o0titfk.jpg" alt=""><br>查看概览：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2lzh4fxaj327u0q20zu.jpg" alt=""><br>查看索引数据（非结构化索引）：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2lzrx2cjj31dp0u0thi.jpg" alt=""></p><ul><li><strong>结构化创建</strong></li></ul><p>通过复合查询编写结构化索引提交请求：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m00qbvgj31ta0u0dmp.jpg" alt=""><br>刷新刚刚提交的请求并查看结构化索引：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m07sq7yj31s50u011h.jpg" alt=""></p><p>为了方便，可以在postman中进行添加索引数据：</p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/peoplemethod<span class="token operator">:</span> PUT</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"man"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"country"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"date"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>                    <span class="token property">"format"</span><span class="token operator">:</span> "yyyy-MM-dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss||yyyy-MM-dd||epoch_millis"                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m0q7m2ej316g0u0tgk.jpg" alt=""><br>请求发送成功之后，可以在浏览器上进行刷新检验，结果如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m11at1dj31rv0u0dp9.jpg" alt=""></p><h3 id="3、插入"><a href="#3、插入" class="headerlink" title="3、插入"></a>3、插入</h3><ul><li><strong>指定文档id插入</strong><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/people/man/<span class="token number">1</span>method<span class="token operator">:</span> POST</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cyh"</span><span class="token punctuation">,</span>  <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2020-01-23"</span><span class="token punctuation">}</span></code></pre>指定文档id插入数据：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m1eps0cj31ie0u0jwl.jpg" alt=""><br>插入成功之后浏览：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m1n6f0nj31k80jgtcw.jpg" alt=""></li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m1tdgk4j327y0me7bd.jpg" alt=""></p><ul><li><strong>自动产生文档id插入</strong><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/people/manmethod<span class="token operator">:</span> POST</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Romana"</span><span class="token punctuation">,</span>  <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"US"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2020-01-24"</span><span class="token punctuation">}</span></code></pre>自动产生文档id插入数据：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m26xk0yj31iu0u0n2w.jpg" alt=""><br>插入成功之后浏览：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m2du5aqj327w0midn4.jpg" alt=""></li></ul><h3 id="4、修改"><a href="#4、修改" class="headerlink" title="4、修改"></a>4、修改</h3><ul><li><p><strong>直接修改文档</strong></p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/people/man/<span class="token number">1</span>/_updatemethod<span class="token operator">:</span> POST</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>  <span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"lily"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>指定文档修改数据：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m3vrv7xj31ob0u078m.jpg" alt=""><br>修改成功之后浏览：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m459tz1j327y0ly45v.jpg" alt=""></p></li><li><p><strong>脚本修改文档</strong></p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/people/man/<span class="token number">1</span>/_updatemethod<span class="token operator">:</span> POST</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"script"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"painless"</span><span class="token punctuation">,</span>      <span class="token property">"inline"</span><span class="token operator">:</span> <span class="token string">"ctx._source.age += 10"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>或<span class="token punctuation">{</span>  <span class="token property">"script"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"painless"</span><span class="token punctuation">,</span>      <span class="token property">"inline"</span><span class="token operator">:</span> <span class="token string">"ctx._source.age = params.age"</span><span class="token punctuation">,</span>      <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">100</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>脚本修改数据：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m4fgz47j31k60u0dkw.jpg" alt=""><br>修改成功之后浏览：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m4laadgj327y0lwtg3.jpg" alt=""></p></li></ul><h3 id="5、删除"><a href="#5、删除" class="headerlink" title="5、删除"></a>5、删除</h3><ul><li><strong>删除文档</strong><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/people/man/<span class="token number">1</span>method<span class="token operator">:</span> DELETE</code></pre><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m4yomlwj31qy0qy783.jpg" alt=""></li><li><strong>删除索引</strong></li></ul><p>（1）通过接口删除</p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/peoplemethod<span class="token operator">:</span> DELETE</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m5a0c4mj31qw0iiq5a.jpg" alt=""><br>（2）在浏览器上删除<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m5fz1stj327y0mqqb5.jpg" alt=""></p><h3 id="6、查询"><a href="#6、查询" class="headerlink" title="6、查询"></a>6、查询</h3><p>先创建book索引</p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/bookmethod<span class="token operator">:</span> PUT</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"novel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"word_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"publish_date"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>                    <span class="token property">"format"</span><span class="token operator">:</span> "yyyy-MM-dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss||yyyy-MM-dd||epoch_millis"                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>插入数据：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m5xrcr3j327w0jctgw.jpg" alt=""></p><ul><li><strong>简单查询</strong></li></ul><p>1、查询索引中的一条数据：</p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/book/novel/<span class="token number">1</span>method<span class="token operator">:</span> GET</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m691iv2j31r20qqdjv.jpg" alt=""><br>2、所有数据的查询（默认显示前10条）：</p><pre class=" language-json"><code class="language-json">url<span class="token operator">:</span> <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9200</span>/book/_searchmethod<span class="token operator">:</span> POST</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m6hh52ij318y0u0ahj.jpg" alt=""></p><ul><li><strong>条件查询</strong></li></ul><p>数据条数及偏移量查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> # 以一定的偏移量来查看我们检索的结果，缺省从检索的第一条数据开始显示    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">5</span> # 指定检索结果中输出的数据条数，缺省为<span class="token number">10</span>条<span class="token punctuation">}</span></code></pre><p>关键字查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"ElasticSearch"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>排序查询：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"publish_date"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ul><li><strong>聚合查询</strong></li></ul><p>单个字段聚合：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"group_by_word_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"word_count"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"group_by_publish_date"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"publish_date"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m706csij31960u07c5.jpg" alt=""><br>字段统计聚合：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"grades_word_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"stats"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"word_count"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m7906noj312u09475a.jpg" alt=""></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"grades_word_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"min"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"word_count"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2m7i9vz9j30qw04k74o.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch入门</title>
      <link href="/2020/02/29/elasticsearch-ru-men/"/>
      <url>/2020/02/29/elasticsearch-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ElasticSearch认识"><a href="#一、ElasticSearch认识" class="headerlink" title="一、ElasticSearch认识"></a>一、ElasticSearch认识</h2><h3 id="1、什么是ElasticSearch？"><a href="#1、什么是ElasticSearch？" class="headerlink" title="1、什么是ElasticSearch？"></a>1、什么是ElasticSearch？</h3><ul><li>基于Apache Lucene构建的开源搜索引擎</li><li>采用Java编写,提供简单易用的RESTFul API</li><li>轻松的横向扩展,可支持PB级的结构化或非结构化数据处理</li></ul><h3 id="2、可用应用场景"><a href="#2、可用应用场景" class="headerlink" title="2、可用应用场景"></a>2、可用应用场景</h3><ul><li>海量数据分析引擎</li><li>站内搜索引擎</li><li>数据仓库</li></ul><h3 id="3、一线公司实际应用场景"><a href="#3、一线公司实际应用场景" class="headerlink" title="3、一线公司实际应用场景"></a>3、一线公司实际应用场景</h3><ul><li>英国卫报-实时分析公众对文章的回应</li><li>维基百科、 GitHub -站内实时搜索</li><li>百度-实时日志监控平台</li></ul><h2 id="二、elasticsearch安装"><a href="#二、elasticsearch安装" class="headerlink" title="二、elasticsearch安装"></a>二、elasticsearch安装</h2><h3 id="单实例安装"><a href="#单实例安装" class="headerlink" title="单实例安装"></a>单实例安装</h3><p><strong>1、下载</strong></p><blockquote><p>下载链接：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-5-5-2" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/elasticsearch-5-5-2</a></p></blockquote><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2jiwp7jlj31t60qm0x2.jpg" alt="下载"><br><strong>2、运行</strong></p><pre class=" language-shell"><code class="language-shell">cyh@chenyonuandembp bin % sh elasticsearch</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2jk5obmuj30vo0h615j.jpg" alt="运行界面"><br><strong>3、在浏览器打开<code>127.0.0.1:9200</code>:</strong><br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2jkog6hbj30sg0hstbe.jpg" alt="浏览器界面"></p><h3 id="插件Head安装"><a href="#插件Head安装" class="headerlink" title="插件Head安装"></a>插件Head安装</h3><p><strong>1、下载</strong></p><blockquote><p>下载链接：<a href="https://github.com/mobz/elasticsearch-head#running-with-built-in-server" target="_blank" rel="noopener">Github下载地址：elasticsearch-head</a></p></blockquote><p><strong>2、安装运行</strong></p><pre class=" language-yml"><code class="language-yml">git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start</code></pre><p><strong>3、在本地下载的elasticsearch中进行配置</strong></p><p><code>cyh@chenyonuandembp elasticsearch-5.5.2 % vim config/elasticsearch.yml</code></p><pre class=" language-yml"><code class="language-yml">http.cors.enabled: truehttp.cors.allow-origin: "*"</code></pre><p><strong>4、把本地的elasticsearch和elasticsearch-head都启动</strong></p><pre class=" language-yml"><code class="language-yml">elasticsearch: sh elasticsearch-5.5.2/bin/elasticsearchelasticsearch-head: npm run start</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2jmlv7vcj30vo0euwn4.jpg" alt="运行界面"><br><strong>5、<code>http://localhost:9100</code>浏览器运行</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2jmzsk3vj327s0fm0xc.jpg" alt="浏览器界面"></p><h3 id="分布式安装"><a href="#分布式安装" class="headerlink" title="分布式安装"></a>分布式安装</h3><p><strong>1、主节点配置</strong></p><p>在<code>cyh@chenyonuandembp elasticsearch-5.5.2 % vim config/elasticsearch.yml</code>主节点中配置:</p><pre class=" language-yml"><code class="language-yml">cluster.name: cyhnode.name: masternode.master: truenetwork.host: 127.0.0.1</code></pre><p><strong>2、分别启动服务运行并浏览（同上）</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2jol0delj30nq0c60ui.jpg" alt=""></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2joxxv7yj31bi08ajtb.jpg" alt=""></p><p><strong>3、分布式安装</strong></p><p>复制两份elasticsearch-5.5.2在两个文件夹中，做分布式安装：</p><pre class=" language-yml"><code class="language-yml">cyh@chenyonuandembp software % cp -r elasticsearch-5.5.2 es_slave1cyh@chenyonuandembp software % cp -r elasticsearch-5.5.2 es_slave2</code></pre><p><strong>4、字节点配置</strong></p><p>在子节点上配置<code>cyh@chenyonuandembp es_slave1 % vim config/elasticsearch.yml</code>：</p><pre class=" language-yml"><code class="language-yml"># 集群名称cluster.name: cyh# 节点名称node.name: slave1network.host: 127.0.0.1# 防止与主节点端口号9200冲突，自己设定一个http.port: 8200# 避免子节点是游离状态，此配置帮助子节点找到主节点discovery.zen.ping.unicast.hosts: ["127.0.0.1"]</code></pre><p>在子节点上配置<code>cyh@chenyonuandembp es_slave2 % vim config/elasticsearch.yml</code></p><pre class=" language-yml"><code class="language-yml">cluster.name: cyhnode.name: slave2network.host: 127.0.0.1http.port: 8000discovery.zen.ping.unicast.hosts: ["127.0.0.1"]</code></pre><p><strong>5、浏览器运行</strong></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2l61s5gej31j00jowih.jpg" alt="多节点分布式效果图"></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在分布式安装子节点时遇到的问题：</p><pre class=" language-java"><code class="language-java">failed to join <span class="token punctuation">{</span>master<span class="token punctuation">}</span><span class="token punctuation">{</span>省略配置信息输出<span class="token punctuation">}</span># 主要是下面的错误信息org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>RemoteTransportException<span class="token operator">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span><span class="token punctuation">[</span>IP<span class="token operator">:</span><span class="token number">9300</span><span class="token punctuation">]</span><span class="token punctuation">[</span>internal<span class="token operator">:</span>cluster<span class="token operator">/</span>coordination<span class="token operator">/</span>join<span class="token punctuation">]</span>Caused by<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token operator">:</span> can't add node <span class="token punctuation">{</span>slave1<span class="token punctuation">}</span><span class="token punctuation">{</span>省略配置信息<span class="token punctuation">}</span> with the same id but is a different node instance</code></pre><p>因为在复制 Elasticsearch 到 slave1 / slave2时，将ES目录 elasticsearch-5.5.2 下的 data 目录一起复制过去了，这里再启动slave1时，data目录下的文件冲突，所以报错了。</p><p><strong>解决方案：</strong></p><p>删掉报错的 es 目录下的 data 目录，重新启动ES</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编写贪吃蛇游戏</title>
      <link href="/2020/02/18/python-bian-xie-tan-chi-she-you-xi/"/>
      <url>/2020/02/18/python-bian-xie-tan-chi-she-you-xi/</url>
      
        <content type="html"><![CDATA[<p>编写贪吃蛇游戏的主要思路：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd2mxs25oej30so0nstae.jpg" alt="贪吃蛇思路思维导图"></p><h3 id="一、调用库以及初始设置"><a href="#一、调用库以及初始设置" class="headerlink" title="一、调用库以及初始设置"></a>一、调用库以及初始设置</h3><p><strong>1、调用第三方库</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token keyword">import</span> sys<span class="token keyword">import</span> random<span class="token keyword">from</span> pygame<span class="token punctuation">.</span>locals <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time</code></pre><p><strong>2、初始设置(初始化pygame，定义窗口（边界）的大小，窗口的标题和图标)</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化pygame</span>pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用pygame模块初始函数</span>fpsClock <span class="token operator">=</span> pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">(</span><span class="token punctuation">)</span>playSurface <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 界面</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'Snake Go!'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 标题</span>image<span class="token operator">=</span>pygame<span class="token punctuation">.</span>image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'背景图片'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 背景</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_icon<span class="token punctuation">(</span>image<span class="token punctuation">)</span></code></pre><ol start="3"><li><strong>定义颜色变量</strong></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3、定义颜色变量</span>redColor <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>blackColor <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>whiteColor <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>greyColor <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>lightColor <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span></code></pre><h3 id="二、游戏结束设置"><a href="#二、游戏结束设置" class="headerlink" title="二、游戏结束设置"></a>二、游戏结束设置</h3><p>所有游戏最重要的部分是循环，而GameOver函数就是跳出这个循环的条件。这里给出当蛇吃到自己身体或者碰到边界时显示的界面。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 4、Game Over</span><span class="token keyword">def</span> <span class="token function">gameOver</span><span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>    gameOverFont <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>SysFont<span class="token punctuation">(</span><span class="token string">'arial'</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    gameOverSurf <span class="token operator">=</span> gameOverFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Game Over'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> greyColor<span class="token punctuation">)</span>    gameOverRect <span class="token operator">=</span> gameOverSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    gameOverRect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span>    playSurface<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>gameOverSurf<span class="token punctuation">,</span> gameOverRect<span class="token punctuation">)</span>    scoreFont <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>SysFont<span class="token punctuation">(</span><span class="token string">'arial'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>    scoreSurf <span class="token operator">=</span> scoreFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'SCORE:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> greyColor<span class="token punctuation">)</span>    scoreRect <span class="token operator">=</span> scoreSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    scoreRect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">)</span>    playSurface<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>scoreSurf<span class="token punctuation">,</span> scoreRect<span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="三、贪吃蛇与食物"><a href="#三、贪吃蛇与食物" class="headerlink" title="三、贪吃蛇与食物"></a>三、贪吃蛇与食物</h3><p>主要介绍贪吃蛇和食物的显示及运动。</p><p><strong>1、定义初始位置</strong></p><p>我们将整个界面看成许多20*20的小方块，每个方块代表一个单位，蛇的长度就可以用几个单位表示啦。这里蛇的身体用列表的形式存储，方便之后的删减。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 5、定义初始位置</span>snakePosition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># snake位置</span>snakeSegments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># snake长度</span>raspberryPosition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># food位置</span>raspberrySpawned <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># food数量</span>direction <span class="token operator">=</span> <span class="token string">'right'</span>  <span class="token comment" spellcheck="true"># 方向</span>changeDirection <span class="token operator">=</span> direction  <span class="token comment" spellcheck="true"># 改变方向</span>score <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 得分</span></code></pre><p><strong>2 .键盘输入判断蛇的运动</strong></p><p>我们需要通过键盘输入的上下左右键或WASD来控制蛇类运动，同时加入按下Esc就退出游戏的功能。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> QUIT<span class="token punctuation">:</span>        pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> KEYDOWN<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 键盘输入</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_RIGHT <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 方向键和AWSD</span>            changeDirection <span class="token operator">=</span> <span class="token string">'right'</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_LEFT <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            changeDirection <span class="token operator">=</span> <span class="token string">'left'</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_UP <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            changeDirection <span class="token operator">=</span> <span class="token string">'up'</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_DOWN <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            changeDirection <span class="token operator">=</span> <span class="token string">'down'</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_ESCAPE<span class="token punctuation">:</span>            changeDirection <span class="token operator">==</span> <span class="token string">'up'</span></code></pre><p>贪吃蛇运动有一个特点：不能反方向运动。所以我们需要加入限制条件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> changeDirection <span class="token operator">==</span> <span class="token string">'right'</span> <span class="token operator">and</span> <span class="token operator">not</span> direction <span class="token operator">==</span> <span class="token string">'left'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 在事件for之下，控制不能反向</span>    direction <span class="token operator">=</span> changeDirection<span class="token keyword">if</span> changeDirection <span class="token operator">==</span> <span class="token string">'left'</span> <span class="token operator">and</span> <span class="token operator">not</span> direction <span class="token operator">==</span> <span class="token string">'right'</span><span class="token punctuation">:</span>    direction <span class="token operator">=</span> changeDirection<span class="token keyword">if</span> changeDirection <span class="token operator">==</span> <span class="token string">'up'</span> <span class="token operator">and</span> <span class="token operator">not</span> direction <span class="token operator">==</span> <span class="token string">'down'</span><span class="token punctuation">:</span>    direction <span class="token operator">=</span> changeDirection<span class="token keyword">if</span> changeDirection <span class="token operator">==</span> <span class="token string">'down'</span> <span class="token operator">and</span> <span class="token operator">not</span> direction <span class="token operator">==</span> <span class="token string">'up'</span><span class="token punctuation">:</span>    direction <span class="token operator">=</span> changeDirection</code></pre><p>接下来就是将蛇头按照键盘的输入进行转弯操作，并将蛇头当前的位置加入到蛇身的列表中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> direction <span class="token operator">==</span> <span class="token string">'right'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 方向为→，snake位置加1</span>    snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token keyword">if</span> direction <span class="token operator">==</span> <span class="token string">'left'</span><span class="token punctuation">:</span>    snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">10</span><span class="token keyword">if</span> direction <span class="token operator">==</span> <span class="token string">'up'</span><span class="token punctuation">:</span>    snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">20</span><span class="token keyword">if</span> direction <span class="token operator">==</span> <span class="token string">'down'</span><span class="token punctuation">:</span>    snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">10</span>snakeSegments<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> list<span class="token punctuation">(</span>snakePosition<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>3 .判断是否吃到食物</strong></p><p>如果蛇头与食物的方块重合，则判定吃到食物，将食物数量清零；而没吃到食物的话，蛇身就会跟着蛇头运动，蛇身的最后一节将被踢出列表。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> raspberryPosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> raspberryPosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    raspberrySpawned <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    snakeSegments<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>4 .重新生成食物</strong></p><p>当食物数量为0时，重新生成食物，同时分数增加。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> raspberrySpawned <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>    raspberryPosition <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    raspberrySpawned <span class="token operator">=</span> <span class="token number">1</span>    score <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p><strong>5. 刷新显示层</strong></p><p>每次蛇与食物的运动，都会进行刷新显示层的操作来显示。有点类似于动画的”帧”。</p><pre class=" language-python"><code class="language-python">playSurface<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>blackColor<span class="token punctuation">)</span><span class="token keyword">for</span> position <span class="token keyword">in</span> snakeSegments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> whiteColor<span class="token punctuation">,</span> Rect<span class="token punctuation">(</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> lightColor<span class="token punctuation">,</span> Rect<span class="token punctuation">(</span>snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> redColor<span class="token punctuation">,</span> Rect<span class="token punctuation">(</span>raspberryPosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> raspberryPosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>6. 判断是否死亡</strong></p><p>当蛇头超出边界或者蛇头与自己的蛇身重合时，蛇类死亡，调用GameOver。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">620</span> <span class="token operator">or</span> snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    gameOver<span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token keyword">if</span> snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">460</span> <span class="token operator">or</span> snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    gameOver<span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token keyword">for</span> snakeBody <span class="token keyword">in</span> snakeSegments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> snakePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> snakeBody<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> snakePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> snakeBody<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        gameOver<span class="token punctuation">(</span>playSurface<span class="token punctuation">,</span> score<span class="token punctuation">)</span></code></pre><p><strong>7. 控制游戏速度</strong></p><p>为了增加难度，我们设置蛇身越长速度越快，直到达到一个上限。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> len<span class="token punctuation">(</span>snakeSegments<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">:</span>    speed <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>snakeSegments<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token keyword">else</span><span class="token punctuation">:</span>    speed <span class="token operator">=</span> <span class="token number">16</span>fpsClock<span class="token punctuation">.</span>tick<span class="token punctuation">(</span>speed<span class="token punctuation">)</span></code></pre><p>到此，贪吃蛇游戏编写完成，效果图如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1cebf6uzj30zk0rwgmo.jpg" alt="贪吃蛇游戏效果图"></p><p>完整代码示例：<a href="https://github.com/cyh756085049/basic-python/tree/master/basic-learn/贪吃蛇" target="_blank" rel="noopener">https://github.com/cyh756085049/basic-python/tree/master/basic-learn/贪吃蛇</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot企业微信点餐系统笔记</title>
      <link href="/2020/02/16/springboot-qi-ye-wei-xin-dian-can-xi-tong-bi-ji/"/>
      <url>/2020/02/16/springboot-qi-ye-wei-xin-dian-can-xi-tong-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>IDEA创建文件自动注释:</strong></p><p><code>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates -&gt; Class/Interface/Enum</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  *@Author: ${USER}  *@Date: ${DATE} ${TIME}  *@Description:**/</span></code></pre><h3 id="1、Spring-JPA注解"><a href="#1、Spring-JPA注解" class="headerlink" title="1、Spring JPA注解"></a>1、Spring JPA注解</h3><p>用Spring JPA(Jpa)，实体类中要使用注解<code>@Entity</code>,<code>@Data</code>,主键<code>id</code>要使用注解<code>@Id</code>，如果要设置为ID自增一定要加上注解<code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code>。</p><blockquote><p><strong>注意：</strong> 如果实体类中有时间属性，且定义了默认的时间，自动更新，如果在功能实现过程中要更新实体类中的某几个属性，不包括时间，则时间不会更新，此时需要设置为时间随更改而更新，则需要在实体类上加注解<code>@DynamicUpdate</code>，从而可以达到时间动态更新。</p></blockquote><h3 id="2、数据库约束"><a href="#2、数据库约束" class="headerlink" title="2、数据库约束"></a>2、数据库约束</h3><p>在数据库中插入数据的时候，如果不想加入相同的数据，比如类目表中的类目编号，不希望插入两个相同的编号，此时可以给类目编号设置约束，语法是：  </p><pre class=" language-mysql"><code class="language-mysql">unique key `uqe_category_type` (`category_type`) </code></pre><h3 id="3、事物处理"><a href="#3、事物处理" class="headerlink" title="3、事物处理"></a>3、事物处理</h3><p>如果不想把测试数据加入到数据库中，可以在测试方法上加注解<code>@Transactional</code>进行事务处理，事情做完之后进行回滚。 </p><h3 id="4、前台接口返回格式"><a href="#4、前台接口返回格式" class="headerlink" title="4、前台接口返回格式"></a>4、前台接口返回格式</h3><p>在前台返回的接口格式中，属性名称如果与类中对应的名称不一致，可以加注解<code>@JsonProperty</code>解决。</p><pre class=" language-Java"><code class="language-Java">// id为前台需要的字段名称，productId为类中定义的属性名称@JsonProperty("id")private String productId; </code></pre><h3 id="5、Arrays-asList-Value-使用"><a href="#5、Arrays-asList-Value-使用" class="headerlink" title="5、Arrays.asList(Value)使用"></a>5、Arrays.asList(Value)使用</h3><p>测试数组的时候可以使用如下方式：</p><pre><code> productVO.setProductInfoVOList(Arrays.asList(productInfoVO));</code></pre><h3 id="6、随机生成唯一的主键工具类"><a href="#6、随机生成唯一的主键工具类" class="headerlink" title="6、随机生成唯一的主键工具类"></a>6、随机生成唯一的主键工具类</h3><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * 生成唯一的主键     * 格式：时间+随机数     */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//多线程可能会重复，添加synchronized关键字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">genUniqueKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//随机生成6位随机数</span>        Integer number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">900000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7、对象拷贝"><a href="#7、对象拷贝" class="headerlink" title="7、对象拷贝"></a>7、对象拷贝</h3><p>对象拷贝必须保证两个对象的字段名一致，还应该注意对象拷贝时应该先把改变的值存入拷贝对象中，再进行对象拷贝。</p><pre class=" language-java"><code class="language-java">BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>拷贝对象<span class="token punctuation">,</span> 目标对象<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8、gson使用"><a href="#8、gson使用" class="headerlink" title="8、gson使用"></a>8、<code>gson</code>使用</h3><p>在<code>json</code>接口数据类型中，如果想要把<code>String</code>转换成<code>List</code>类型，可以使用<code>gson</code>。</p><ul><li>首先需要引入<code>maven</code>依赖包：<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>在需要转化的类中使用<code>gson</code>进行转换：<pre class=" language-java"><code class="language-java">Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>OrderDetail<span class="token operator">></span> orderDetailList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// orderForm中的items为String类型，要转化为List类型</span>      orderDetailList <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>orderForm<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>OrderDetail<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[对象转换] 错误， String={}"</span><span class="token punctuation">,</span> orderForm<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre></li><li>参数格式：<pre class=" language-java"><code class="language-java">items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  productId<span class="token operator">:</span> <span class="token string">"1423113435324"</span><span class="token punctuation">,</span>  productQuantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//购买数量</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="9、java8lamada表达式的使用"><a href="#9、java8lamada表达式的使用" class="headerlink" title="9、java8lamada表达式的使用"></a>9、<code>java8</code>lamada表达式的使用</h3></li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>CartDTO<span class="token operator">></span> cartDTOList <span class="token operator">=</span> orderDTO<span class="token punctuation">.</span><span class="token function">getOrderDetailList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">CartDTO</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getProductQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="10、与前台交互的字段校验"><a href="#10、与前台交互的字段校验" class="headerlink" title="10、与前台交互的字段校验"></a>10、与前台交互的字段校验</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"买家姓名必填"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><h3 id="11、日期格式转换工具类-时间戳）"><a href="#11、日期格式转换工具类-时间戳）" class="headerlink" title="11、日期格式转换工具类(时间戳）"></a>11、日期格式转换工具类(时间戳）</h3><ul><li>首先编写工具类：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateToLongSerializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>Date<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Date date<span class="token punctuation">,</span> JsonGenerator jsonGenerator<span class="token punctuation">,</span> SerializerProvider serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      jsonGenerator<span class="token punctuation">.</span><span class="token function">writeNumber</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>然后在要修改的类的时间字段上边加注解：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 创建时间. */</span><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> DateToLongSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span></code></pre></li></ul><p>12、<code>@JsonInclude</code>使用</p><p>当接口中返回的数据中有字段为null时，则不显示该字段，可以在要拒绝显示值为空的类上加注解实现：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span>JsonInclude<span class="token punctuation">.</span>Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span></code></pre><p>如果想要所有值为空的字段都不显示，则可以在<code>application.xml</code>中全局配置：</p><pre class=" language-java"><code class="language-java"># 此处配置为全局的，只要返回的对象为null，则不显示spring<span class="token operator">:</span>  jackson<span class="token operator">:</span>    <span class="token keyword">default</span><span class="token operator">-</span>property<span class="token operator">-</span>inclusion<span class="token operator">:</span> non_null</code></pre><h3 id="13、微信支付"><a href="#13、微信支付" class="headerlink" title="13、微信支付"></a>13、微信支付</h3><p><strong>一、网页授权</strong></p><p>（API文档：<code>https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#0</code>）</p><p>可以申请测试号进行测试：<br><code>https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Requesting_an_API_Test_Account.html</code></p><p>配置网页授权回调域名：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir0km6d3j31ba0u0q7u.jpg" alt=""></p><p>（1）用户同意授权，获取code</p><pre><code>// scope为snsapi_base (不弹出授权页面，直接跳转，只能获取用户openid)https://open.weixin.qq.com/connect/oauth2/authorize?appid=自己的appID&amp;redirect_uri=http://localhost:8080/sell/wexin/auth&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect// scope为snsapi_userinfo(弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息)https://open.weixin.qq.com/connect/oauth2/authorize?appid=自己的appID&amp;redirect_uri=http://localhost:8080/sell/wexin/auth&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect</code></pre><p>如果用户同意授权，页面将跳转至 </p><pre><code>http://localhost:8080/sell/wexin/auth/?code=获取到的code</code></pre><p>（2）通过code换取网页授权access_token</p><pre><code>https://api.weixin.qq.com/sns/oauth2/access_token?appid=自己的APPID&amp;secret=公众号的appsecret&amp;code=上一步获取的code&amp;grant_type=authorization_code</code></pre><p>授权成功返回<code>json</code>数据包：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"access_token"</span><span class="token operator">:</span><span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">,</span>  <span class="token property">"expires_in"</span><span class="token operator">:</span><span class="token number">7200</span><span class="token punctuation">,</span>  <span class="token property">"refresh_token"</span><span class="token operator">:</span><span class="token string">"REFRESH_TOKEN"</span><span class="token punctuation">,</span>  <span class="token property">"openid"</span><span class="token operator">:</span><span class="token string">"OPENID"</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span><span class="token string">"SCOPE"</span> <span class="token punctuation">}</span></code></pre><p>（3）代码编写:获取openid</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 买家微信授权获取openID */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/authorize"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">authorize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"returnUrl"</span><span class="token punctuation">)</span> String returnUrl<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 1、配置</span>       <span class="token comment" spellcheck="true">// 2、调用方法</span>        String url <span class="token operator">=</span> projectUrlConfig<span class="token punctuation">.</span><span class="token function">getWechatMpAuthorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/sell/wechat/userInfo"</span><span class="token punctuation">;</span>        String redirectUrl <span class="token operator">=</span> wxMpService<span class="token punctuation">.</span><span class="token function">oauth2buildAuthorizationUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> WxConsts<span class="token punctuation">.</span>OAuth2Scope<span class="token punctuation">.</span>SNSAPI_USERINFO<span class="token punctuation">,</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>returnUrl<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[微信网页授权] 获取code, result = {}"</span><span class="token punctuation">,</span> redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:"</span> <span class="token operator">+</span> redirectUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span> String code<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span> String returnUrl<span class="token punctuation">)</span><span class="token punctuation">{</span>        WxMpOAuth2AccessToken wxMpOAuth2AccessToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxMpOAuth2AccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            wxMpOAuth2AccessToken <span class="token operator">=</span> wxMpService<span class="token punctuation">.</span><span class="token function">oauth2getAccessToken</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WxErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"【微信网页授权】{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SellException</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>WECHAT_MP_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String openId <span class="token operator">=</span> wxMpOAuth2AccessToken<span class="token punctuation">.</span><span class="token function">getOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:"</span> <span class="token operator">+</span> returnUrl <span class="token operator">+</span> <span class="token string">"?openid="</span> <span class="token operator">+</span> openId<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>获取结果展示：</p><pre><code>2019-11-23 23:45:26,285 - 进入auth方法...2019-11-23 23:45:26,286 - code=071CiVZa09BRTx1gHZYa0fiDZa0CiVZk2019-11-23 23:45:26,610 -response={"access_token":"27_qv9KjpVpBw-KXneKPTl7mMk3wkAW-tLWjCEGZJOENNmb67H-7CzWd3pyDg94WyBmKWaM_Sy6vPM796pJPdnRYiSS_6cNjagSdGCQBgrUfA0","expires_in":7200,"refresh_token":"27_5ETuxubgACyTbAzItUs--NRyHU-j-_f5SeJrx65vYTddgOm54OmNCNL-xp9u37kj8vn98kfiuyrCuzGzQGqGIoYPOAlOvCyjX1exvdLNmlw","openid":"o37zu07P4j_zpb9_qQhmeuEwPwc0","scope":"snsapi_userinfo"}</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir0qm8qqj31we0ean22.jpg" alt=""></p><p><strong>二、微信订单支付</strong></p><p>发起支付、异步通知、微信退款</p><p>微信支付sdk:<br><code>https://github.com/Pay-Group/best-pay-sdk</code></p><p>（1）两数比较的工具类</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Double MONEY_RANGE <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">equals</span><span class="token punctuation">(</span>Double d1<span class="token punctuation">,</span> Double d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Double result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>d1 <span class="token operator">-</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> MONEY_RANGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>三、内网穿透工具</strong></p><p>（1）进行域名的获取（<code>https://natapp.cn/</code>）：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir0wmy9lj327y0qm4qp.jpg" alt=""></p><p>（2）启动<code>natapp</code>,把其分配的域名映射到本地的地址：</p><pre><code>cd /Users/cyh/Documents/software ./natapp -authtoken=b59a864636737ad6</code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir11m07wj30vo0kadlk.jpg" alt=""></p><p>（3）对端口进行测试：<br><code>http://ehsqrc.natappfree.cc/sell/buyer/product/list</code></p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir15z7csj31ja0u0n6x.jpg" alt=""></p><h3 id="14、枚举问题"><a href="#14、枚举问题" class="headerlink" title="14、枚举问题"></a>14、枚举问题</h3><p>我们一般在设计枚举类是在数据库中存的数字编码，然后对应到枚举状态，而当我们需要在页面显示的时候，往往是需要返回编码对应的信息的，因此，需要编写枚举工具类进行转换。</p><p>枚举工具类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CodeEnum</span> <span class="token punctuation">{</span>    Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">CodeEnum</span><span class="token operator">></span> T <span class="token function">getByCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T each <span class="token operator">:</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> each<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> ProductStatusEnum <span class="token keyword">implements</span> <span class="token class-name">CodeEnum</span><span class="token punctuation">{</span>    <span class="token function">UP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"在架"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DOWN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"下架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token function">ProductStatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在对应用到的枚举实体类（<code>ProductInfo.java</code>）中添加方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JsonIgnore</span>  <span class="token comment" spellcheck="true">// 表示忽略该方法</span><span class="token keyword">public</span> ProductStatusEnum <span class="token function">getProductStatusEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> EnumUtil<span class="token punctuation">.</span><span class="token function">getByCode</span><span class="token punctuation">(</span>productStatus<span class="token punctuation">,</span> ProductStatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="15、项目刷新"><a href="#15、项目刷新" class="headerlink" title="15、项目刷新"></a>15、项目刷新</h3><p>如果前端使用freemarker模版，若想当模版中的信息修改后，不需要重新启动项目，只需要进行<code>Build Project</code>就可以刷新。</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir1c0toaj327g0d2na6.jpg" alt=""></p><h3 id="16、微信模版推送消息"><a href="#16、微信模版推送消息" class="headerlink" title="16、微信模版推送消息"></a>16、微信模版推送消息</h3><blockquote><p><strong>小技巧</strong>：一般在业务逻辑中编写代码呢，像优先级或者重要程度一般的消息逻辑在判断时如果有错误，一般打印错误日志即可，不需要抛出异常，因为这种消息模块逻辑是要加在某块重要的业务逻辑代码中的，而且该代码会涉及到事务处理，如果消息逻辑抛出异常的化则重要的业务逻辑代码不能继续执行，将会回滚，这样会影响主要的业务逻辑。</p></blockquote><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author: cyh * @Date: 2019-11-24 14:50 * @Description: 微信推送模版消息 **/</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushMessageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PushMessageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> WxMpService wxMpService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> WeChatAccountConfig accountConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderStatus</span><span class="token punctuation">(</span>OrderDTO orderDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WxMpTemplateMessage templateMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMessage<span class="token punctuation">.</span><span class="token function">setTemplateId</span><span class="token punctuation">(</span>accountConfig<span class="token punctuation">.</span><span class="token function">getTemplateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"orderStatus"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMessage<span class="token punctuation">.</span><span class="token function">setToUser</span><span class="token punctuation">(</span>orderDTO<span class="token punctuation">.</span><span class="token function">getBuyerOpenid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>WxMpTemplateData<span class="token operator">></span> data <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"亲，请记得收货。"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"keyword1"</span><span class="token punctuation">,</span> <span class="token string">"微信点餐"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"keyword2"</span><span class="token punctuation">,</span> <span class="token string">"18868812345"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"keyword3"</span><span class="token punctuation">,</span> orderDTO<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"keyword4"</span><span class="token punctuation">,</span> orderDTO<span class="token punctuation">.</span><span class="token function">getOrderStatusEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"keyword5"</span><span class="token punctuation">,</span> <span class="token string">"￥"</span> <span class="token operator">+</span> orderDTO<span class="token punctuation">.</span><span class="token function">getOrderAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">WxMpTemplateData</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"欢迎再次光临！"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMessage<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            wxMpService<span class="token punctuation">.</span><span class="token function">getTemplateMsgService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendTemplateMsg</span><span class="token punctuation">(</span>templateMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WxErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"【微信模版消息】发送失败, {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="17、卖家端扫码登录开发"><a href="#17、卖家端扫码登录开发" class="headerlink" title="17、卖家端扫码登录开发"></a>17、卖家端扫码登录开发</h3><p>微信开放平台微信登录文档:</p><pre><code>https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</code></pre><h3 id="18、微信登录AOP身份认证"><a href="#18、微信登录AOP身份认证" class="headerlink" title="18、微信登录AOP身份认证"></a>18、微信登录AOP身份认证</h3><p>微信登录时进行AOP实现身份认证以及登录登出功能实现。</p><h3 id="19、webSocket消息推送"><a href="#19、webSocket消息推送" class="headerlink" title="19、webSocket消息推送"></a>19、webSocket消息推送</h3><h3 id="20、异常捕获"><a href="#20、异常捕获" class="headerlink" title="20、异常捕获"></a>20、异常捕获</h3><p>创建订单时商品不存在的异常：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir2plhjfj31il0u0dlu.jpg" alt=""></p><p>在创建订单的时候，如果加入的商品不存在，则会报出异常，但此时想要让异常打印出一定规范的json格式，同商品添加成功时格式一致，并且也可以设置状态码，则可以添加代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> SellException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 异常提示</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>FORBIDDEN<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置自己想要返回的状态码</span>    <span class="token keyword">public</span> ResultVO <span class="token function">handlerSellerException</span><span class="token punctuation">(</span>SellException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResultVOUtil<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终显示效果：</p><p>创建订单成功时的接口返回数据格式：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir32oj9rj31if0u0q8e.jpg" alt=""></p><p>同订单成功返回接口格式一致的异常捕获：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir3akghhj31l90u0dl0.jpg" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/11/12/16e5f4bc437fa3a7?w=2182&amp;h=640&amp;f=png&amp;s=101158" alt=""></p><h3 id="21、JPA和Mybatis选择"><a href="#21、JPA和Mybatis选择" class="headerlink" title="21、JPA和Mybatis选择"></a>21、JPA和Mybatis选择</h3><p>（1）建表用sql,不用jpa建表</p><p>（2）慎用<code>@OneToMany</code>和<code>@ManyToOne</code>,表与表之间的关系最好在建库时加上。</p><h3 id="22、mybatis注解使用"><a href="#22、mybatis注解使用" class="headerlink" title="22、mybatis注解使用"></a>22、mybatis注解使用</h3><ul><li>引入依赖：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>在启动类中加入注解：<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"对应的mapper文件包"</span><span class="token punctuation">)</span></code></pre></li><li>在mapper中编写接口代码：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CategoryMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加</span>    <span class="token comment" spellcheck="true">/** 传map参数 */</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into product_category (category_name, category_type) values (#{category_name, jdbcType=VARCHAR}, #{category_type, jdbcType=INTEGER})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insertByMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 使用对象参数 */</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into product_category (category_name, category_type) values (#{categoryName, jdbcType=VARCHAR}, #{categoryType, jdbcType=INTEGER})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insertByObject</span><span class="token punctuation">(</span>ProductCategory productCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from product_category where category_type = #{categoryType}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"category_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"categoryId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"category_name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"categoryName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"category_type"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"categoryType"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    ProductCategory <span class="token function">findByCategoryType</span><span class="token punctuation">(</span>Integer categoryType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from product_category where category_name = #{categoryName}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"category_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"categoryId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"category_name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"categoryName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"category_type"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"categoryType"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>ProductCategory<span class="token operator">></span> <span class="token function">findByCategoryName</span><span class="token punctuation">(</span>Integer categoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token comment" spellcheck="true">/** 根据参数更新 */</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update product_category set category_name = #{categoryName} where category_type = #{categoryType}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateByCategoryType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"categoryName"</span><span class="token punctuation">)</span> String categoryName<span class="token punctuation">,</span>                              <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"categoryType"</span><span class="token punctuation">)</span> Integer categoryType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 根据对象更新 */</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update product_category set category_name = #{categoryName} where category_type = #{categoryType}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateByObject</span><span class="token punctuation">(</span>ProductCategory productCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from product_category where category_type = #{categoryType}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">deleteByCategoryType</span><span class="token punctuation">(</span>Integer categoryType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果想要查看mapper中的sql语句，可以在<code>application.yml</code>中进行配置：</p><pre class=" language-yml"><code class="language-yml">logging:  level:    # com.edu.cn.dishsell.mapper为mapper对应的包名    com.edu.cn.dishsell.mapper: trace</code></pre><p>日志打印结果：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir413npuj31y10u0ti3.jpg" alt=""></p><h3 id="23、用压测模拟并发的简易工具Apache-ab"><a href="#23、用压测模拟并发的简易工具Apache-ab" class="headerlink" title="23、用压测模拟并发的简易工具Apache ab"></a>23、用压测模拟并发的简易工具<code>Apache ab</code></h3><p>使用方法：</p><pre class=" language-xml"><code class="language-xml">// -n 100 表示发送100个请求，-c 100 表示模拟100个并发ab -n 100 -c 100 http://www.baidu.com///-t 60 表示连续60秒发送请求，-c 100 表示模拟100个并发ab -t 60 -c 100 http://www.baidu.com/</code></pre><h3 id="24、处理并发情况"><a href="#24、处理并发情况" class="headerlink" title="24、处理并发情况"></a>24、处理并发情况</h3><ul><li>使用<code>synchronized</code>处理并发</li></ul><p>缺点：</p><p>（1）无法做到细粒度控制</p><p>（2）只适合单点的情况</p><ul><li><h4 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a><code>redis</code>分布式锁</h4></li></ul><p>（1）查看官网<code>redis.io</code>： SETNX GETSET</p><p>（2）把需要进行并发测试的代码进行加锁和减锁</p><p>（3）代码编写：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     * @param key     * @param value 当前时间+超时时间     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String currentValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果锁过期</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span> <span class="token operator">&lt;</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取上一个锁的时间</span>            String oldValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> oldValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解锁     * @param key     * @param value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String currentValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> currentValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[redis分布式锁] 解锁异常，{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）特点：</p><ul><li>支持分布式</li><li>可以更细粒度的控制</li><li>多台机器上多个进程对一个数据进行操作的互斥</li></ul><h3 id="25、Redis缓存"><a href="#25、Redis缓存" class="headerlink" title="25、Redis缓存"></a>25、Redis缓存</h3><p>特点：命中、失效、更新</p><p>代码编写：</p><p>（1）在启动类加注解<code>@EnableCaching</code></p><p>（2）在需要添加缓存的接口上添加注解（注意：需要对用到的类进行序列化<code>Serializable</code>）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查询不更改数据时缓存注解</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改数据时缓存注解</span><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 清除缓存并添加或修改 key默认所对应的是接口中所对应的参数</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可以配置全局的cacheNames</span><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// key动态获取</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">,</span> condition <span class="token operator">=</span> <span class="token string">"#id.length() > 3"</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">"#result.getCode() != 0"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ResultVO <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span></code></pre><p>技巧：下载插件（<code>GenerateSerialVersionUID</code>）并设置快捷键：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用快捷键control + command + i</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 5404115822959335572L<span class="token punctuation">;</span></code></pre><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gdir52spo3j316q0u0aek.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门</title>
      <link href="/2020/02/13/redis-ru-men/"/>
      <url>/2020/02/13/redis-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="一、redis概念"><a href="#一、redis概念" class="headerlink" title="一、redis概念"></a>一、redis概念</h3><p><strong>概念</strong>：redis是一款高性能的NOSQL系列的非关系型数据库。</p><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><p>1、数据之间有关联关系</p><p>2、数据存储在硬盘的文件</p><h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><p>1、数据之间没有关联关系</p><p>2、数据存储在内存中</p><p><strong>总结</strong>：一般会将数据库存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据。</p><h3 id="二、下载安装"><a href="#二、下载安装" class="headerlink" title="二、下载安装"></a>二、下载安装</h3><h4 id="1、下载网址："><a href="#1、下载网址：" class="headerlink" title="1、下载网址："></a>1、下载网址：</h4><p>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></p><p>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 解压</span>tar zxvf redis<span class="token number">-4.0</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span class="token comment" spellcheck="true"># 编译测试</span>sudo make test<span class="token comment" spellcheck="true"># 编译安装</span>sudo make install<span class="token comment" spellcheck="true"># 启动redis服务端</span>redis<span class="token operator">-</span>server<span class="token comment" spellcheck="true"># 启动redis客户端</span>redis<span class="token operator">-</span>cli</code></pre><h3 id="三、redis数据结构"><a href="#三、redis数据结构" class="headerlink" title="三、redis数据结构"></a>三、redis数据结构</h3><p>redis存储的是（key,value）格式的数据，其中key都是字符串，value有5种不同的数据结构。</p><p><strong>value的数据结构</strong>：</p><ul><li>字符串类型 string </li><li>哈希类型 hash（map格式）</li><li>列表类型 list（linkedlist格式）</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ul><h3 id="四、命令操作"><a href="#四、命令操作" class="headerlink" title="四、命令操作"></a>四、命令操作</h3><h4 id="1、字符串类型-string"><a href="#1、字符串类型-string" class="headerlink" title="1、字符串类型 string"></a>1、字符串类型 string</h4><ul><li>存储：<code>set key value</code></li><li>获取：<code>get key</code></li><li>删除：<code>del key</code></li></ul><pre class=" language-sql"><code class="language-sql">cyh<span class="token variable">@chenyonuandembp</span> <span class="token operator">~</span> <span class="token operator">%</span> redis<span class="token operator">-</span>cli<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">set</span> username zhangsanOK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> get username<span class="token string">"zhangsan"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> del username<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> get username<span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><h4 id="2、哈希类型-hash"><a href="#2、哈希类型-hash" class="headerlink" title="2、哈希类型 hash"></a>2、哈希类型 hash</h4><ul><li><strong>存储</strong>：<code>hset key field value</code></li><li><strong>获取</strong>：</li></ul><p><code>hget key field</code>：获取指定的field对应的值</p><p><code>hgetall key</code>：获取所以的field和value</p><ul><li><strong>删除</strong>：<code>hdel key field</code></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hset myhash username lisi<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hset myhash password <span class="token number">123</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hget myhash username<span class="token string">"lisi"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hget myhash password<span class="token string">"123"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hgetall myhash<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"password"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"123"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"username"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"lisi"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hdel myhash username<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> hgetall myhash<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"password"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"123"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> </code></pre><h4 id="3、列表类型-list（允许重复元素）"><a href="#3、列表类型-list（允许重复元素）" class="headerlink" title="3、列表类型 list（允许重复元素）"></a>3、列表类型 list（允许重复元素）</h4><p>可以添加一个元素到列表的头部（左边）或者尾部（右边）：类似于队列</p><ul><li><strong>添加</strong>：</li></ul><p><code>lpush key value</code>:将元素加入列表左边</p><p><code>rpush key value</code>:将元素加入列表右边</p><ul><li><strong>获取</strong>：<code>lrange key start end</code>:范围获取</li><li><strong>删除</strong>：</li></ul><p><code>lpop key</code>:删除列表最左边的元素，并将元素返回</p><p><code>rpop key</code>:删除列表最右边的元素，并将元素返回</p><pre class=" language-sql"><code class="language-sql"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lpush mylist <span class="token number">a</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lpush mylist <span class="token number">b</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lpush mylist <span class="token number">c</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lrange mylist <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lpop mylist<span class="token string">"c"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> rpop mylist<span class="token string">"a"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lrange mylist <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lpush mylist <span class="token number">c</span> <span class="token number">d</span> <span class="token number">e</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> lrange mylist <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"e"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"d"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"b"</span></code></pre><h4 id="4、集合类型-set（不允许重复元素）"><a href="#4、集合类型-set（不允许重复元素）" class="headerlink" title="4、集合类型 set（不允许重复元素）"></a>4、集合类型 set（不允许重复元素）</h4><ul><li><p>存储：<code>sadd key value</code></p></li><li><p>获取：<code>smembers key</code>（获取set集合中所以元素）</p></li><li><p>删除：<code>srem key value</code></p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> sadd myset <span class="token number">a</span> <span class="token number">b</span> <span class="token number">c</span> <span class="token number">d</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"d"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> srem myset <span class="token number">a</span><span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"d"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"b"</span></code></pre><h4 id="5、有序集合类型-sortedset（不允许重复元素，且元素有顺序）"><a href="#5、有序集合类型-sortedset（不允许重复元素，且元素有顺序）" class="headerlink" title="5、有序集合类型 sortedset（不允许重复元素，且元素有顺序）"></a>5、有序集合类型 sortedset（不允许重复元素，且元素有顺序）</h4><ul><li><p>存储：<code>zadd key score value</code></p></li><li><p>获取：<code>zrange key start end</code></p></li><li><p>删除：<code>zrem key value</code></p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">60</span> zhangsan<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">40</span> li<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">40</span> li<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zadd mysort <span class="token number">80</span> wangwu<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zrange mysort <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"li"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zrange mysort <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span> withscores<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"li"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"40"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"60"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"80"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zrem mysort li<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zrange mysort <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> zrange mysort <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span> withscores<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"60"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"80"</span></code></pre><h4 id="6、通用命令"><a href="#6、通用命令" class="headerlink" title="6、通用命令"></a>6、通用命令</h4><ul><li><p><code>keys *</code>：查询所有的键</p></li><li><p><code>type key</code>：获取键对应的value的类型</p></li><li><p><code>del key</code>：删除指定的key value</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">keys</span> <span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"myhash"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"mylist"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"myset"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"mysort"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"username"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">type</span> mylistlist<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> del username<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">keys</span> <span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"myhash"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"mylist"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"myset"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"mysort"</span></code></pre><h3 id="五、持久化"><a href="#五、持久化" class="headerlink" title="五、持久化"></a>五、持久化</h3><h4 id="1、解释"><a href="#1、解释" class="headerlink" title="1、解释"></a>1、解释</h4><p>redis是一个内存数据库，当redis服务重启，数据就会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p><h4 id="2、redis持久化机制"><a href="#2、redis持久化机制" class="headerlink" title="2、redis持久化机制"></a>2、redis持久化机制</h4><p><strong>ROB</strong>：默认方式，不需要进行配置，默认使用这种机制。<br>（在一定的时间间隔中，检测key的变化情况，然后持久化数据）</p><ul><li><p>编辑redis.conf文件</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">save</span> <span class="token number">900</span> <span class="token number">1</span><span class="token keyword">save</span> <span class="token number">300</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># save 60 10000</span><span class="token keyword">save</span> <span class="token number">10</span> <span class="token number">5</span></code></pre></li><li><p>重新启动redis服务器，并指定配置文件名称</p><pre class=" language-sql"><code class="language-sql">cyh<span class="token variable">@chenyonuandembp</span> redis<span class="token number">-5.0</span><span class="token punctuation">.</span><span class="token number">4</span> <span class="token operator">%</span> redis<span class="token operator">-</span>server redis<span class="token punctuation">.</span>conf </code></pre></li><li><p><em>AOF*</em>：日志记录的方式，可以记录每一条命令的操作，可以每一次命令操作后，持久化数据</p></li><li><p>编辑redis.conf文件</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># appendonly no（关闭aof）</span>appendonly yes （开启aof）<span class="token comment" spellcheck="true"># appendfsync always （每一次执行都进行持久化）</span>appendfsync everysec （每隔一秒进行一次持久化）<span class="token comment" spellcheck="true"># appendfsync no （不进行持久化）</span></code></pre></li><li><p>重新启动redis服务器，并指定配置文件名称</p><pre class=" language-sql"><code class="language-sql">cyh<span class="token variable">@chenyonuandembp</span> redis<span class="token number">-5.0</span><span class="token punctuation">.</span><span class="token number">4</span> <span class="token operator">%</span> redis<span class="token operator">-</span>server redis<span class="token punctuation">.</span>conf </code></pre></li></ul><h3 id="六、java客户端-Jedis"><a href="#六、java客户端-Jedis" class="headerlink" title="六、java客户端 Jedis"></a>六、java客户端 Jedis</h3><h4 id="1、Jedis介绍"><a href="#1、Jedis介绍" class="headerlink" title="1、Jedis介绍"></a>1、Jedis介绍</h4><p>一款java操作redis数据库的工具。</p><h4 id="2、使用步骤"><a href="#2、使用步骤" class="headerlink" title="2、使用步骤"></a>2、使用步骤</h4><ul><li>下载jedis的jar包</li><li>使用<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 操作</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="3、jedis操作各种redis中的数据结构"><a href="#3、jedis操作各种redis中的数据结构" class="headerlink" title="3、jedis操作各种redis中的数据结构"></a>3、jedis操作各种redis中的数据结构</h4><p><strong>（1）jedis的string操作</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果使用空参构造，则默认值为"localhost", 6379端口</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// string存储</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangWu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取</span>        String username <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以使用setex()f方法存储可以指定过期时间的key,value</span>        <span class="token comment" spellcheck="true">// activecode：1234键值对存入redis，并且20秒后自动删除该键值对(可以用于验证码)</span>        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"activecode"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>（2）jedis的hash操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hashTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>输出：</p><pre><code>24name:Marygender:maleage:24</code></pre><p><strong>（3）jedis的list操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        String r1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String r2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>输出：</p><pre><code>[c, b, a, a, b, c]cc[b, a, a, b]</code></pre><p><strong>（4）jedis的set操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">,</span> <span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> key <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>（5）jedis的sortedset操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sort <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">zrem</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="七、Jedis连接池"><a href="#七、Jedis连接池" class="headerlink" title="七、Jedis连接池"></a>七、Jedis连接池</h3><h4 id="1、Jedis连接池"><a href="#1、Jedis连接池" class="headerlink" title="1、Jedis连接池"></a>1、Jedis连接池</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisPoolTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个配置对象</span>        JedisPoolConfig jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最大允许连接数</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最大空闲连接</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建jedis连接池对象</span>        JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取连接</span>        Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"like"</span><span class="token punctuation">,</span> <span class="token string">"sport"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 归还到连接池中</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>配置文件详情：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd5ejhihwpj313a0iq4jn.jpg" alt="配置文件"></p><h4 id="2、Jedis连接池工具类"><a href="#2、Jedis连接池工具类" class="headerlink" title="2、Jedis连接池工具类"></a>2、Jedis连接池工具类</h4><ul><li><p><code>JedisPoolUtils</code>工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> jedis<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPool<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPoolConfig<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @Author: cyh* @Date: 2020-02-13 21:37* @Description: Jedis连接池工具类**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtils</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool jedisPool<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>      InputStream is <span class="token operator">=</span> JedisPoolUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jedis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 获取连接方法   * @return   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><code>jedis.properties</code>配置类<pre class=" language-java"><code class="language-java">host<span class="token operator">=</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>port<span class="token operator">=</span><span class="token number">6379</span>maxTotal<span class="token operator">=</span><span class="token number">50</span>maxIdle<span class="token operator">=</span><span class="token number">10</span></code></pre></li><li>测试<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisPoolUtilsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Jedis jedis <span class="token operator">=</span> JedisPoolUtils<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用</span>      jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 归还到连接池中</span>      jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>注意：使用redis缓存一些不经常发生变化的数据。如果数据库的数据一旦发生改变，则需要更新缓存。当数据库中的表执行增删改的操作时，需要修改redis缓存数据情况，先在service对应的增删改方法中，将redis删除，然后再次存入。</p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBook Pro一些常用操作</title>
      <link href="/2020/02/01/macbook-pro-yi-xie-chang-yong-cao-zuo/"/>
      <url>/2020/02/01/macbook-pro-yi-xie-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>查询mac的文件：<br><code>command+shift+g</code></p><h3 id="mac操作idea的快捷键的使用"><a href="#mac操作idea的快捷键的使用" class="headerlink" title="mac操作idea的快捷键的使用"></a>mac操作idea的快捷键的使用</h3><p><code>command + ，</code> 打开idea的Preferences,进行设置</p><p><code>command + O</code> 打开搜索框</p><p><code>command + shift + 回车</code> 转到在一行</p><h3 id="mac工具"><a href="#mac工具" class="headerlink" title="mac工具"></a>mac工具</h3><p><code>Charles</code> 代理抓包工具 (视频7-6)</p><p><code>Apache ab</code> 压测模拟并发的工具</p><p><code>natapp</code> 内网穿透工具（<a href="https://natapp.cn/）" target="_blank" rel="noopener">https://natapp.cn/）</a></p><h3 id="mac配置环境变量"><a href="#mac配置环境变量" class="headerlink" title="mac配置环境变量"></a>mac配置环境变量</h3><p>1、配置环境变量路径：</p><pre><code>cd /etc/profile</code></pre><p>2、查看配置文件：</p><pre><code>cat /etc/profile</code></pre><p>3、编辑配置文件：</p><pre><code>vim /etc/profile</code></pre><p><strong>编辑完成退出</strong>:按<code>ESC</code></p><p><strong>保存并退出</strong>：输入 <code>:wq!</code> (因为是 readonly文件，感叹号用于保存对readonly文件的修改)</p><p>4、插入代码：插入指令<code>i</code></p><h3 id="配置mysql环境变量"><a href="#配置mysql环境变量" class="headerlink" title="配置mysql环境变量"></a>配置mysql环境变量</h3><blockquote><p>(1).进入<code>/usr/local/mysql/bin</code>,查看此目录下是否有<code>mysql</code>。<br>(2).执行<code>vim ~/.bash_profile</code><br>      在该文件中添加mysql/bin的目录，添加：<br>     <code>PATH=$PATH:/usr/local/mysql/bin</code><br>添加完成后，按<code>esc</code>，然后输入<code>wq</code>保存。<br>最后在命令行输入<code>source ~/.bash_profile</code></p></blockquote><h3 id="mac解压文件"><a href="#mac解压文件" class="headerlink" title="mac解压文件"></a>mac解压文件</h3><p>1、下载安装包 RAR for Mac OS X</p><blockquote><p>下载地址：<a href="https://www.rarlab.com/download.htm" target="_blank" rel="noopener">https://www.rarlab.com/download.htm</a></p></blockquote><p>2、解压压缩包，使用 <code>cd Downloads/rar</code>进入</p><p>3、使用以下命令分别安装 rar 和 unrar：</p><pre><code>sudo install -c -o $USER rar /usr/local/binsudo install -c -o $USER unrar /usr/local/bin</code></pre><p>4、测试命令：</p><pre><code>解压：unrar x FileName.rar压缩：rar a FileName.rar DirName</code></pre><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>nginx的网站根目录有两个：</p><pre><code>1、/usr/local/Cellar/nginx/1.17.3_1/html2、/usr/local/var/www</code></pre><p>nginx的一些配置路径：</p><pre><code>/usr/local/etc/nginx/nginx.conf （配置文件路径）/usr/local/var/www （服务器默认路径）/usr/local/Cellar/nginx/1.17.3_1 （貌似是安装路径）</code></pre><p>将vue项目部署到nginx上：</p><pre><code>// 复制vue项目下编译后的dist文件到nginx的html文件夹的sell文件夹下cp -r dist/* /usr/local/var/www/sell// 配置nginx反向代理</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中日志的使用</title>
      <link href="/2019/11/10/ri-zhi-de-shi-yong/"/>
      <url>/2019/11/10/ri-zhi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Slf4j日志使用"><a href="#一、Slf4j日志使用" class="headerlink" title="一、Slf4j日志使用"></a>一、Slf4j日志使用</h3><h4 id="1、使用slf4j常规打印日志："><a href="#1、使用slf4j常规打印日志：" class="headerlink" title="1、使用slf4j常规打印日志："></a>1、使用slf4j常规打印日志：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>dishsell<span class="token punctuation">.</span>logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LoggerTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xaw79t9j31rq06g0u4.jpg" alt=""></p><p>之所以没有打印出debug，是因为日志的等级低,查看如下源码（mac可通过command+O打开查询类名）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment" spellcheck="true">// (powered by Fernflower decompiler)</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">package</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Level <span class="token punctuation">{</span>    <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WARN</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"WARN"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">INFO</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"INFO"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"DEBUG"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TRACE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"TRACE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelInt<span class="token punctuation">;</span>    <span class="token keyword">private</span> String levelStr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Level</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelInt <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelStr <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>levelInt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>levelStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、使用注解-Slf4j打印日志："><a href="#2、使用注解-Slf4j打印日志：" class="headerlink" title="2、使用注解@Slf4j打印日志："></a>2、使用注解<code>@Slf4j</code>打印日志：</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出日志结果同上。</p><h4 id="3、日志输出变量："><a href="#3、日志输出变量：" class="headerlink" title="3、日志输出变量："></a>3、日志输出变量：</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"111111"</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 推荐写法</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"name: {}, password: {}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：<br><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xaotm8uj31y406mq4b.jpg" alt=""></p><h3 id="二、Logback的配置"><a href="#二、Logback的配置" class="headerlink" title="二、Logback的配置"></a>二、Logback的配置</h3><h4 id="1、application-yml配置-（适用于小型项目配置）"><a href="#1、application-yml配置-（适用于小型项目配置）" class="headerlink" title="1、application.yml配置 （适用于小型项目配置）"></a>1、<code>application.yml</code>配置 （适用于小型项目配置）</h4><p>（1）在<code>application.yml</code>中配置日志：</p><pre class=" language-yml"><code class="language-yml">logging:  pattern:    console: "%d - %msg%n" #表示输出的是对应的 时间-信息</code></pre><p>输出：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xb7ks5yj30r604wweu.jpg" alt=""><br>（2）设置日志的路径：</p><pre class=" language-yml"><code class="language-yml">logging:  path: /Users/cyh/Documents/code/java/java项目/dishsell/src/main/java/com/edu/cn/dishsell/log</code></pre><p>输出：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xbeysx2j31ys0u0ww4.jpg" alt=""><br>（3）为日志设置路径以及日志名称：</p><pre class=" language-yml"><code class="language-yml">logging:  file: /Users/cyh/Documents/code/java/java项目/dishsell/src/main/java/com/edu/cn/dishsell/log/sell.log</code></pre><p>输出：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xbrbi29j321y0u0as2.jpg" alt=""><br>（4）配置<code>debug</code>:</p><pre class=" language-yml"><code class="language-yml">logging:  pattern:    console: "%d - %msg%n" #表示输出的是对应的 时间-信息  level:    com.edu.cn.dishsell.logger.LoggerTest: debug</code></pre><p>输出：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xbz3xxhj30ue054wf0.jpg" alt=""></p><h4 id="2、logback-spring-xml配置（适用于大型项目）"><a href="#2、logback-spring-xml配置（适用于大型项目）" class="headerlink" title="2、logback-spring.xml配置（适用于大型项目）"></a>2、<code>logback-spring.xml</code>配置（适用于大型项目）</h4><p>（1）先在项目的<code>resources</code>文件下创建<code>logback-spring.xml</code>配置文件</p><p>（2）对<code>logback-spring.xml</code>文件进行日志配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在控制台的日志打印信息设置，打印格式为：时间-信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consoleLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %d - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 输出日志文件信息info，按时间滚动，每天产生一个日志文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileInfoLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 过滤日志文件中级别高于info的日志信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>               %d - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 滚动策略(每天一个日志文件) --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 日志输出路径 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>/Users/cyh/Documents/code/java/java项目/dishsell/src/main/java/com/edu/cn/dishsell/log/sell/info.%d.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 错误日志文件信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileErrorLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 滚动策略(每天一个日志文件) --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 路径 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>/Users/cyh/Documents/code/java/java项目/dishsell/src/main/java/com/edu/cn/dishsell/log/sell/error.%d.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consoleLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileInfoLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileErrorLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>输出：</p><ul><li>info日志</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xc78a01j31fy0u0qlg.jpg" alt="info日志"></p><ul><li>error日志</li></ul><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1xce05l9j31fp0u0dpl.jpg" alt="error日志"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex的使用</title>
      <link href="/2019/10/16/latex-de-shi-yong/"/>
      <url>/2019/10/16/latex-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p> LaTex的语法：</p><table><thead><tr><th>语法</th><th>解释</th></tr></thead><tbody><tr><td>\usepackage{xeCJK}</td><td>使用宏包(为了能够显示汉字)</td></tr><tr><td>\title{文章的标题}</td><td>文章标题</td></tr><tr><td>\author{作者名称}</td><td>作者的名称</td></tr><tr><td>\date{\today}</td><td>日期</td></tr><tr><td>\usepackage[a4paper,left=10mm,right=10mm,top=15mm,bottom=15mm]{geometry}</td><td>设置页面的环境,a4纸张大小，左右上下边距信息</td></tr><tr><td>\maketitle</td><td>添加这一句才能够显示标题等信息，这一行一定要在\begin{document}的下面</td></tr><tr><td>\section{一级标题1}</td><td>一级标题1</td></tr><tr><td>\subsection{二级标题1.1}</td><td>二级标题1.1</td></tr><tr><td>\subsubsection{三级标题1.1.1}</td><td>三级标题下的内容1.1.1</td></tr><tr><td>\renewcommand{\contentsname}{目录}</td><td>将content转为目录</td></tr><tr><td>\tableofcontents</td><td>正文的目录设置</td></tr><tr><td>\begin{abstract}内容\end{abstract}</td><td>摘要开始、结束部分</td></tr><tr><td>\newpage</td><td>另起一页</td></tr><tr><td>\par</td><td>正文的段落设置：在一段的最后添加\par代表一段的结束；</td></tr><tr><td>\footnote{脚注内容}</td><td>在需要添加脚注的文字后添加\footnote{脚注内容}即可</td></tr><tr><td>\begin{quote}\end{quote}</td><td>引用的使用</td></tr><tr><td>{\fangsong }</td><td>字体的改变：使用{\fangsong } ，{}中的内容即为仿宋字体等。</td></tr><tr><td>\usepackage{graphicx}</td><td>图片控制宏包</td></tr><tr><td>\begin{figure}[htbp]\end{figure}</td><td>插入图片。htbp 代表图片插入位置的设置</td></tr><tr><td>\centering</td><td>图片居中</td></tr><tr><td>\includegraphics[width=5cm]{xyj.jpg}</td><td>[]中可选参数，可以设置图片的宽高</td></tr><tr><td>\caption{六小龄童}</td><td>为图片添加名称</td></tr><tr><td>\begin{table}[htbp]\end{table}</td><td>表格插入。htbp代表表格浮动位置</td></tr><tr><td>\caption{西游记四人身份表}</td><td>添加表头</td></tr><tr><td>\begin{tabular}{cccc}\end{tabular}</td><td>创建table环境。4个c代表4列都居中，也可以设置l,r</td></tr><tr><td>\hline</td><td>一条水平线</td></tr><tr><td>\\</td><td>换行符</td></tr><tr><td>$\sin(x)$</td><td>行内公式用两个<code>$</code>包裹就行</td></tr><tr><td>\begin{equation} y=\sin(x) \end{equation}</td><td>行之间的公式，列表公式，使用\begin{equation}进行编写</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger ui和spring boot集成生成api文档</title>
      <link href="/2019/10/15/swagger-ui-he-spring-boot-ji-cheng-sheng-cheng-api-wen-dang/"/>
      <url>/2019/10/15/swagger-ui-he-spring-boot-ji-cheng-sheng-cheng-api-wen-dang/</url>
      
        <content type="html"><![CDATA[<h4 id="一、环境配置pom-xml"><a href="#一、环境配置pom-xml" class="headerlink" title="一、环境配置pom.xml"></a>一、环境配置pom.xml</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="二、创建文件夹swagger，编写对应的内容。"><a href="#二、创建文件夹swagger，编写对应的内容。" class="headerlink" title="二、创建文件夹swagger，编写对应的内容。"></a>二、创建文件夹swagger，编写对应的内容。</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1wp8xgx6j31je0u0h0w.jpg" alt=""></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 当前包路径</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"edu.dlut.thesismanage.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Spring Boot中使用Swagger2构建RESTful APIs"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"api根地址：http://localhost:8443/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="三、相关注解"><a href="#三、相关注解" class="headerlink" title="三、相关注解"></a>三、相关注解</h4><p>1、<code>@Api(value = "TeacherController", description = "教师相关api")</code></p><p>作用：用在controller类上，说明该类的作用</p><p>2、<code>@ApiOperation("通过条件查询所有列表")</code></p><p>作用：用在方法上，说明方法的作用</p><p>3、 <code>@ApiModelProperty(value = "老师ID")</code></p><p>作用：描述一个model的属性</p><h4 id="四、项目访问"><a href="#四、项目访问" class="headerlink" title="四、项目访问"></a>四、项目访问</h4><p>地址：<a href="http://localhost:8443/swagger-ui.html#/" target="_blank" rel="noopener">http://localhost:8443/swagger-ui.html#/</a></p><p>效果如下：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1wqefbknj31im0u00zm.jpg" alt="API文档效果图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud中RestTemplate的使用</title>
      <link href="/2019/10/10/springcloud-zhong-resttemplate-de-shi-yong/"/>
      <url>/2019/10/10/springcloud-zhong-resttemplate-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringCloud中RestTemplate的使用"><a href="#SpringCloud中RestTemplate的使用" class="headerlink" title="SpringCloud中RestTemplate的使用"></a>SpringCloud中RestTemplate的使用</h3><p>随着微服务的广泛使用，在实际的开发中，客户端代码中调用RESTful接口也越来越常见。<code>RestTemplate</code> 就是 Spring 封装的处理同步 HTTP 请求的类。</p><h4 id="一、概念定义"><a href="#一、概念定义" class="headerlink" title="一、概念定义"></a>一、概念定义</h4><p> <code>RestTemplate</code>采用同步方式执行 HTTP 请求的类，底层使用 JDK 原生<code>HttpURLConnection</code>API ，或者 <code>HttpComponents</code>等其他 HTTP 客户端请求类库。 <code>RestTemplate</code>提供模板化的方法让开发者能更简单地发送 HTTP 请求。Spring 5开始，更推荐使用非阻塞的响应式 HTTP 请求处理类 <code>org.springframework.web.reactive.client.WebClient</code>来替代 <code>RestTemplate</code>，尤其是对应异步请求处理的场景上，使用方式和RestTemplate基本类似，但性能更强，吞吐更好 。</p><h4 id="二、-RestTemplate-类的API"><a href="#二、-RestTemplate-类的API" class="headerlink" title="二、 RestTemplate 类的API"></a>二、 <code>RestTemplate</code> 类的API</h4><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>getForObject</code></td><td>通过 GET 请求获得响应结果</td></tr><tr><td><code>getForEntity</code></td><td>通过 GET 请求获取 <code>ResponseEntity</code>对象，包容有状态码，响应头和响应数据</td></tr><tr><td><code>headForHeaders</code></td><td>以 HEAD 请求资源返回所有响应头信息</td></tr><tr><td><code>postForLocation</code></td><td>用 POST 请求创建资源，并返回响应数据中响应头的字段 <code>Location</code> 的数据</td></tr><tr><td><code>postForObject</code></td><td>通过 PATCH 请求创建资源，获得响应结果</td></tr><tr><td><code>put</code></td><td>通过 PUT 方式请求来创建或者更新资源</td></tr><tr><td><code>patchForObject</code></td><td>通过 PATH 方式请求来更新资源，并获得响应结果。(JDK <code>HttpURLConnection</code>不支持 PATH 方式请求，其他 HTTP 客户端库支持)</td></tr><tr><td><code>delete</code></td><td>通过 DELETE 方式删除资源</td></tr><tr><td><code>optionsForAllow</code></td><td>通过 ALLOW 方式请求来获得资源所允许访问的所有 HTTP 方法，可用看某个请求支持哪些请求方式</td></tr><tr><td><code>exchange</code></td><td>更通用版本的请求处理方法，接受一个 <code>RequestEntity</code>对象，可以设置路径，请求头，请求信息等，最后返回一个 <code>ResponseEntity</code> 实体</td></tr><tr><td><code>execute</code></td><td>最通用的执行 HTTP 请求的方法，上面所有方法都是基于 <code>execute</code>的封装，全面控制请求信息，并通过回调接口获得响应数据</td></tr></tbody></table><blockquote><p>RESTful：用 URL 定位资源，用 HTTP 动词描述操作，如 GET,POST,DELETE,PUT，简单来说通过 URL 就知道访问什么资源，通过 HTTP Method 就知道执行什么操作，通过 HTTP Status Code 就知道执行结果。</p></blockquote><h4 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h4><p>在学习SpringCloud时，编写服务消费者（电影微服务）时使用RestTemplate实现了基于HTTP的远程调用，调用用户微服务的RESTful API，从而查询指定id的用户信息。</p><p>1、启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MovieApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、controller层：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/movies"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里用到了RestTemplate的占位符能力</span>        User user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8000/users/{id}"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...微服务业务...</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>参考引用：<br></p><p>闻人的技术博客—<a href="https://juejin.im/post/5cd680eff265da037b612e28" target="_blank" rel="noopener">https://juejin.im/post/5cd680eff265da037b612e28</a></p><p>周立—<a href="http://www.itmuch.com/spring-cloud/finchley-2/" target="_blank" rel="noopener">http://www.itmuch.com/spring-cloud/finchley-2/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud微服务</title>
      <link href="/2019/10/09/spring-cloud-wei-fu-wu/"/>
      <url>/2019/10/09/spring-cloud-wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<h5 id="Spring-Cloud是一个快速构建分布式应用的工具集"><a href="#Spring-Cloud是一个快速构建分布式应用的工具集" class="headerlink" title="Spring Cloud是一个快速构建分布式应用的工具集"></a>Spring Cloud是一个快速构建分布式应用的工具集</h5><blockquote><p>Spring Cloud微服务学习示例代码：<a href="https://github.com/cyh756085049/spring-cloud-study" target="_blank" rel="noopener">https://github.com/cyh756085049/spring-cloud-study</a></p></blockquote><h3 id="一、构建分布式应用"><a href="#一、构建分布式应用" class="headerlink" title="一、构建分布式应用"></a>一、构建分布式应用</h3><h4 id="1、服务提供者和服务消费者的定义"><a href="#1、服务提供者和服务消费者的定义" class="headerlink" title="1、服务提供者和服务消费者的定义"></a>1、服务提供者和服务消费者的定义</h4><table><thead><tr><th>名词</th><th>定义</th></tr></thead><tbody><tr><td>服务提供者</td><td>服务的被调用方（为其他服务提供服务的服务）</td></tr><tr><td>服务消费者</td><td>服务的调用方（依赖其他服务的服务）</td></tr></tbody></table><h4 id="2、搭建Spring-Cloud框架"><a href="#2、搭建Spring-Cloud框架" class="headerlink" title="2、搭建Spring Cloud框架"></a>2、搭建<strong><code>Spring Cloud</code></strong>框架</h4><p>（1）先创建一个Maven项目</p><p>（2）在该Maven下新建一个Module，选择Spring Initializr，创建SpringBoot项目<img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gcz2tdaigrj31cm0u0q7t.jpg" alt="image-20191009092353372"></p><p>（3）应用开发，遵循三步：加依赖；加注解；写配置</p><ul><li>加依赖：pom.xml（一般依赖）：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Greenwich.SR3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 提供了Spring Data JPA的支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 提供了Spring MVC的支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- h2 是一种内嵌的数据库，语法和MySQL类似 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 一款开发利器，可以帮助你简化掉N多冗余代码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入spring cloud的依赖，不能少，主要用来管理Spring Cloud生态各组件的版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><ul><li><p>加注解（一般常用注解）：</p><table><thead><tr><th>注解</th><th>注解含义解释</th></tr></thead><tbody><tr><td><code>@Table</code></td><td>声明此对象映射到数据库的数据表</td></tr><tr><td><code>@Entity</code></td><td>对实体注释</td></tr><tr><td><code>@Id</code></td><td>声明此属性为主键</td></tr><tr><td><code>@GeneratedValue(strategy = GenerationType.AUTO)</code></td><td>指定主键的生成策略：<br>TABLE：使用一个特定的数据库表格来保存主键。<br>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。IDENTITY：主键由数据库自动生成（主要是自动增长型）。<br>AUTO：主键由程序控制。</td></tr><tr><td><code>@Column</code></td><td>声明该属性与数据库字段的映射关系</td></tr><tr><td><code>@Data</code></td><td>用来指定实体对象的Getter和Setter方法</td></tr><tr><td><code>@AllArgsConstructor</code></td><td>用来指定全参数构造器</td></tr><tr><td><code>@NoArgsConstructor</code></td><td>用来指定无参构造器</td></tr><tr><td><code>@Repository</code></td><td>用来表明该类是用来执行与数据库相关的操作（即dao对象）,作用于持久层</td></tr><tr><td><code>@Service</code></td><td>作用于业务逻辑层</td></tr><tr><td><code>@Component</code></td><td>是通用注解，当组件不好归类的时候，我们就可以用这个注解进行标注</td></tr><tr><td><code>@Controller</code></td><td>是spring-mvc的注解，具有将请求进行转发，重定向的功能。返回的是字符串，或者是字符串匹配的模板名称，即直接渲染视图，与html页面配合使用的，返回到指定页面。</td></tr><tr><td><code>@RestController</code></td><td>相当于<code>@ResponseBody ＋ @Controller</code>合在一起的作用。是将方法返回的对象直接在浏览器上展示成json格式</td></tr><tr><td><code>@RequestMapping</code></td><td>用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径；用于方法上，表示在类的父路径下追加方法上注解中的地址将会访问到该方法，例如：<code>@RequestMapping(value = "/selectByCondition",method = RequestMethod.*GET*)</code></td></tr><tr><td><code>@RequestParam</code></td><td>配合 @RequestMapping 一起使用，可以将请求的参数同处理方法的参数绑定在一起，例如：<code>@RequestParam(value = "nowPage", defaultValue = "1"，required = false)</code>required 这个参数定义了参数值是否是必须要传的</td></tr><tr><td><code>@PathVariable</code></td><td>用来获取请求路径（url ）中的动态参数。例如：<code>@RequestMapping(value = "user/login/{id}/{name}/{status}")</code>中的 <code>{id}/{name}/{status}</code>与 <code>@PathVariable int id、@PathVariable String name、@PathVariable boolean status</code>一一对应，按名匹配。</td></tr><tr><td><code>@ResponseBody</code></td><td>表示该方法的返回的结果直接写入 HTTP 响应正文（ResponseBody）中，一般在异步获取数据时使用，通常是在使用 @RequestMapping 后，返回值通常解析为跳转路径，加上 <code>@Responsebody</code> 后返回结果不会被解析为跳转路径，而是直接写入HTTP 响应正文中。会直接返回 json 数据。例如：<code>@RequestBody Thesis t</code></td></tr><tr><td><code>@GetMapping</code></td><td>是<code>@RequestMapping(method = RequestMethod.GET)</code>的缩写。该注解将HTTP Get 映射到 特定的处理方法上</td></tr><tr><td><code>@PostMapping</code></td><td>是<code>@RequestMapping(method = RequestMethod.POST)</code>的缩写。该注解用于将HTTP post请求映射到特定处理程序的方法注解</td></tr><tr><td><code>@Slf4j</code></td><td>引入日志</td></tr><tr><td><code>@Param</code></td><td>xml中的参数用在方法中使用注解。例如：<code>@Param(value = "condition") String condition</code></td></tr><tr><td><code>@SpringBootApplication</code></td><td>是一个组合注解，它整合了<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>注解，并开启了Spring Boot程序的组件扫描和自动配置功能。</td></tr><tr><td><code>@Autowired</code></td><td>自动装配，其作用是为了消除代码Java代码里面的getter/setter与bean属性中的property</td></tr></tbody></table></li></ul><ul><li>加配置：application.yml（一般配置）：</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 让hibernate打印执行的SQL</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> INFO    <span class="token comment" spellcheck="true"># 配置日志级别，让hibernate打印出执行的SQL参数</span>    <span class="token key atrule">org.hibernate</span><span class="token punctuation">:</span> INFO    <span class="token key atrule">org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">:</span> TRACE    <span class="token key atrule">org.hibernate.type.descriptor.sql.BasicExtractor</span><span class="token punctuation">:</span> TRACE</code></pre><h3 id="二、Spring-Boot的监控组件Spring-Boot-Actuator"><a href="#二、Spring-Boot的监控组件Spring-Boot-Actuator" class="headerlink" title="二、Spring Boot的监控组件Spring Boot Actuator"></a>二、Spring Boot的监控组件Spring Boot Actuator</h3><h4 id="1、Actuator为我们提供了很多监控端点，如下表所示。"><a href="#1、Actuator为我们提供了很多监控端点，如下表所示。" class="headerlink" title="1、Actuator为我们提供了很多监控端点，如下表所示。"></a>1、Actuator为我们提供了很多监控端点，如下表所示。</h4><table><thead><tr><th align="left">端点（Spring Boot 2.x）</th><th align="left">描述</th><th align="left">HTTP方法</th><th align="left">是否敏感</th><th align="left">端点（Spring Boot 1.x）</th></tr></thead><tbody><tr><td align="left">conditions</td><td align="left">显示自动配置的信息</td><td align="left">GET</td><td align="left">是</td><td align="left">autoconfig</td></tr><tr><td align="left">beans</td><td align="left">显示应用程序上下文所有的<code>Spring bean</code></td><td align="left">GET</td><td align="left">是</td><td align="left">beans</td></tr><tr><td align="left">configprops</td><td align="left">显示所有<code>@ConfigurationProperties</code>的配置属性列表</td><td align="left">GET</td><td align="left">是</td><td align="left">configprops</td></tr><tr><td align="left">dump</td><td align="left">显示线程活动的快照</td><td align="left">GET</td><td align="left">是</td><td align="left">dump</td></tr><tr><td align="left">env</td><td align="left">显示环境变量，包括系统环境变量以及应用环境变量</td><td align="left">GET</td><td align="left">是</td><td align="left">env</td></tr><tr><td align="left">health</td><td align="left">显示应用程序的健康指标，值由HealthIndicator的实现类提供；结果有UP、 DOWN、OUT_OF_SERVICE、UNKNOWN；如需查看详情，需配置：<code>management.endpoint.health.show-details</code></td><td align="left">GET</td><td align="left">否</td><td align="left">health</td></tr><tr><td align="left">info</td><td align="left">显示应用的信息，可使用<code>info.*</code> 属性自定义info端点公开的数据</td><td align="left">GET</td><td align="left">否</td><td align="left">info</td></tr><tr><td align="left">mappings</td><td align="left">显示所有的URL路径</td><td align="left">GET</td><td align="left">是</td><td align="left">mappings</td></tr><tr><td align="left">metrics</td><td align="left">显示应用的度量标准信息</td><td align="left">GET</td><td align="left">是</td><td align="left">metrics</td></tr></tbody></table><p>只需访问<code>http://{ip}:{port}/actuator/{endpoint}</code> 端点，即可监控应用的运行状况。</p><h4 id="2、添加依赖："><a href="#2、添加依赖：" class="headerlink" title="2、添加依赖："></a>2、添加依赖：</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Spring Boot Actuator是Spring Boot官方提供的监控组件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="3、加配置："><a href="#3、加配置：" class="headerlink" title="3、加配置："></a>3、加配置：</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 是否展示健康检查详情</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always      <span class="token key atrule">beans</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">mappings</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 暴露metrics端点，如需暴露多个，用,分隔；如需暴露所有端点，用'*'</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><h3 id="三、服务注册与服务发现eureka"><a href="#三、服务注册与服务发现eureka" class="headerlink" title="三、服务注册与服务发现eureka"></a>三、服务注册与服务发现eureka</h3><p>Eureka是Netflix开源的服务发现组件，本身是一个基于REST的服务，包含Server和Client两部分，Spring Cloud将它集成在子项目Spring Cloud Netflix中。</p><h4 id="1、Eureka原理"><a href="#1、Eureka原理" class="headerlink" title="1、Eureka原理"></a>1、Eureka原理</h4><ul><li><p>Eureka Server提供服务发现的能力，各个微服务启动时，会向Eureka Server注册自己的信息（例如IP、端口、微服务名称等），Eureka Server会存储这些信息；</p></li><li><p>Eureka Client是一个Java客户端，用于简化与Eureka Server的交互；</p></li><li><p>微服务启动后，会周期性（<strong>默认30秒</strong>）地向Eureka Server发送心跳以续约自己的“租期”；</p></li><li><p>如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（<strong>默认90秒</strong>）；</p></li><li><p>默认情况下，<strong>Eureka Server同时也是Eureka Client。多个Eureka Server实例，互相之间通过增量复制的方式，来实现服务注册表中数据的同步</strong>。Eureka Server默认保证在90秒内，Eureka Server集群内的所有实例中的数据达到一致（从这个架构来看，Eureka Server所有实例所处的角色都是<strong>对等</strong>的，没有类似Zookeeper、Consul、Etcd等软件的选举过程，也不存在主从，<strong>所有的节点都是主节点</strong>。Eureka官方将Eureka Server集群中的所有实例称为“<strong>对等体（peer）</strong>”）</p></li><li><p>Eureka Client会缓存服务注册表中的信息。这种方式有一定的优势——首先，微服务无需每次请求都查询Eureka Server，从而降低了Eureka Server的压力；其次，即使Eureka Server所有节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者并完成调用。</p></li></ul><p>综上，Eureka通过心跳检查、客户端缓存等机制，提高了系统的灵活性、可伸缩性和可用性。</p><h4 id="2、Eureka代码示例"><a href="#2、Eureka代码示例" class="headerlink" title="2、Eureka代码示例"></a>2、Eureka代码示例</h4><h5 id="2-1、编写Eureka-Server"><a href="#2-1、编写Eureka-Server" class="headerlink" title="2.1、编写Eureka Server"></a>2.1、编写Eureka Server</h5><p>（1）加依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>（2）启动类加注解：<code>@EnableEurekaServer</code></p><p>（3）加配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 是否要注册到其他Eureka Server实例</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true"># 是否要从其他Eureka Server实例获取数据</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka/</code></pre><h5 id="2-2、编写Eureka-Client，将应用注册到Eureka-Server上"><a href="#2-2、编写Eureka-Client，将应用注册到Eureka-Server上" class="headerlink" title="2.2、编写Eureka Client，将应用注册到Eureka Server上"></a>2.2、编写Eureka Client，将应用注册到Eureka Server上</h5><p>（1）加依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>（2）启动类加注解：早期的版本（Dalston及更早版本）还需在启动类上添加注解<code>@EnableDiscoveryClient</code> 或<code>@EnableEurekaClient</code> ，从Edgware开始，该注解可省略。</p><p>（3）加配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定注册到eureka server上的服务名称</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 指定eureka server通信地址，注意/eureka/小尾巴不能少</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 是否注册IP到eureka server，如不指定或设为false，那就会注册主机名到eureka server</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><h4 id="3、高可用Eureka-Server"><a href="#3、高可用Eureka-Server" class="headerlink" title="3、高可用Eureka Server"></a>3、高可用Eureka Server</h4><h5 id="Eureka-Server配置："><a href="#Eureka-Server配置：" class="headerlink" title="Eureka Server配置："></a>Eureka Server配置：</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>ha<span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> peer1                                 <span class="token comment" spellcheck="true"># 指定profile=peer1</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer1                               <span class="token comment" spellcheck="true"># 指定当profile=peer1时，主机名是peer1</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka/      <span class="token comment" spellcheck="true"># 将自己注册到peer2这个Eureka上面去</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> peer2<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8762</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer2  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka/</code></pre><h5 id="Eureka-Client配置："><a href="#Eureka-Client配置：" class="headerlink" title="Eureka Client配置："></a>Eureka Client配置：</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定注册到eureka server上的服务名称</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 是否注册IP到eureka server，如不指定或设为false，那就会注册主机名到eureka server</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><h4 id="4、Eureka安全认证"><a href="#4、Eureka安全认证" class="headerlink" title="4、Eureka安全认证"></a>4、Eureka安全认证</h4><p>Eureka本身不具备安全认证的能力，Spring Cloud使用Spring Security为Eureka Server进行了增强。</p><h5 id="4-1-Eureka-Server端"><a href="#4-1-Eureka-Server端" class="headerlink" title="4.1 Eureka Server端"></a>4.1 Eureka Server端</h5><p>此处构建一个需要登录才能访问的Eureka Server。</p><p>（1）加依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>（2）启动类加注解：<code>@EnableEurekaServer</code></p><p>（3）配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 是否要注册到其他Eureka Server实例</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true"># 是否要从其他Eureka Server实例获取数据</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#加上用户名密码</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//user<span class="token punctuation">:</span>password1234@localhost<span class="token punctuation">:</span>8761/eureka/<span class="token comment" spellcheck="true"># 如不设置这段内容，账号默认是user，密码是一个随机值，该值会在启动时打印出来。</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 配置登录的账号是user</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> user      <span class="token comment" spellcheck="true"># 配置登录的密码是123456</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre><p>（4）写代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Spring Cloud Finchley及更高版本，必须添加如下代码，部分关闭掉Spring Security * 的CSRF保护功能，否则应用无法正常注册！ * ref: http://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_securing_the_eureka_server */</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoringAntMatchers</span><span class="token punctuation">(</span><span class="token string">"/eureka/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）运行：<a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a></p><h5 id="4-2-Eureka-Client端"><a href="#4-2-Eureka-Client端" class="headerlink" title="4.2 Eureka Client端"></a>4.2 Eureka Client端</h5><p>改配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 指定eureka server通信地址，注意/eureka/小尾巴不能少</span>    <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//user<span class="token punctuation">:</span>123456@localhost<span class="token punctuation">:</span>8761/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 是否注册IP到eureka server，如不指定或设为false，那就会注册主机名到eureka server</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p><em>参考：</em></p><blockquote><p>周立—<a href="http://www.itmuch.com/spring-cloud/spring-cloud-index/" target="_blank" rel="noopener">http://www.itmuch.com/spring-cloud/spring-cloud-index/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件随机场</title>
      <link href="/2019/07/24/tiao-jian-sui-ji-chang/"/>
      <url>/2019/07/24/tiao-jian-sui-ji-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="第十一章-条件随机场"><a href="#第十一章-条件随机场" class="headerlink" title="第十一章 条件随机场"></a>第十一章 条件随机场</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cuo3uifj30u00x1ww0.jpg" alt="条件随机场思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐马尔代夫模型</title>
      <link href="/2019/07/16/yin-ma-er-dai-fu-mo-xing/"/>
      <url>/2019/07/16/yin-ma-er-dai-fu-mo-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="第十章-隐马尔可夫模型"><a href="#第十章-隐马尔可夫模型" class="headerlink" title="第十章 隐马尔可夫模型"></a>第十章 隐马尔可夫模型</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0ctdb1lej30u015e1jn.jpg" alt="隐马尔代夫模型思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EM算法及推广</title>
      <link href="/2019/07/09/em-suan-fa-ji-tui-guang/"/>
      <url>/2019/07/09/em-suan-fa-ji-tui-guang/</url>
      
        <content type="html"><![CDATA[<h3 id="第九章-EM算法及其推广"><a href="#第九章-EM算法及其推广" class="headerlink" title="第九章 EM算法及其推广"></a>第九章 EM算法及其推广</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cs8sxhsj31hb0u0dvv.jpg" alt="EM算法及推广思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升方法</title>
      <link href="/2019/07/02/ti-sheng-fang-fa/"/>
      <url>/2019/07/02/ti-sheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="第八章-提升方法"><a href="#第八章-提升方法" class="headerlink" title="第八章 提升方法"></a>第八章 提升方法</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cq5kklyj30u00zbqp9.jpg" alt="提升方法思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持向量机</title>
      <link href="/2019/06/25/zhi-chi-xiang-liang-ji/"/>
      <url>/2019/06/25/zhi-chi-xiang-liang-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="第七章-支持向量机"><a href="#第七章-支持向量机" class="headerlink" title="第七章 支持向量机"></a>第七章 支持向量机</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cooufgfj30u00v14kz.jpg" alt="支持向量机思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑斯蒂回归与最大熵模型</title>
      <link href="/2019/06/18/luo-ji-si-di-hui-gui-yu-zui-da-shang-mo-xing/"/>
      <url>/2019/06/18/luo-ji-si-di-hui-gui-yu-zui-da-shang-mo-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="第六章-逻辑斯蒂回归与最大熵模型"><a href="#第六章-逻辑斯蒂回归与最大熵模型" class="headerlink" title="第六章 逻辑斯蒂回归与最大熵模型"></a>第六章 逻辑斯蒂回归与最大熵模型</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cn0wsthj31b10u0k3x.jpg" alt="逻辑斯蒂回归与最大熵模型思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="/2019/06/11/jue-ce-shu/"/>
      <url>/2019/06/11/jue-ce-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="第五章-决策树"><a href="#第五章-决策树" class="headerlink" title="第五章 决策树"></a>第五章 决策树</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0ckogzd0j30wy0u0e81.jpg" alt="决策树思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴树贝叶斯</title>
      <link href="/2019/06/03/po-shu-bei-xie-si/"/>
      <url>/2019/06/03/po-shu-bei-xie-si/</url>
      
        <content type="html"><![CDATA[<h3 id="第四章-朴树贝叶斯法"><a href="#第四章-朴树贝叶斯法" class="headerlink" title="第四章 朴树贝叶斯法"></a>第四章 朴树贝叶斯法</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cirkxfkj31d10u0gz7.jpg" alt="朴树贝叶斯法思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K近邻法</title>
      <link href="/2019/05/25/k-jin-lin-fa/"/>
      <url>/2019/05/25/k-jin-lin-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="第三章-K近邻法"><a href="#第三章-K近邻法" class="headerlink" title="第三章 K近邻法"></a>第三章 K近邻法</h3><h4 id="1、思维导图："><a href="#1、思维导图：" class="headerlink" title="1、思维导图："></a>1、思维导图：</h4><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cgf8w06j30v70u04qp.jpg" alt="K近邻法思维导图"></p><h4 id="2、K近邻算法与K-means聚类算法的区别"><a href="#2、K近邻算法与K-means聚类算法的区别" class="headerlink" title="2、K近邻算法与K-means聚类算法的区别"></a>2、K近邻算法与K-means聚类算法的区别</h4><table><thead><tr><th>KNN</th><th>K-Means</th></tr></thead><tbody><tr><td>KNN是分类算法</td><td>K-Means是聚类算法</td></tr><tr><td>KNN是监督学习</td><td>K-Means非监督学习</td></tr><tr><td>没有明显的前期训练过程</td><td>有明显的前期训练过程</td></tr><tr><td>K的含义指的是判断依据来源个数</td><td>K的含义是集合的分类数目</td></tr></tbody></table><p>而这两者都用到了NN算法，一般使用kd树来实现。</p><h4 id="3、kd树的若干改进算法"><a href="#3、kd树的若干改进算法" class="headerlink" title="3、kd树的若干改进算法"></a>3、kd树的若干改进算法</h4><p><strong>（1）、BBF算法</strong></p><p>BBF（Best-Bin-First）查询算法是由David Lowe在1997的一篇文章中针对高维数据提出的一种近似算法，此算法能确保优先检索包含最近邻点可能性较高的空间，此外，BBF机制还设置了一个运行超时限定。采用了BBF查询机制后，kd树便可以有效的扩展到高维数据集上。</p><p>BBF算法的改进思路为：将“查询路径”上的结点进行排序，如按各自分割超平面（也称bin）与查询点的距离排序，也就是说，回溯检查总是从优先级最高（Best Bin）的树结点开始。</p><p><strong>（2）、球树</strong></p><p>仅仅在kd树上进行BBF算法的改进，仍然还是不能够避免一些结构本身存在的弊端，当处理不均匀分布的数据集时便会呈现出一个基本冲突：既要求树有完美的平衡结构，又要求待查找的区域近似方形，但不管是近似方形，还是矩形，甚至正方形，都不是最好的使用形状，因为他们都有角。</p><p>其实这个问题的实质是因为，我们对于距离的度量使用的是圆形，也就是欧氏距离，如果是我们之前提到的像切比雪夫距离这种方形的，就可以在一定程度上减少这个冲突。因为无论是你的模板和样本，其度量标准是一致的，也就是要么是方形的，都是方形的，要是圆形的，都是圆形的。</p><p>例如下面这个就是球树：</p><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd1w5xnvskj31100nw3zw.jpg" alt="球树"> </p><p>从球中选择一个离球的中心最远的点，然后选择第二个点离第一个点最远，将球中所有的点分配到离这两个聚类中心最近的一个上，然后计算每个聚类的中心，以及聚类能够包含它所有数据点所需的最小半径。这种方法的优点是分裂一个包含n个殊绝点的球的成本只是随n呈线性增加。</p><p>使用球树找出给定目标点的最近邻方法是，首先自上而下贯穿整棵树找出包含目标点所在的叶子，并在这个球里找出与目标点最靠近的点，这将确定出目标点距离它的最近邻点的一个上限值，然后跟KD树查找一样，检查同胞结点，如果目标点到同胞结点中心的距离超过同胞结点的半径与当前的上限值之和，那么同胞结点里不可能存在一个更近的点；否则的话，必须进一步检查位于同胞结点以下的子树。 </p><blockquote><p><em>参考引用文章：</em></p><p><a href="https://blog.csdn.net/qq_35082030/article/details/60965320" target="_blank" rel="noopener">https://blog.csdn.net/qq_35082030/article/details/60965320</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机</title>
      <link href="/2019/05/18/gan-zhi-ji/"/>
      <url>/2019/05/18/gan-zhi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="第二章-感知机"><a href="#第二章-感知机" class="headerlink" title="第二章 感知机"></a>第二章 感知机</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0cc4o9joj30mo2g04k1.jpg" alt="感知机思维导图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学习方法概论</title>
      <link href="/2019/05/10/tong-ji-xue-xi-fang-fa-gai-lun/"/>
      <url>/2019/05/10/tong-ji-xue-xi-fang-fa-gai-lun/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-统计学习方法概论"><a href="#第一章-统计学习方法概论" class="headerlink" title="第一章 统计学习方法概论"></a>第一章 统计学习方法概论</h3><p><img src="https://i0.wp.com/tva1.sinaimg.cn/large/00831rSTly1gd0c5n53x4j318p0u0tcu.jpg" alt="统计学习方法概论"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 统计学方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
